<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-07-09T12:37:20+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zukane CTF</title><subtitle>CTF Writeups, mostly focused on crypto</subtitle><author><name>Zukane</name></author><entry><title type="html">Curveware (HTB Business CTF 2025)</title><link href="http://localhost:4000/curveware/" rel="alternate" type="text/html" title="Curveware (HTB Business CTF 2025)" /><published>2025-05-26T13:00:00+02:00</published><updated>2025-05-26T13:00:00+02:00</updated><id>http://localhost:4000/curveware</id><content type="html" xml:base="http://localhost:4000/curveware/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given a set of encrypted files, and an elf binary:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── business-ctf-2025-dev
│   ├── crypto
│   │   ├── curveware
│   │   │   ├── flag.txt.vlny0742e9337a
│   │   │   ├── poc.py.vlnyc2b7865f66
│   │   │   ├── README.md.vlnya68395585b
│   │   │   └── task.txt.vlnyde7ca30df0
│   │   ├── early-bird
│   │   │   ├── flag.txt.vlny4a13aac40e
│   │   │   ├── README.md.vlny1d615936ca
│   │   │   └── task.txt.vlny152e012de7
│   │   ├── hidden-handshake
│   │   │   ├── flag.txt.vlny483931d01c
│   │   │   ├── README.md.vlnyda959133e7
│   │   │   └── task.txt.vlny37927847f9
│   │   ├── phoenix-zero-trust
│   │   │   ├── flag.txt.vlny42db696fd5
│   │   │   ├── README.md.vlnyd38f3522f4
│   │   │   └── task.txt.vlny383594e3ef
│   │   └── transcoded
│   │       ├── flag.txt.vlny048404e260
│   │       ├── README.md.vlnyd323bde76d
│   │       └── task.txt.vlnye5c611e15a
│   ├── README.md.vlny311cf84811
│   └── scenario.md.vlnycba760a47c
└── curveware

&gt; file curveware
curveware: PE32+ executable (console) x86-64, for MS Windows, 15 sections
</code></pre></div></div>

<p>This looks like a ransomware challenge. Based on the challenge title, it likely involves elliptic curves in some way. To find out what encryption has been used, and what cryptographic weakness can be used to decrypt the files, we have to reverse engineer the elf binary.</p>

<h5 id="reverse-engineering">Reverse engineering</h5>

<p>By disassembling the binary in Ghidra, we can get some insight into what encryption routine has been used on the files. The main function begins by calling the function <code class="language-plaintext highlighter-rouge">GetCurveParameters(local_9e8)</code></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">GetCurveParameters</span><span class="p">(</span><span class="n">undefined8</span> <span class="n">param_1</span><span class="p">){</span>
  <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
  <span class="n">longlong</span> <span class="n">local_10</span><span class="p">;</span>
  
  <span class="n">iVar1</span> <span class="o">=</span> <span class="n">ec_get_curve_params_by_type</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">local_10</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">iVar1</span> <span class="o">=</span> <span class="n">import_params</span><span class="p">(</span><span class="n">param_1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The function essentially just calls <code class="language-plaintext highlighter-rouge">ec_get_curve_params_by_type(4,&amp;local_10)</code> with curve type 4 and then instantiates the curve params with <code class="language-plaintext highlighter-rouge">import_params(param_1)</code>. One approach may be to investigate which elliptic curve corresponds to type 4 in a lookup table, but inspecting <code class="language-plaintext highlighter-rouge">ec_get_curve_params_by_type</code> reveals the curve in question:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">undefined8</span> <span class="nf">ec_get_curve_params_by_type</span><span class="p">(</span><span class="kt">int</span> <span class="n">param_1</span><span class="p">,</span><span class="n">undefined8</span> <span class="o">*</span><span class="n">param_2</span><span class="p">){</span>
  <span class="n">undefined8</span> <span class="n">uVar1</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">local_c</span><span class="p">;</span>
  
  <span class="k">if</span> <span class="p">((</span><span class="n">param_1</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">param_2</span> <span class="o">!=</span> <span class="p">(</span><span class="n">undefined8</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">uVar1</span> <span class="o">=</span> <span class="n">local_strlen</span><span class="p">(</span><span class="s">"SECP256R1"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_c</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">uVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">local_c</span> <span class="o">!=</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mh">0xffffffff</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="o">*</span><span class="n">param_2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">secp256r1_str_params</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">uVar1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mh">0xffffffff</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So the program uses <code class="language-plaintext highlighter-rouge">secp256r1</code>, also known as <code class="language-plaintext highlighter-rouge">P-256</code>. We can retrieve the curve parameters from https://neuromancer.sk/std/secg/secp256r1 later. After loading the curve parameters, the main function generates a 32-byte random value <code class="language-plaintext highlighter-rouge">local_bc8</code> by calling <code class="language-plaintext highlighter-rouge">get_random(local_bc8,0x20)</code>. Afterwards, the program begins traversing the sub-directories and processes the files in <code class="language-plaintext highlighter-rouge">process_directory(pcVar5,lVar1,local_bc8,local_1578)</code>. Here, the 32-byte key <code class="language-plaintext highlighter-rouge">local_bc8</code> is passed as an argument. Also, the curve parameters <code class="language-plaintext highlighter-rouge">local_1578</code> are passed as well.</p>

<p><code class="language-plaintext highlighter-rouge">process_directory</code> is a recursive function which further traverses sub-directories, handling one directory at a time. The most notable parts of the function include:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">process_directory</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">param_1</span><span class="p">,</span><span class="kt">size_t</span> <span class="n">param_2</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_3</span><span class="p">,</span><span class="n">undefined8</span> <span class="o">*</span><span class="n">param_4</span><span class="p">){</span>
<span class="p">[...]</span>
	<span class="n">DVar3</span> <span class="o">=</span> <span class="n">GetFileSize</span><span class="p">(</span><span class="n">hFile</span><span class="p">,(</span><span class="n">LPDWORD</span><span class="p">)</span><span class="mh">0x0</span><span class="p">);</span>
	<span class="n">lpBuffer_00</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">((</span><span class="n">ulonglong</span><span class="p">)(</span><span class="n">DVar3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
	<span class="n">BVar4</span> <span class="o">=</span> <span class="n">ReadFile</span><span class="p">(</span><span class="n">hFile</span><span class="p">,</span><span class="n">lpBuffer_00</span><span class="p">,</span><span class="n">DVar3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1e4</span><span class="p">,(</span><span class="n">LPOVERLAPPED</span><span class="p">)</span><span class="mh">0x0</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">BVar4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">exit</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">encrypt_data</span><span class="p">(</span><span class="n">lpBuffer_00</span><span class="p">,</span><span class="n">local_1e4</span><span class="p">,</span><span class="n">param_3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1d8</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1dc</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1d0</span><span class="p">);</span>
	<span class="n">lVar11</span> <span class="o">=</span> <span class="n">local_1d0</span><span class="p">;</span>
	<span class="n">lpBuffer</span> <span class="o">=</span> <span class="n">local_1d8</span><span class="p">;</span>
	<span class="n">DVar3</span> <span class="o">=</span> <span class="n">local_1dc</span><span class="p">;</span>
	<span class="n">sign_data</span><span class="p">(</span><span class="n">local_1c8</span><span class="p">,</span><span class="n">param_4</span><span class="p">,</span><span class="n">param_3</span><span class="p">,</span><span class="n">local_1d8</span><span class="p">,</span><span class="n">local_1dc</span><span class="p">,</span><span class="n">local_1d0</span><span class="p">);</span>
<span class="p">[...]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This section essentially reads in a file into the buffer <code class="language-plaintext highlighter-rouge">lpBuffer_00</code>, before calling the encryption routine <code class="language-plaintext highlighter-rouge">encrypt_data(lpBuffer_00,local_1e4,param_3,&amp;local_1d8,&amp;local_1dc,&amp;local_1d0)</code>. The variable <code class="language-plaintext highlighter-rouge">param_3</code> corresponds to the 32-byte key that was generated earlier. The encryption routine is as follows:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">encrypt_data</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">param_1</span><span class="p">,</span><span class="n">uint</span> <span class="n">param_2</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_3</span><span class="p">,</span><span class="n">longlong</span> <span class="o">*</span><span class="n">param_4</span><span class="p">,</span><span class="n">uint</span> <span class="o">*</span><span class="n">param_5</span><span class="p">,</span> <span class="n">undefined8</span> <span class="o">*</span><span class="n">param_6</span><span class="p">){</span>
<span class="p">[...]</span>
  <span class="n">sha256</span><span class="p">(</span><span class="n">param_1</span><span class="p">,</span><span class="n">param_2</span><span class="p">);</span>
  <span class="n">uVar5</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulonglong</span><span class="p">)</span><span class="n">param_2</span><span class="p">;</span>
  <span class="k">do</span> <span class="p">{</span>
    <span class="n">uVar4</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">uVar5</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="o">*</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="o">*</span><span class="n">param_4</span> <span class="o">+</span> <span class="n">uVar5</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">uVar6</span><span class="p">;</span>
    <span class="n">uVar5</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulonglong</span><span class="p">)</span><span class="n">uVar4</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">uVar3</span> <span class="o">!=</span> <span class="n">uVar4</span><span class="p">);</span>
  <span class="n">get_random</span><span class="p">(</span><span class="o">&amp;</span><span class="n">local_158</span><span class="p">,</span><span class="mh">0x10</span><span class="p">);</span>
  <span class="n">AES_init_ctx_iv</span><span class="p">(</span><span class="n">local_148</span><span class="p">,</span><span class="n">param_3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_158</span><span class="p">);</span>
  <span class="n">AES_CBC_encrypt_buffer</span><span class="p">(</span><span class="n">local_148</span><span class="p">,</span><span class="o">*</span><span class="n">param_4</span><span class="p">,</span><span class="o">*</span><span class="n">param_5</span><span class="p">);</span>
<span class="p">[...]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The plaintext <code class="language-plaintext highlighter-rouge">param_1</code> is hashed using SHA256. The hashed plaintext is saved into <code class="language-plaintext highlighter-rouge">param_6</code>. Then, a 16-byte random IV  is generated with <code class="language-plaintext highlighter-rouge">get_random(&amp;local_158,0x10)</code> and is passed to <code class="language-plaintext highlighter-rouge">AES_init_ctx_iv()</code> along with the 32-byte encryption key <code class="language-plaintext highlighter-rouge">param_3</code>. The plaintext is encrypted, and the IV is appended to the ciphertext before returning.</p>

<p>Back in the <code class="language-plaintext highlighter-rouge">process_directory</code> function, the ciphertext is signed with <code class="language-plaintext highlighter-rouge">sign_data(local_1c8,param_4,param_3,local_1d8,local_1dc,local_1d0)</code>. Crucially, the AES key <code class="language-plaintext highlighter-rouge">param_3</code> is passed to this function along with the ciphertext <code class="language-plaintext highlighter-rouge">local_1d8</code>, curve parameters <code class="language-plaintext highlighter-rouge">param_4</code> and plaintext hash <code class="language-plaintext highlighter-rouge">local_1d0</code>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">sign_data</span><span class="p">(</span><span class="n">longlong</span> <span class="n">param_1</span><span class="p">,</span><span class="n">longlong</span> <span class="n">param_2</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_3</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_4</span><span class="p">,</span> <span class="n">undefined4</span> <span class="n">param_5</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_6</span><span class="p">){</span>
<span class="p">[...]</span>
  <span class="n">sha256</span><span class="p">(</span><span class="n">param_4</span><span class="p">,</span><span class="n">param_5</span><span class="p">,</span><span class="n">local_678</span><span class="p">);</span>
  <span class="n">nn_init_from_buf</span><span class="p">(</span><span class="n">local_428</span><span class="p">,</span><span class="n">local_678</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
  <span class="n">nn_init_from_buf</span><span class="p">(</span><span class="n">local_578</span><span class="p">,</span><span class="n">param_3</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
  <span class="n">nn_init_from_buf</span><span class="p">(</span><span class="n">local_5e8</span><span class="p">,</span><span class="n">param_6</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
<span class="p">[...]</span>
  <span class="n">prj_pt_mul</span><span class="p">(</span><span class="n">local_1c8</span><span class="p">,</span><span class="n">local_5e8</span><span class="p">,</span><span class="n">param_2</span> <span class="o">+</span> <span class="mh">0x560</span><span class="p">);</span>
  <span class="n">prj_pt_to_aff</span><span class="p">(</span><span class="n">local_2d8</span><span class="p">,</span><span class="n">local_1c8</span><span class="p">);</span>
  <span class="n">nn_mod_sub</span><span class="p">(</span><span class="n">local_3b8</span><span class="p">,</span><span class="n">local_428</span><span class="p">,</span><span class="n">local_2d8</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_658</span><span class="p">);</span>
  <span class="n">nn_modinv_fermat</span><span class="p">(</span><span class="n">local_508</span><span class="p">,</span><span class="n">local_578</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_658</span><span class="p">);</span>
  <span class="n">nn_mod_sub</span><span class="p">(</span><span class="n">local_498</span><span class="p">,</span><span class="n">local_5e8</span><span class="p">,</span><span class="n">local_3b8</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_658</span><span class="p">);</span>
  <span class="n">nn_mod_mul</span><span class="p">(</span><span class="n">local_348</span><span class="p">,</span><span class="n">local_508</span><span class="p">,</span><span class="n">local_498</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_658</span><span class="p">);</span>
  <span class="n">nn_export_to_buf</span><span class="p">(</span><span class="n">param_1</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span><span class="n">local_3b8</span><span class="p">);</span>
  <span class="n">nn_export_to_buf</span><span class="p">(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x20</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span><span class="n">local_348</span><span class="p">);</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This signing routine essentially performs a series of computations like follows:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sha256(param_4,param_5,local_678)</code> is the SHA256 of the ciphertext</li>
  <li><code class="language-plaintext highlighter-rouge">nn_init_from_buf(local_428,local_678,0x20)</code> loads the ciphertext hash $z$ to <code class="language-plaintext highlighter-rouge">local_428</code></li>
  <li><code class="language-plaintext highlighter-rouge">nn_init_from_buf(local_578,param_3,0x20)</code> loads the AES key $d$ to <code class="language-plaintext highlighter-rouge">local_578</code></li>
  <li><code class="language-plaintext highlighter-rouge">nn_init_from_buf(local_5e8,param_6,0x20)</code> loads the nonce $k$ (plaintext hash) to <code class="language-plaintext highlighter-rouge">local_5e8</code></li>
  <li><code class="language-plaintext highlighter-rouge">prj_pt_mul(local_1c8,local_5e8,param_2 + 0x560)</code> calculates $R = k \cdot G$</li>
  <li><code class="language-plaintext highlighter-rouge">prj_pt_to_aff(local_2d8,local_1c8)</code> gets the affine coordinate $R.x$</li>
  <li><code class="language-plaintext highlighter-rouge">nn_mod_sub(local_3b8,local_428,local_2d8,&amp;local_658)</code> calculates $r = (z - R.x) \mod n$</li>
  <li><code class="language-plaintext highlighter-rouge">nn_modinv_fermat(local_508,local_578,&amp;local_658)</code> calculates $d^{-1} \mod n$</li>
  <li><code class="language-plaintext highlighter-rouge">nn_mod_sub(local_498,local_5e8,local_3b8,&amp;local_658)</code> calculates $k - r \mod n$</li>
  <li><code class="language-plaintext highlighter-rouge">nn_mod_mul(local_348,local_508,local_498,&amp;local_658)</code> calculates $s = (k-r)\cdot d^{-1} \mod n$</li>
</ul>

<p>Where $n$ is the curve order of <code class="language-plaintext highlighter-rouge">secp256r1</code>. The signature, consisting of values $(r,s)$, are returned by the function. The signing process looks similar to ECDSA, but it is not the same. We have $k = r+sd$ while ECDSA uses $k = s^{-1}(z+rd)$</p>

<p>Returning to <code class="language-plaintext highlighter-rouge">process_directory</code>, the function does some final crucial steps:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">*</span><span class="n">_Memory</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)(</span><span class="n">lVar11</span> <span class="o">+</span> <span class="mh">0x1b</span><span class="p">);</span>
<span class="o">*</span><span class="p">(</span><span class="n">undefined1</span> <span class="o">*</span><span class="p">)(</span><span class="n">_Memory</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">undefined1</span> <span class="o">*</span><span class="p">)(</span><span class="n">lVar11</span> <span class="o">+</span> <span class="mh">0x1f</span><span class="p">);</span>
<span class="n">_Source</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mh">0xb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">puVar12</span> <span class="o">=</span> <span class="n">_Memory</span><span class="p">;</span>
<span class="n">pcVar10</span> <span class="o">=</span> <span class="n">_Source</span><span class="p">;</span>
<span class="k">do</span> <span class="p">{</span>
	<span class="n">uVar1</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">undefined1</span> <span class="o">*</span><span class="p">)</span><span class="n">puVar12</span><span class="p">;</span>
	<span class="n">pcVar15</span> <span class="o">=</span> <span class="n">pcVar10</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
	<span class="n">puVar12</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)((</span><span class="n">longlong</span><span class="p">)</span><span class="n">puVar12</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
	<span class="n">__mingw_snprintf</span><span class="p">(</span><span class="n">pcVar10</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="o">&amp;</span><span class="p">.</span><span class="n">rdata</span><span class="p">,</span><span class="n">uVar1</span><span class="p">);</span>
	<span class="n">pcVar10</span> <span class="o">=</span> <span class="n">pcVar15</span><span class="p">;</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">pcVar15</span> <span class="o">!=</span> <span class="n">_Source</span> <span class="o">+</span> <span class="mi">10</span><span class="p">);</span>
<span class="n">DVar5</span> <span class="o">=</span> <span class="n">SetFilePointer</span><span class="p">(</span><span class="n">hFile</span><span class="p">,</span><span class="mi">0</span><span class="p">,(</span><span class="n">PLONG</span><span class="p">)</span><span class="mh">0x0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
<span class="n">BVar4</span> <span class="o">=</span> <span class="n">WriteFile</span><span class="p">(</span><span class="n">hFile</span><span class="p">,</span><span class="n">local_1c8</span><span class="p">,</span><span class="mh">0x40</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1e0</span><span class="p">,(</span><span class="n">LPOVERLAPPED</span><span class="p">)</span><span class="mh">0x0</span><span class="p">);</span>
<span class="n">BVar4</span> <span class="o">=</span> <span class="n">WriteFile</span><span class="p">(</span><span class="n">hFile</span><span class="p">,</span><span class="n">lpBuffer</span><span class="p">,</span><span class="n">DVar3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1e0</span><span class="p">,(</span><span class="n">LPOVERLAPPED</span><span class="p">)</span><span class="mh">0x0</span><span class="p">);</span>
<span class="n">CloseHandle</span><span class="p">(</span><span class="n">hFile</span><span class="p">);</span>
<span class="n">pcVar10</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="n">lVar8</span> <span class="o">+</span> <span class="mh">0x11</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">strncpy</span><span class="p">(</span><span class="n">pcVar10</span><span class="p">,</span><span class="n">pcVar7</span><span class="p">,</span><span class="n">lVar8</span> <span class="o">+</span> <span class="mi">1U</span><span class="p">);</span>
<span class="n">sVar6</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">pcVar10</span><span class="p">);</span>
<span class="n">builtin_strncpy</span><span class="p">(</span><span class="n">pcVar10</span> <span class="o">+</span> <span class="n">sVar6</span><span class="p">,</span><span class="s">".vlny"</span><span class="p">,</span><span class="mi">6</span><span class="p">);</span>
<span class="n">strncat</span><span class="p">(</span><span class="n">pcVar10</span><span class="p">,</span><span class="n">_Source</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
<span class="n">BVar4</span> <span class="o">=</span> <span class="n">MoveFileA</span><span class="p">(</span><span class="n">pcVar7</span><span class="p">,</span><span class="n">pcVar10</span><span class="p">);</span> 
</code></pre></div></div>

<p>This part essentially appends the suffix <code class="language-plaintext highlighter-rouge">.vlny</code> to the encrypted file’s filename, followed by 10 hex digits (5 bytes) of the plaintext hash. This is a critical part, as the plaintext hash is used as the nonce during the signing process, meaning we have a partial nonce leak for every signature. The 5 bytes correspond to the 40 least significant bits. This final part also writes the encrypted file contents, consisting of the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>signing variable s (32 bytes)
signing variable r (32 bytes)
ciphertext 
IV (16 bytes)
</code></pre></div></div>

<h5 id="decrypting-files">Decrypting files</h5>

<p>With a solid overview over the encryption process, signing process, and the file structure, the cryptographic vulnerability becomes quite apparent. 40/256 bits are leaked for all 18 signatures, allowing for the recovery of the private key $d$ by setting up and solving a hidden number problem instance. Since the private key $d$ is used for both signing and AES encryption, recovering the original plaintext file contents becomes trivial.</p>

<p>Like mentioned earlier, the custom signing algorithm uses the equation:</p>

\[\large k = r + s\cdot d\]

<p>Since we have a partial leak of the nonce, we can rewrite to:</p>

\[\large \begin{align}
\nonumber leak + 2^{40} \cdot x &amp;\equiv r + s \cdot d \mod n\\
\nonumber s \cdot d - 2^{40}\cdot x &amp;\equiv leak - r \mod n \\
\nonumber 2^{40^{-1}} \cdot s \cdot d - x &amp;\equiv 2^{40^{-1}}(leak - r) \mod n \\
\nonumber x - 2^{40^{-1}}\cdot s\cdot d+2^{40^{-1}}(leak-r) &amp;\equiv 0 \mod n
\end{align}\]

<p>Which is precisely a hidden number problem instance: $\beta_{i} - t_{i} \cdot \alpha + a_{i} \equiv 0 \mod p$ with $t = 2^{40^{-1}}\cdot s$ and $a = 2^{40^{-1}}(leak-r)$</p>

<p>The private key $d$ can be recovered by running LLL on the following lattice:</p>

\[\large B' = \begin{bmatrix}
n &amp;  &amp;  &amp;  &amp;  &amp; \\
 &amp; n &amp;  &amp;  &amp;  &amp; \\
 &amp;  &amp; \ddots &amp;  &amp;  &amp; \\
 &amp;  &amp;  &amp; n &amp;  &amp; \\
t_{1} &amp; t_{2} &amp; \dots &amp; t_{m} &amp; 2^{40}/n  \\
a_{1} &amp; a_{2} &amp; \dots &amp; a_{m} &amp;  &amp; 2^{40}
\end{bmatrix}\]

<p>With short vector $\large u’ = (x_{1},\dots,x_{m},2^{40}d/n,-2^{40})$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">M</span> <span class="o">=</span> <span class="n">identity_matrix</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span><span class="o">*</span><span class="n">n</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">vector</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">vector</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">vector</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">m</span> <span class="o">+</span> <span class="p">[</span><span class="n">B</span><span class="o">/</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">]))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">vector</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">m</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span>   <span class="n">B</span><span class="p">]))</span>

<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">M</span><span class="p">.</span><span class="n">LLL</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="n">B</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="n">n</span><span class="o">/</span><span class="n">B</span> <span class="o">%</span> <span class="n">n</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"d = </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">break</span>
<span class="c1"># d = 0xc5120eda0305ce74a125b5bd727e4fee5a24457ab376b69578c179f8440881e0
</span></code></pre></div></div>

<p>With the private key recovered, the <code class="language-plaintext highlighter-rouge">flag.txt.vlny0742e9337a</code> file can be decrypted, giving us our flag!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTB{m4lw4r3_d3v3l0p3rs_sh0uld_sTuDy_m0r3_crypt0}
</code></pre></div></div>

<h5 id="solvesage">solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">unpad</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">long_to_bytes</span>

<span class="n">n</span> <span class="o">=</span> <span class="mh">0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551</span>
<span class="n">B</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">40</span>     
<span class="n">Binv</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>                   

<span class="n">root</span>  <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">'business-ctf-2025-dev'</span><span class="p">)</span>
<span class="n">files</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">rglob</span><span class="p">(</span><span class="s">'*.vlny*'</span><span class="p">))</span>

<span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">leak</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
    <span class="n">blob</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read_bytes</span><span class="p">()</span>
    <span class="n">r</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">blob</span><span class="p">[</span>  <span class="p">:</span><span class="mi">32</span><span class="p">]))</span>
    <span class="n">s</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">blob</span><span class="p">[</span><span class="mi">32</span><span class="p">:</span><span class="mi">64</span><span class="p">]))</span>
    <span class="n">leak</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">suffix</span><span class="p">[</span><span class="mi">5</span><span class="p">:],</span> <span class="mi">16</span><span class="p">))</span>

<span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">t</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">ri</span><span class="p">,</span> <span class="n">si</span><span class="p">,</span> <span class="n">li</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">leak</span><span class="p">):</span>
    <span class="n">t</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">Binv</span> <span class="o">*</span> <span class="n">si</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
    <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="o">-</span><span class="n">Binv</span> <span class="o">*</span> <span class="p">(</span><span class="n">li</span> <span class="o">-</span> <span class="n">ri</span><span class="p">))</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>

<span class="n">M</span> <span class="o">=</span> <span class="n">identity_matrix</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span><span class="o">*</span><span class="n">n</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">vector</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">vector</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">vector</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">m</span> <span class="o">+</span> <span class="p">[</span><span class="n">B</span><span class="o">/</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">]))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">vector</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">m</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span>   <span class="n">B</span><span class="p">]))</span>

<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">M</span><span class="p">.</span><span class="n">LLL</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="n">B</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="n">n</span><span class="o">/</span><span class="n">B</span> <span class="o">%</span> <span class="n">n</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"d = </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">break</span>

<span class="n">key</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># curvewave flagfile
</span><span class="n">blob</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read_bytes</span><span class="p">()</span>
<span class="n">ct</span>  <span class="o">=</span> <span class="n">blob</span><span class="p">[</span><span class="mi">64</span><span class="p">:]</span>          
<span class="n">iv</span>  <span class="o">=</span> <span class="n">ct</span><span class="p">[</span><span class="o">-</span><span class="mi">16</span><span class="p">:]</span>
<span class="n">aes</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
<span class="n">pt</span>  <span class="o">=</span> <span class="n">unpad</span><span class="p">(</span><span class="n">aes</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">[:</span><span class="o">-</span><span class="mi">16</span><span class="p">]),</span> <span class="mi">16</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>   
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Elliptic Curve" /><category term="Hidden Number Problem" /><category term="Ransomware" /><category term="Reverse Engineering" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Dried Up Crypto (ictf Round 56)</title><link href="http://localhost:4000/dried-up-crypto/" rel="alternate" type="text/html" title="Dried Up Crypto (ictf Round 56)" /><published>2025-05-01T10:00:00+02:00</published><updated>2025-05-01T10:00:00+02:00</updated><id>http://localhost:4000/dried-up-crypto</id><content type="html" xml:base="http://localhost:4000/dried-up-crypto/"><![CDATA[<h5 id="challenge-overview">Challenge Overview</h5>

<p>In this CTF challenge, we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getPrime</span><span class="p">,</span> <span class="n">bytes_to_long</span>
<span class="kn">from</span> <span class="nn">secrets</span> <span class="kn">import</span> <span class="n">randbits</span>

<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'ictf{REDACTED}'</span>

<span class="n">p</span><span class="p">,</span><span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">),</span><span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="k">assert</span><span class="p">((</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">e</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
<span class="k">assert</span><span class="p">((</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">e</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>

<span class="n">M1</span><span class="p">,</span><span class="n">M2</span> <span class="o">=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="o">|</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="p">,</span><span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="o">|</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="n">P</span><span class="p">,</span><span class="n">Q</span> <span class="o">=</span> <span class="n">p</span> <span class="o">&amp;</span> <span class="n">M1</span><span class="p">,</span> <span class="n">q</span> <span class="o">&amp;</span> <span class="n">M2</span>

<span class="n">n</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">),</span><span class="n">e</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"c = </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"n = </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"M1 = </span><span class="si">{</span><span class="n">M1</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"M2 = </span><span class="si">{</span><span class="n">M2</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"P = </span><span class="si">{</span><span class="n">P</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Q = </span><span class="si">{</span><span class="n">Q</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c = 8727199524595926705764225400506509289328151131514216250729515468155056218121221736963201841068215034487098098953821401326608386786346273720157155314820322698467429532461275463492599870550737132469369170204135115917482423036582822051988921146256688643845978757358407310854847663288337574501668030413804655286776436934536537698538527143491308805754764317305745181888684722727299988112034122487006667085647945475968191154669980943257738894146053667458797138697522920065140999462467096217712503505631649242142240435841977317598886490888750486215707059341912936564463860839090693276780817194811851886409356689470673107532
n = 10644244264245763932368979306576292154978169307980875431845848585515469979129741395711953185867051023317557615618234242176875251628599522772285258093327797679006324429376013569137018200577185349745003553221219229088693373960547344593762243714560234819514388391843307341206257538676824211613659149855441367734883320000869003833119510179206721701295702803923970241717612194010327944659540526556778579813186112749725822081690619963415418470255547473934066594150396804785237389851791915432015775405773476289374397136777722281258153565989398760008739331917818507905928387120867159103459386796293552147742130942785387667101
M1 = 88914640319156584554519907036301003224288784208184838268121846462159927955700945270283676500515406136279062455494762039147468454696771001133686799200482356740310590971170822957938953133862391626427210893445970048978263432949487046574710938280744537191675594575399501647648365744088495505838716001393025318711
M2 = 80710645955732183961498834296041390466353463350909365967073721088344234170831463482355150027971590908133797348848447302046512581471517653450640672441875363390417692734403220383748851502073357434012901646484453882427070643197703826675885986584075167513954328971199897226577585871016371987052379150617824721747
P = 1454713629297571001528363141111343262783446611248718929759592692372410193692959981391616314247878825643517231716578815166717528906295323061858760318849863325461174191466111073232730195560930748935209775742509843564017912569158094461170983358891473208999861629367188907727554105902252420135214355007297361937
Q = 23026771663186153673881188958499640470803688134356820454731962008947492131018559717122163720894546472163872899425608926369661262023609393522302590736445675570962275851657015555698875694838166833166542306554507099577746272183034587942732263335474963112075217970257365953713038351465989425740093838238205086529
</code></pre></div></div>

<p>This is a classic RSA setup. We are given some partial information of the prime factors $p$ and $q$.</p>

<h5 id="recovering-the-prime-factors">Recovering the prime factors</h5>

<p>The encryption script generates two bit-masks $M_{1}$ and $M_{2}$. The bit-masks are generated by OR-ing two series of random bits:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">M1</span> <span class="o">=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="o">|</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">M2</span> <span class="o">=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="o">|</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</code></pre></div></div>

<p>Our hints are then generated by AND-ing the prime factors with the bit-masks:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span> <span class="o">=</span> <span class="n">p</span> <span class="o">&amp;</span> <span class="n">M1</span>
<span class="n">Q</span> <span class="o">=</span> <span class="n">q</span> <span class="o">&amp;</span> <span class="n">M2</span>
</code></pre></div></div>

<p>Because $M_{1}$ and $M_{2}$ are generated using OR, around 75% of the prime factors’ bits are leaked. The prime factors can be recovered using a branch-and-prune method. For this, we can utilize the implementation of the good old reliable https://github.com/jvdsn/crypto-attacks/.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p_part</span> <span class="o">=</span> <span class="n">PartialInteger</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">M1</span><span class="p">,</span> <span class="n">bitlen</span><span class="p">)</span>
<span class="n">q_part</span> <span class="o">=</span> <span class="n">PartialInteger</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">M2</span><span class="p">,</span> <span class="n">bitlen</span><span class="p">)</span>
<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">factorize_pq</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">p_part</span><span class="p">,</span> <span class="n">q_part</span><span class="p">)</span>
</code></pre></div></div>

<p>After recovering the prime factors, decryption is trivial.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ictf{4_p4r714l_1nf0rm4710n_r54_w17h0u7_l4771c35}
</code></pre></div></div>

<h5 id="solvesage">solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PartialInteger</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">bits</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">v</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">m</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">bit_length</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">mask</span><span class="p">),</span> <span class="n">bits</span>
    <span class="k">def</span> <span class="nf">to_bits_le</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nb">str</span><span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="k">else</span> <span class="s">'?'</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">bit_length</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">_branch_and_prune_pq</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">p_</span><span class="p">,</span> <span class="n">q_</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>     
        <span class="k">yield</span> <span class="n">p_</span><span class="p">,</span> <span class="n">q_</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">c1</span> <span class="o">=</span> <span class="p">((</span><span class="n">N</span> <span class="o">-</span> <span class="n">p_</span> <span class="o">*</span> <span class="n">q_</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span>
        <span class="n">p_prev</span><span class="p">,</span> <span class="n">q_prev</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">p_bit</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">p_prev</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="p">(</span><span class="n">p_prev</span><span class="p">,):</span>
            <span class="k">for</span> <span class="n">q_bit</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">q_prev</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="p">(</span><span class="n">q_prev</span><span class="p">,):</span>
                <span class="k">if</span> <span class="n">p_bit</span> <span class="o">^^</span> <span class="n">q_bit</span> <span class="o">==</span> <span class="n">c1</span><span class="p">:</span>
                    <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_bit</span><span class="p">,</span> <span class="n">q_bit</span>
                    <span class="k">yield</span> <span class="k">from</span> <span class="n">_branch_and_prune_pq</span><span class="p">(</span>
                        <span class="n">N</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span>
                        <span class="n">p_</span> <span class="o">|</span> <span class="p">(</span><span class="n">p_bit</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">),</span>
                        <span class="n">q_</span> <span class="o">|</span> <span class="p">(</span><span class="n">q_bit</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">),</span>
                        <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_prev</span><span class="p">,</span> <span class="n">q_prev</span> 

<span class="k">def</span> <span class="nf">factorize_pq</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">p_part</span><span class="p">,</span> <span class="n">q_part</span><span class="p">):</span>
    <span class="n">p_bits</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span> <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="s">'?'</span> <span class="k">else</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">p_part</span><span class="p">.</span><span class="n">to_bits_le</span><span class="p">()]</span>
    <span class="n">q_bits</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span> <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="s">'?'</span> <span class="k">else</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">q_part</span><span class="p">.</span><span class="n">to_bits_le</span><span class="p">()]</span>
    <span class="k">for</span> <span class="n">p_val</span><span class="p">,</span> <span class="n">q_val</span> <span class="ow">in</span> <span class="n">_branch_and_prune_pq</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">p_bits</span><span class="p">,</span> <span class="n">q_bits</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">p_val</span> <span class="o">*</span> <span class="n">q_val</span> <span class="o">==</span> <span class="n">N</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">p_val</span><span class="p">,</span> <span class="n">q_val</span>

<span class="n">e</span>  <span class="o">=</span> <span class="mh">0x10001</span>
<span class="n">c</span>  <span class="o">=</span> <span class="mi">8727199524595926705764225400506509289328151131514216250729515468155056218121221736963201841068215034487098098953821401326608386786346273720157155314820322698467429532461275463492599870550737132469369170204135115917482423036582822051988921146256688643845978757358407310854847663288337574501668030413804655286776436934536537698538527143491308805754764317305745181888684722727299988112034122487006667085647945475968191154669980943257738894146053667458797138697522920065140999462467096217712503505631649242142240435841977317598886490888750486215707059341912936564463860839090693276780817194811851886409356689470673107532</span>
<span class="n">n</span>  <span class="o">=</span> <span class="mi">10644244264245763932368979306576292154978169307980875431845848585515469979129741395711953185867051023317557615618234242176875251628599522772285258093327797679006324429376013569137018200577185349745003553221219229088693373960547344593762243714560234819514388391843307341206257538676824211613659149855441367734883320000869003833119510179206721701295702803923970241717612194010327944659540526556778579813186112749725822081690619963415418470255547473934066594150396804785237389851791915432015775405773476289374397136777722281258153565989398760008739331917818507905928387120867159103459386796293552147742130942785387667101</span>
<span class="n">M1</span> <span class="o">=</span> <span class="mi">88914640319156584554519907036301003224288784208184838268121846462159927955700945270283676500515406136279062455494762039147468454696771001133686799200482356740310590971170822957938953133862391626427210893445970048978263432949487046574710938280744537191675594575399501647648365744088495505838716001393025318711</span>
<span class="n">M2</span> <span class="o">=</span> <span class="mi">80710645955732183961498834296041390466353463350909365967073721088344234170831463482355150027971590908133797348848447302046512581471517653450640672441875363390417692734403220383748851502073357434012901646484453882427070643197703826675885986584075167513954328971199897226577585871016371987052379150617824721747</span>
<span class="n">P</span>  <span class="o">=</span> <span class="mi">1454713629297571001528363141111343262783446611248718929759592692372410193692959981391616314247878825643517231716578815166717528906295323061858760318849863325461174191466111073232730195560930748935209775742509843564017912569158094461170983358891473208999861629367188907727554105902252420135214355007297361937</span>
<span class="n">Q</span>  <span class="o">=</span> <span class="mi">23026771663186153673881188958499640470803688134356820454731962008947492131018559717122163720894546472163872899425608926369661262023609393522302590736445675570962275851657015555698875694838166833166542306554507099577746272183034587942732263335474963112075217970257365953713038351465989425740093838238205086529</span>

<span class="n">bitlen</span> <span class="o">=</span> <span class="mi">1024</span>   
<span class="n">p_part</span> <span class="o">=</span> <span class="n">PartialInteger</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">M1</span><span class="p">,</span> <span class="n">bitlen</span><span class="p">)</span>
<span class="n">q_part</span> <span class="o">=</span> <span class="n">PartialInteger</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">M2</span><span class="p">,</span> <span class="n">bitlen</span><span class="p">)</span>
<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">factorize_pq</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">p_part</span><span class="p">,</span> <span class="n">q_part</span><span class="p">)</span>

<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># ictf{4_p4r714l_1nf0rm4710n_r54_w17h0u7_l4771c35}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Branch and prune" /><summary type="html"><![CDATA[Challenge Overview]]></summary></entry><entry><title type="html">Noise (ictf Round 49)</title><link href="http://localhost:4000/noise/" rel="alternate" type="text/html" title="Noise (ictf Round 49)" /><published>2025-05-01T03:00:00+02:00</published><updated>2025-05-01T03:00:00+02:00</updated><id>http://localhost:4000/noise</id><content type="html" xml:base="http://localhost:4000/noise/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">2048</span><span class="p">),</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>

<span class="n">noisy</span><span class="p">,</span> <span class="n">noisier</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="mi">12</span><span class="p">),</span> <span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="mi">512</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>

<span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

<span class="n">gift</span> <span class="o">=</span> <span class="n">noisy</span> <span class="o">*</span> <span class="n">p</span> <span class="o">+</span> <span class="n">noisier</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">n</span><span class="o">=</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">c</span><span class="o">=</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">e</span><span class="o">=</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">gift</span><span class="o">=</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>As well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n=2210207631834878306977610331587079414688726953852127891743978241115467417514094490885566596532764649734820781875162772076016465849910335495372655172642859051060956584290873279160663067803174918451720322838557173843633878071295344210911196115990053284420290269638208349629325617519702019624501487443701298384672014340985699408886396495620058467232100228731856574068359498427202897094625763145751714585179102627870557248970789486442471319505178102443916262883081617756026976865185419952047507555024806306004206204042146093305086341414121101850799333552467591600959030784159616150021083233109658306508752117033405807640546353541158685254561969331091010971880374397106345601382073403759349417748413427393638774935665402411809081311678970683509810197459847560263116215959674274648782638547882565264544675777393850180083460661862299374321637799493291320411669948548144915613244602771858777564064822457745520136074892686631201535629
c=79439884742083711071755708487414199227960981699158038243609142136149459074237967818193044573408796991464893562991427356744294371475148385737143807007504892071879989044266659035575563987497090782335686903156254372768431356367418614020286355521959397788294292899973119817539182954396015903303725571977137543596186210469780857742751071840507978622305859250707777868161458398620843538940309027698509455591823032948634850046109079854184348132280034164050803222199373753935223739099032044266536568184980008630458622800613158348155826201215465471666029712694113256326735123264023294318770217642927129637551823218005993221538797660621438082190763601605266305238235566305280859661354507510659899045052637616359654240690250951805447842902044413272339036945387447645766924762392584002031869390162781669350528181577055491871204217667526325081714043586669414455262130528301349828288629641304620478812606124138969628375055191143814322641
e=65537
gift=76161898251767442700733157555848818813603954596961294098824533307067668835961954000479299659153714638772058129913954467688624803595944141139373250325395786662059257969706539819120584005106522589094454995565373852400017032856812097418510354121690769294765707631393606366289280283451782627364805828863775680443955954083274513766771291143807920615369032763512859350304599713181948381282632555462948635135094538099931625876301604238310194450086512286119571690086064406403874078915448155800917929395528944094970903688886559478191636291079886098726158646354963419686358844253161736807644626698053019138548522750953514577562660
</code></pre></div></div>

<p>We are given a hint $noisy \cdot p + noisier$ where the noise terms are 12 bits and 512 bits respectively.</p>

<h5 id="recovering-p">Recovering p</h5>

<p>We also notice that the prime factor $p$ is 2048 bits, while $q$ is just 1024 bits. This means the noise terms are quite small compared to $p$ itself. Lets denote the noise terms as $a$ and $b$:</p>

\[\large gift = a\cdot p+b\]

<p>If we can recover the noise $b$, we can recover $a\cdot p$ and then use $gcd$ to recover the prime factors.</p>

<p>To do this, we can set up a univariate polynomial and solve for the unknown x:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">N</span><span class="p">))</span>
<span class="n">roots</span> <span class="o">=</span> <span class="p">(</span><span class="n">gift</span> <span class="o">-</span> <span class="n">x</span><span class="p">).</span><span class="n">monic</span><span class="p">().</span><span class="n">small_roots</span><span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="mi">512</span><span class="p">,</span> <span class="mf">0.66</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">gift</span> <span class="o">-</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">p</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">gcd</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">N</span><span class="p">))</span>
</code></pre></div></div>

<p>From here, decryption is simple:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">q</span> <span class="o">=</span> <span class="n">N</span> <span class="o">//</span> <span class="n">p</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">N</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>Which gives us our flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ictf{recover_it_using_continued_fraction_b7b85f8e}
</code></pre></div></div>

<h5 id="solvepy">Solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span><span class="o">=</span><span class="mi">2210207631834878306977610331587079414688726953852127891743978241115467417514094490885566596532764649734820781875162772076016465849910335495372655172642859051060956584290873279160663067803174918451720322838557173843633878071295344210911196115990053284420290269638208349629325617519702019624501487443701298384672014340985699408886396495620058467232100228731856574068359498427202897094625763145751714585179102627870557248970789486442471319505178102443916262883081617756026976865185419952047507555024806306004206204042146093305086341414121101850799333552467591600959030784159616150021083233109658306508752117033405807640546353541158685254561969331091010971880374397106345601382073403759349417748413427393638774935665402411809081311678970683509810197459847560263116215959674274648782638547882565264544675777393850180083460661862299374321637799493291320411669948548144915613244602771858777564064822457745520136074892686631201535629</span>
<span class="n">c</span><span class="o">=</span><span class="mi">79439884742083711071755708487414199227960981699158038243609142136149459074237967818193044573408796991464893562991427356744294371475148385737143807007504892071879989044266659035575563987497090782335686903156254372768431356367418614020286355521959397788294292899973119817539182954396015903303725571977137543596186210469780857742751071840507978622305859250707777868161458398620843538940309027698509455591823032948634850046109079854184348132280034164050803222199373753935223739099032044266536568184980008630458622800613158348155826201215465471666029712694113256326735123264023294318770217642927129637551823218005993221538797660621438082190763601605266305238235566305280859661354507510659899045052637616359654240690250951805447842902044413272339036945387447645766924762392584002031869390162781669350528181577055491871204217667526325081714043586669414455262130528301349828288629641304620478812606124138969628375055191143814322641</span>
<span class="n">e</span><span class="o">=</span><span class="mi">65537</span>
<span class="n">gift</span><span class="o">=</span><span class="mi">76161898251767442700733157555848818813603954596961294098824533307067668835961954000479299659153714638772058129913954467688624803595944141139373250325395786662059257969706539819120584005106522589094454995565373852400017032856812097418510354121690769294765707631393606366289280283451782627364805828863775680443955954083274513766771291143807920615369032763512859350304599713181948381282632555462948635135094538099931625876301604238310194450086512286119571690086064406403874078915448155800917929395528944094970903688886559478191636291079886098726158646354963419686358844253161736807644626698053019138548522750953514577562660</span>

<span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">N</span><span class="p">))</span>
<span class="n">roots</span> <span class="o">=</span> <span class="p">(</span><span class="n">gift</span> <span class="o">-</span> <span class="n">x</span><span class="p">).</span><span class="n">monic</span><span class="p">().</span><span class="n">small_roots</span><span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="mi">512</span><span class="p">,</span> <span class="mf">0.33</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">gift</span> <span class="o">-</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">p</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">gcd</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">N</span><span class="p">))</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">N</span> <span class="o">//</span> <span class="n">p</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">N</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<h6 id="alternate-solution-using-continued-fractions">Alternate solution using continued fractions</h6>

<p>While I solved this challenge using univariate coppersmith, the intended solution seems to be continued fractions:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">fractions</span> <span class="kn">import</span> <span class="n">Fraction</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">gcd</span>

<span class="n">n</span><span class="o">=</span><span class="mi">2210207631834878306977610331587079414688726953852127891743978241115467417514094490885566596532764649734820781875162772076016465849910335495372655172642859051060956584290873279160663067803174918451720322838557173843633878071295344210911196115990053284420290269638208349629325617519702019624501487443701298384672014340985699408886396495620058467232100228731856574068359498427202897094625763145751714585179102627870557248970789486442471319505178102443916262883081617756026976865185419952047507555024806306004206204042146093305086341414121101850799333552467591600959030784159616150021083233109658306508752117033405807640546353541158685254561969331091010971880374397106345601382073403759349417748413427393638774935665402411809081311678970683509810197459847560263116215959674274648782638547882565264544675777393850180083460661862299374321637799493291320411669948548144915613244602771858777564064822457745520136074892686631201535629</span>
<span class="n">c</span><span class="o">=</span><span class="mi">79439884742083711071755708487414199227960981699158038243609142136149459074237967818193044573408796991464893562991427356744294371475148385737143807007504892071879989044266659035575563987497090782335686903156254372768431356367418614020286355521959397788294292899973119817539182954396015903303725571977137543596186210469780857742751071840507978622305859250707777868161458398620843538940309027698509455591823032948634850046109079854184348132280034164050803222199373753935223739099032044266536568184980008630458622800613158348155826201215465471666029712694113256326735123264023294318770217642927129637551823218005993221538797660621438082190763601605266305238235566305280859661354507510659899045052637616359654240690250951805447842902044413272339036945387447645766924762392584002031869390162781669350528181577055491871204217667526325081714043586669414455262130528301349828288629641304620478812606124138969628375055191143814322641</span>
<span class="n">e</span><span class="o">=</span><span class="mi">65537</span>
<span class="n">gift</span><span class="o">=</span><span class="mi">76161898251767442700733157555848818813603954596961294098824533307067668835961954000479299659153714638772058129913954467688624803595944141139373250325395786662059257969706539819120584005106522589094454995565373852400017032856812097418510354121690769294765707631393606366289280283451782627364805828863775680443955954083274513766771291143807920615369032763512859350304599713181948381282632555462948635135094538099931625876301604238310194450086512286119571690086064406403874078915448155800917929395528944094970903688886559478191636291079886098726158646354963419686358844253161736807644626698053019138548522750953514577562660</span>

<span class="n">frac</span> <span class="o">=</span> <span class="n">Fraction</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">gift</span><span class="p">).</span><span class="n">limit_denominator</span><span class="p">(</span><span class="mi">4096</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">frac</span><span class="p">.</span><span class="n">numerator</span><span class="p">)</span>                  
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span> <span class="o">//</span> <span class="n">p</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Coppersmith small roots" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">RSARSA (ictf Round 52)</title><link href="http://localhost:4000/rsarsa/" rel="alternate" type="text/html" title="RSARSA (ictf Round 52)" /><published>2025-05-01T02:00:00+02:00</published><updated>2025-05-01T02:00:00+02:00</updated><id>http://localhost:4000/rsarsa</id><content type="html" xml:base="http://localhost:4000/rsarsa/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">secret</span> <span class="kn">import</span> <span class="n">flag</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">getPrime</span>
<span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">urandom</span>

<span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span>
<span class="k">while</span> <span class="n">p</span><span class="o">%</span><span class="mi">3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1001</span><span class="p">)</span>
<span class="k">while</span> <span class="n">q</span><span class="o">%</span><span class="mi">3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1001</span><span class="p">)</span>
<span class="k">while</span> <span class="n">P</span><span class="o">%</span><span class="mi">3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="n">P</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="k">while</span> <span class="n">Q</span><span class="o">%</span><span class="mi">3</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span> <span class="n">Q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="n">n</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
<span class="n">N</span> <span class="o">=</span> <span class="n">P</span><span class="o">*</span><span class="n">Q</span>

<span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span> <span class="o">+</span> <span class="n">urandom</span><span class="p">(</span><span class="mi">250</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">)))</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">3</span>

<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
<span class="n">C</span> <span class="o">=</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">N</span><span class="p">)</span><span class="o">*</span><span class="n">q</span><span class="p">)</span><span class="o">%</span><span class="n">N</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'out.txt'</span><span class="p">,</span><span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">n</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">c</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">N</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">C</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<p>As well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n = 236165963974549843165116395504697902191713379536628118224442456369682302266394059291805550850454501790983078745877277808465242450967192483721221804260097540207577805062483656523327027127554710603966355779002569448126827875849586909708264874355346913072634179303036432164732044525075631421114547665911909245396864649081324916352615048804238378500443339490430805687717735684234839495464001575301049381927288871113238709183695134250935765261299598697578849137375656662373462784922948497996422774555641898913228531573884546030084889237337034678567704892293682351242487623366576639394595575585737748297628969
c = 70937012742384298918498947273158135897378405817961054208468507698675885078698256087375111837428304573078062065633783770628342991758025350342481268180700230612722899026588541878904025893741429507151056686887872849449670311554735563584135338155830845926213289013822577616362794865255147852918994796746331323556683930502366845200103692080775988066038363189731329287562177600843653604176315077351590599271405298532429144976167210974674215140921019287905291182057378400248332045718636113089603523143042785670709665781815838353423684587315486764254364359269569359888642641186171777475467206816292957014109298
N = 13559643931510231890645252059392928830324878403065777432078047001203751827960606291671049295745925572045928516195747933143730424354729124065331936456182264578676144427400292605461916569434409294456724314100819999479249740665646695282083306225220537019377541170020872360049287615554093874460563300874852415511897525645607710048718121342471391046511248087651223041929052149218448630378746909560110882899655656687984011210519333987281129803478797350285596913131043564417404130060868808451206852147929161483360924558387919617786314342462258102165618528861476250258876654302439406603504196138731002715669914240460335010891
C = 8275456195949033635467084095519107709201520788369843769112612900914126045121100567953979244052722913960259224583894825296560682673296622047075175324016507276388107904876439908187727967560228110789357765846667845045209064071847259841181338077835834748735605960343420564692832127030070311244168918947119031684158691819391344400702542409477570193678230185099108849985093513086193902773249508226511128276263713550182135750315888219451287568184957554794890731479934946953654922694958015237442372049821287406228796371974841586661090969263065535555883597103891939136230373286602239899758144274469967582717851587584634595648
</code></pre></div></div>

<h5 id="recovering-the-prime-factors">Recovering the prime factors</h5>

<p>We are given the standard ciphertext $c$, as well as the hint $C$:</p>

\[\large C = (p^{3} \mod N) \cdot q \mod N\]

<p>Because this is all $\mod N$, we can rewrite to:</p>

\[\large C = p^{3}\cdot q \mod N\]

<p>Since we also have $n = p\cdot q$, we can calculate:</p>

\[\large C \cdot n^{-1} \equiv p^{2} \mod N\]

<p>We can then recover the prime factor $p$ by taking the square root. We don’t need to find the modular square roots because $p^{2} &lt; P\cdot Q$. From here, decryption is simple.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">q</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s">"}"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="sa">b</span><span class="s">"}"</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">.</span><span class="n">decode</span><span class="p">())</span>
<span class="c1">#ictf{my_d0u813D_RSA_D!D_n07_Cook}
</span></code></pre></div></div>

<h5 id="solvepy">solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">236165963974549843165116395504697902191713379536628118224442456369682302266394059291805550850454501790983078745877277808465242450967192483721221804260097540207577805062483656523327027127554710603966355779002569448126827875849586909708264874355346913072634179303036432164732044525075631421114547665911909245396864649081324916352615048804238378500443339490430805687717735684234839495464001575301049381927288871113238709183695134250935765261299598697578849137375656662373462784922948497996422774555641898913228531573884546030084889237337034678567704892293682351242487623366576639394595575585737748297628969</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">70937012742384298918498947273158135897378405817961054208468507698675885078698256087375111837428304573078062065633783770628342991758025350342481268180700230612722899026588541878904025893741429507151056686887872849449670311554735563584135338155830845926213289013822577616362794865255147852918994796746331323556683930502366845200103692080775988066038363189731329287562177600843653604176315077351590599271405298532429144976167210974674215140921019287905291182057378400248332045718636113089603523143042785670709665781815838353423684587315486764254364359269569359888642641186171777475467206816292957014109298</span>
<span class="n">N</span> <span class="o">=</span> <span class="mi">13559643931510231890645252059392928830324878403065777432078047001203751827960606291671049295745925572045928516195747933143730424354729124065331936456182264578676144427400292605461916569434409294456724314100819999479249740665646695282083306225220537019377541170020872360049287615554093874460563300874852415511897525645607710048718121342471391046511248087651223041929052149218448630378746909560110882899655656687984011210519333987281129803478797350285596913131043564417404130060868808451206852147929161483360924558387919617786314342462258102165618528861476250258876654302439406603504196138731002715669914240460335010891</span>
<span class="n">C</span> <span class="o">=</span> <span class="mi">8275456195949033635467084095519107709201520788369843769112612900914126045121100567953979244052722913960259224583894825296560682673296622047075175324016507276388107904876439908187727967560228110789357765846667845045209064071847259841181338077835834748735605960343420564692832127030070311244168918947119031684158691819391344400702542409477570193678230185099108849985093513086193902773249508226511128276263713550182135750315888219451287568184957554794890731479934946953654922694958015237442372049821287406228796371974841586661090969263065535555883597103891939136230373286602239899758144274469967582717851587584634595648</span>

<span class="n">A</span> <span class="o">=</span> <span class="n">C</span> <span class="o">*</span> <span class="nb">pow</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">A</span><span class="p">)</span> 
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s">"}"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="sa">b</span><span class="s">"}"</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">.</span><span class="n">decode</span><span class="p">())</span>
<span class="c1">#ictf{my_d0u813D_RSA_D!D_n07_Cook}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Decision (ictf Round 53)</title><link href="http://localhost:4000/decision/" rel="alternate" type="text/html" title="Decision (ictf Round 53)" /><published>2025-04-30T13:00:00+02:00</published><updated>2025-04-30T13:00:00+02:00</updated><id>http://localhost:4000/decision</id><content type="html" xml:base="http://localhost:4000/decision/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span> 
<span class="kn">from</span> <span class="nn">secrets</span> <span class="kn">import</span> <span class="n">randbits</span>
<span class="k">def</span> <span class="nf">getRandSum</span><span class="p">():</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">randbits</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span>
    
<span class="k">def</span> <span class="nf">getPrimeSum</span><span class="p">(</span><span class="n">Primes</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">Primes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">res</span>


<span class="n">flag</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>
<span class="n">m</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">))[</span><span class="mi">2</span><span class="p">:]</span>
<span class="n">Primes</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
    <span class="n">Primes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">getPrime</span><span class="p">(</span><span class="mi">256</span><span class="p">))</span>
<span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">m</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">"0"</span><span class="p">:</span>
        <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">getRandSum</span><span class="p">())</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">getPrimeSum</span><span class="p">(</span><span class="n">Primes</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">Primes</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">out</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>As well as the lists <code class="language-plaintext highlighter-rouge">primes</code> and <code class="language-plaintext highlighter-rouge">out</code> in output.txt</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[72631919237287927717402325207066133372227433253296739177918376436148037178709, 113353610291242016590065192873217709952603000986249688822443880798128343484243, 61233066689578933084047067233486334593864627770848707460125612953653435525433, 77978495575166025609783168685853318929929985120608382285997233070243753385193, 80417172361794527546157297403719656639313353810617700273168888986350803004203, 93800524062346599265231876057535203946903026875666516269890416900099617168269, 97119169071341082676466697825381644482201126912248293435182129435216726548277, 90832133440133156989159367279306176825998079966947793083692222518066327714289, 111156153696251933778615089796986226303676502808517311473776412932401230476889, 96876329906549730024451384329729713704506332533562500650498800553860101511563, 86286584634698122955683719925475582532115192185246692159668723874434524279659, 65903466048748173224590166091273334517945429553166084561141664315404238203907, 80257644525014402296950785012990048502725806405293146360109821535239650852907, 58373867077613198457078300893876782065732447821855506855323213372595523275789, 70307897209099281479027830823136514151063615523489003132414884551468231257349, 111433863257040047657057024064485609580701784312490549902307306283243603655901, 88549800795939126019069388048803588676552691797977376332734685232332072164611, 86476382757716587211956370701024351863110631836242977802213434730486621965127, 82148112346979254967951647310613710507093341929507534256164313491746002586951, 106206517690710852498098306083737354679143918661360147773439327973136200544311, 68502501866658798329225146058538660769659746373219280578608307065801979206749, 60672358951835789704908924536327269229608581722109307581332432233259563717309, 70488882148348465045675146058646614599668994423589427829886289191979266309117, 64185058633455168148710182741821325813221678857870192808147347568058420273539, 91724253020456850774223452039983162340908864012274266250017725349818456783109, 71618237842953542929146771617756902175854017308219041983516624045533290148671, 75197023276518530624655228580159958392853075363846419358432337879052466834339, 93456081017428039908487992063415745064639093391962404368815742573133865752437, 79035499415501060554217818757856129296904865755428035853024745565351157316251, 59805093199483411592634594659959433594218194158384486422971106353915012766411, 111919408600330285952702240192537220923756596627204818717634835189071000322683, 75262644644049693251845454083264477166054642560145713740591274195595930738857, 63107291444793410808481539494468138648438940305354720490618782409929413465861, 100744061032607556872054413723197117826172064576093844455427086156246778889609, 69944098927494206498383429919111314297649499702904660445522561403747921262421, 113346972396001245314933795479549184611487155362285473220811161155716839719327, 74218688380879993148756363091257639519963552776768614571709238172311300379603, 62830315819802766439595083912661717804465372324778782249424277268108619546433, 103264161057748215037613232072468966385010093608920012110892839613159235177147, 111745284062876886448826120017412504536248941666698326600263722937179667853781, 102714811226433002942383499624250583152662882905940125612155350448548464659233, 70611222487436709133983543636965319174743496572075436130858190029811590943047, 99496810066970068259786437030853049423281070820256977962618890794465017825307, 71897979109619597470537943896799947425548512082291096317243737612115174228909, 104187436607185844120347890155645701189598399837540491971438994225658781627931, 62626312997351703501975166956924773510053238259969168260649056012070009346129, 113589663301872140232122306385311526651909749000264118788303971823137568335927, 61024064022365023006890119146557953676560021212017134989942000718839066371191, 67026055890389695260806295983401484022484207056900797118789120807500773539953, 86815148471309876492491436734517739148151702571685443764968941852499867942769, 71271715405688825890556685001974607477934703744599035510306362314132173537477, 99601448482842965306181001731134137098858054201123395666516878215267767241199, 113333426140866487376554632761477764435792220853166221631449357955587299983789, 72828024963517400487779049720080074711403344159975411686009397463831059644137, 95860312447047952148765088986164717003567500104677736410327958593198109354407, 80253883455538900223099283453614543220661664473671073544320428968033889527471, 103875607752185714512846589096341482991367292949192208298733200829187258671351, 62561055349714801292067442755895194201721853024266377169040217309869576245841, 73521338255369954464887173385770028245451155962437070627520638378004981137099, 62515182894498950668092010345264549688065719192878104686749339401615027858943, 75835218084739868375808444485023469969077788504144911291940699066842732630177, 59459793441768929943273834094267805463472005475964506059806584926516896170787, 105671365703942819551817230317199973226465615061686381878212933469608213104791, 78371883059256395153567659973332888704799612827628137474389521102815015551753]
[2819156815559098608935907144572220067802239722477811081781526014230815206143508, 2445222963144912170178987069682029265091235658826949940106147055263923553533629, 1903920232368917874988192424627324450235235658985487184886880478410683087792453, 2813221616898999319078173561719808991996933181529211199247718014749471761929473, 2415317622707046015771404986131301659380189613747377882523905789358464245805261, 2348523668852265507160083343621769660315154058706123058500525154384194150702687, 2507695532453621805796926889796960598878592310480558358405686855827420862837893, 1907141158421921299837854094999465484306927424258825549221658114723429318131800, 2996584876130431493975535586331439098020486704416414144352617491038777966622026, 2841914974487872424057865893430216860909258234230655793947295714954938560858141, 2117193585089230557096034014862868497434663348391069775085361601423465450067018, 1618663543487567888006759147344706501846991096986990711044152446484281789092728, 2051102508394283286598498094689699993985391855870591140003037895002327443967078, 2669090149346309750541187701674005414846285203668431896934154038082184277619487, 2821099205382051817689533851435604893781741191048584470901901981584399503252461, 1865954045962192539436077393382831106338177626620667766785969091756695991376972, 2834906719283370643135074456045826212415690516444993198590544038983805430549716, 3058345091889641880414874285391801133784878450057729860963845535706661712766583, 2653042015966370288730193574681974757937960717309316465953319052871479994033878, 1788584754515047633120809432697937475480742012061242716418696450961540809452374, 2778277203488613589832969148165909575833274521043706044098629995730733708920929, 2224400384415239578333692162811620743296388325332026485724809120569740438120124, 1972940461789417047227766171894128324311970620153289908353435148885058189880133, 1939948360526548190060387013721468591297090070359598090670159708826556568545839, 2818991601490249808138281165356864885716943957945691816617065879361927463800526, 2413553262118714460433349452670472062344099074014288014307335920153767804918120, 2413408800394460311364369792044980960839523519084508082211467486837363000827481, 1758845426962602600761866862339677239161642023927162827960263751844389125896820, 3233495076000044704300506440819729106639319294573782017725443419307932794713315, 2708355596539216171690103715674029628340788100952569621670228934102283487612686, 1536652946359811468561318815856138090872457809794218679329504600452203252121629, 2327165482735512477249691747760690742878483734660461193688694660880638031420606, 2550687440844783131751933234767946237202902423067833745512891069590063347516760, 2481177146135062825829716208896765976351123371323909570126219611506346709136544, 2976906326202019421699257927192517202347665946583804579082838347322272835955292, 2909029092339889063676233410972251606598736781501969698497611221586863427582444, 1798168243495600724582836684300392122016253713231480820900737994151692535621603, 2664817016106873773717597564360502202007571267185845325419923202388752047491200, 2546620205597503490932601602466124914531025221973697650652600774749315385983563, 1804691119541549731083265041619037469167936079860917628791885523586484670389517, 2993720664170395904909588354135052455143402349099705390593820631482848174273290, 2824574876463230873723626432904311683584749415106379741312890350093471390708956, 2178703956912849180607179809502047743725546451796949709962564121093430758925487, 2015984983682985181359500837085489870066576772548483853603306753416391570995652, 2825886744264603050250570710182276613361768413096941638852875242334626590323394, 1842366850389524393863483299415974342118431714168940010525357278313698104545686, 1890692228347751845977588240213788310482016364994323180433181094057080388377341, 1859570245693698000930635066477255198791798456916690502550935397773277654892786, 2125075140724245092030270985636432641827993478574472770023332164359192925667914, 2676755446455257799105999866711022387760341685507440939934907661068577868325690, 2127492815150892523930677422663426899493881960036299948563967902858352278756381, 2214414669786315022585169610350112451053743209985881827547493375134440269841335, 3287270883919895663649415935008492686272583218112557495688303747999607127347485, 1464885862912061941360124921607846166739201296269644683550488862315316621168915, 2509523466354990323289405019390879993989971624147206461818727132356459058566874, 1908179787903012986073536362508511663101907793909103292522128933290356486740831, 2756805796292724316578649442951105668045760292153123880799123727624430139834784, 2535051048687395125596454929207466830174234064994395507994578679918815348311204, 1803956415800944523172461231393963076071547374162301111338088773341404180366095, 1581427673457587965377040867880744385708196297129034872673417280313414009367552, 2210767855216344078808268682929389681422344682528936968055695504737022629851880, 2550877767452648921597688620286108961639250879503878114842193772033576204495050, 2756447633884757327126748105695942994431200035562027053510977246623093748665864, 1964779505858686501383673184089092976925707496895287157463367011777877630214817, 1711601297301999862146389758002427112641271299995210895971794979535949846981662, 2603372280135481877885014637230736101699219758925563658302680157251609514729763, 2667368415669419620483366371882587489517753424105473575306644788864390049717122, 2375381791051675212713652990248979670250212118711539078479113604716354841854844, 2493019084337584580000577145137347950270131374601477024044058401572003131171703, 2510272034609038717473097414524000178497639528965708166872787898622112571433878, 3376645650205558777740641900007720202740974970958294476802138375965090427473755, 1675454950441201753341148918023526478031944115873936771857166782930709781514176, 2295573600228045311698664671032537593950444762263429917312199003345978643927531, 2989232564205545757256184449992766612296977264754661974992606639914166850018847, 1868488082029996620995659067458996737428518781510041614792233972151493754021593, 1892797289282204998558656233944707165344792878835655367911040680710800217026842, 2387274259011256581212632921041457702119262115024449666940614377355894562863869, 1983881332955491024985326286718581476273785076433829348701324483746422111982812, 2062767935119595318038310126927517801164698007835687279422680554697212705483997, 1813426760548272486587501966021027363576238607043680794995756040734812014712643, 1562722510157661651420650013368819014831598048375840600129656685790447905077365, 2503673291651808329507024991940471465924677096391781913465384267653316557369694, 3062166182385308323163803924577776096950506098179031933671983253622594360543831, 1587591727372004646650383007276778974486973795582795614543330273924194355879822, 2124191961778288686577724783613312141001752051971190691410871783736806888118043, 2807161639821718296747775878877393924108396927585322529661889069690379681631831, 2733246030913567509280676058184785395993901538144190159673188530100162954586757, 2095734027587628478963707980384021314089446286378559071426863977096549124105443, 2988941018164239592895981954356834130422828926400913046430556106893050888967261, 1808937486427315645718998608467510156824996634701840345775870478636993074414998, 2703685611351166699001869484070817849345096649407749301012107683124291961022814, 3102613448307372159580295514146090155031564221004892924292098653939442448602987, 2177101615271107571142318136385894289129856690017106068932561385040022673438923, 2937151057349964713327739484700778587301119004787857337542161351225777024384191, 3284853954926625174312940587880762860995369578650383285440565102632766263047228, 1445263692951995462669671350436071269459804664046732803232667890225299584565948, 3098676865357167767681695819580978584292551422560325551761761261030493576490054, 2785990764438332102573798945869163846058964169046667905446760842139596358710096, 2286672499975498339110837294171463889505598069964900735273552787076262216195906, 2391874898075608542385911568726340514438277750074914316438113074664500269203548, 2605723731444632182682979422507162229453344556769061654841867236618061760791325, 1704836746065631894082906921469595231141025078554131926066714879810005676323751, 2268547330405383390451485215576699310201492241110811312277295403794298328525318, 2257279690119315586453943222353936242022588071540577167031856674546385664274173, 2872612890312518257758936879530195946285789167890762413291543959195362374746469, 2782503101773215051391891616156069531578324959687740312811009067332251738718639, 2138140684559184701106744969820800303534456927075159680357462604985136618973448, 3095278460762504782170722834315395471811818415470674607477221955419939863412688, 1918147505022892323887450400533906049794530447772075631502966582700819074987318, 1707010156387988967567351309817287890962086105434244078370980148566691847226989, 2314881420429035304174113419210131391725806719440675908882594861083902503989894, 1747310534609110545360894267130302582086449810852064052514438793880321649681103, 3080886800074193535767113381895308001287890199225312650567732780605043357281585, 1703302394447278966593359250968585558627874162942204836180727596194447436704731, 2669959616748655909038072864148442141347343478193254233924937012286825458693418, 2678347981660125571899295349441122811861081559641451673761407195954761042620360, 2991379536309166201033224610863206913612841270474721698767515583673314564634450, 2523223616403538242735730838547058862626362247959528229773500469162355596137501, 2642334249408957788795981926934456200612035825182578292078882855617370677855476, 1569264447503315408491941272069637567187075617506995254256292388264423968802988, 2882151918273286344356356582994818011404936455027402382189340156913800330427975, 2158967947928376114000914445674913628201764160381348927457320635619197102958046, 2051737874569931765249515775461268812640666956809870235551742670881277489362727, 1763323742103061035663123542430905313899541445815905288785170098209590602129239, 2713986379520959678928522767197552952345350348987283755564726696384571034845768, 2537378599555526856829858853624086645778822512223537633689220391093349190349778, 1559241246373570128428798700624771661010342250781098062213106558536948558050766, 2279150628340411933639371451926359538099865357708465543071800823000587477815011, 2898997193141068749321572525457620525323957690056983345387036999017795349699409, 2522226015585642028656627937913370376228450166094635794231237529375655653354731, 1976905875820155215040299709744110576065821433679615259775310771962543694656698, 3146904959601041464677308813467361006584585805682305551431275878689319837940924, 2693972707687221507896250578017189021477213697938899249523534331595305491495324, 1624327598106729094885115301581437685380703813627081789404977021142280698320107, 1953514564966249010069920346168045652870850335033365089388414276370477434371002, 1626888973038960042489813971944630122654048243552668114260339025510208408311822, 1691170441751836250949367136389943978609695857804909953940716207113664903533044, 2872352457635317352383489529000387930132790666173838033868080090425309904205463, 2863893510770920872155566640788223513715980556898590207492297802804734220666273, 1664325124883579998946067059421408604232610753151100601467802141679596987515744, 3241231581569478941168907165945341550977831562153048119560311010399685701948601, 1361807005173976916825978829400623371016110290335271142789044365351489158265785, 1406627349406527471168668282696809465701018718681981074249372097245594123964851, 1971525597164878946966277125289812240116013457995908459722202952295120967951958, 2786911678726247421699703800762265831545443241798747206478605511107149362330097, 2439508492564866839705294296041842112712325553837677868579211795105087869136093, 2059191048467669923967691687228577391906624742849738642011719916045439079304823, 1570106312941323008471547510823923094983111141481917147880596218618909287869316, 2122987705390617331128483361876664852958813888207310728315947431193637092615610, 2801489830287263060085120056123289367371498556308329538059159707855810575200325, 2603504643744222599357535179213179516289477923306029799301160287585889511538186, 1579559950022451616002666575318998221718261186164798108063013638204271323515426, 2946959687392272154774154223307645704738122794108855599681623985844195753004336, 1692770221755889837201538695387588277166659470005431078018491728102054788606405, 2659449088987888852195471961116502165033707350474142851843714185859896260654058, 3505646321172760059446810399769341926141272269356767693575285534015133195241233, 2530481419181774953758830811170792749065265404043551952628317101074384012856365, 2712291448546463050414385318858256938602633632117389382231541762951484136569160, 2771788380581020235551999360102117509781311204513808674596945948863545438935552, 1955826919431026980944761018180907821649592615023066213634119373120418173949204, 2233584311947835760483846096048038712598649182856770677618031551939193923070629, 3394595068511229452615822692260046682896960654048194476745024879264499379417364, 2712573898841928347986369197314358548875252769951810734215760791710091814581815, 1748981602423073911431838108063086650192315739500168302252222265177547421664563, 2918701578242467135076226389338480065735119480562687109522929797564227072493184, 2164542802657835484124827216032688263572786614573372525249065148400873809020470, 1135304887972847560145538866404958097776596359071002711002875129077851779982891, 2205584540603634087173783390627256443719846063793628767797341432227402910992158, 2690352932777477095639383802001157556275154650146494280789592444767406723210088, 2303944374984763927616623281091903699148030217974972202655946341959198480366990, 1826879964307133264320563754533689815425723980821932135389272772715666899003374, 2411535830583065044709148037012533536301300387611929837028371177053977732254183, 3102248701716368945194959238072315916896617832833372561718927136392499451559578, 2659059708824611624428432407423533442925665544505963263289772494964288235307875, 2122091574300829544940359499145373746146266675687307129711907050808965471122010, 1700916444187293837558906660368523799466101955714678788331652720755325956184538, 2567718060732115690755878753641406930783934887601526519050886636729753186426791, 1952081132214229966862614041338565988918704651475436080348360529823670476859620, 1660215762591901715725992379790262398087569715838733505603236713521769589358820, 1719279125595280317066033690110562638515279430979107832569413806636508635211996, 3150257746796819704620980918552950504464974368953784237516693028734092071089047, 1533483464980797817093734747462583125027126533889191512411074224355529845622071, 2488961034310705334758521978741509630299502434569628208806014299768156795682257, 1949296862369855738672364903506625258331673226248095354317656816116053344797835, 3314180997278886324171475580120649860821510669127198863042562159001687994942122, 1835912431730828052486567697931843664151353173587570710495449691984382497927315, 2490573473773652707889662396932059726458725983603386101684045752109912066544351, 2034391449976822309453187815141830984379516892947671482205865823880790979367955, 2904021828859719234045989645729651328223671397095849600652399072239977584752185, 2898092590337486358630458611863555173232553156056707848156576249041471235470768, 3020050896501407718070202328514173978695297814931297739049640810470505425773745, 1162913829573891584933621423487787462781528876246539914934653605693493109367743, 2411509537509594942434869563398255803405247485496687541554728239521209563719728, 3240460093945381326170175021314548622274008446302186694162254988437882522956789, 2042576958259566656441090421986717161687799145769915833228519921746477531448760, 2553411758242921025239995694953337401215433895789864555503864382953439429213802, 2820514264957484223884788232888402572082052875947845405781652420449215392785603, 2641370591795997642215472507781953866796675755685964449326951672513035331652719, 2823035270072193806363721364627815545328685374442891399776824815269510767922152, 1989373778720753497822506435334497629024665265080539577357802530369873476548739, 1862386424241098951111754027338499846132635633222316642962968740112589660520830, 2976767130013568871382359613949325813684341929036309541118080812240632837951917, 2032079799183763407608429385442348826534633217836159747315522261005324747502541, 2708285103915655469463038547427063010568545575090977468837676375353975489314033, 1763806042471114758817803518721264989399707893537069108192481105750144308762714, 1937326669619940914067700437225091575824756751300418686192482170396808556973038, 2435703549632943593049899499355898299013949956078689678733600487087852297494155, 1564269996471702815616616340843697420448380748563779822431189073561802077443811, 2456980081971515876372636881680154805873081926372199873790185654198943312487861, 2114228222599900470093715633907929439859036580370529231708091911394217318192346, 2412504259980354806049559188591922758532822094151137644379211660889448844429578, 2635073202673673572264139459896284480350454830352313451411706615748140392229736, 2725320685400498493268546434049721871475577064325227566368156917361595597089351, 3037867883571431356133279924916838430904119854900038874159214526715272191199734, 2824971163661740859800864424701755168512099695296428827528594616947609789856313, 1719312755020161540743541987056216628179475180251054784014251838005404915359190, 3012080368518302834546286001958441602695677482755944367912995252821821409322630, 2595410720707289052259292382365869693173486839668185767458178220761996549540776, 1730386135469589080821808335571789810133070354002257675548380927002483585203525, 2183488429559972081266293580805381776596408303103494625441288200546469064198052, 1586663745637750938560919751995751853774793809756290411350824056092900626767581, 2633560016633693373820917408699356704371120444974417409768038767304741258416882, 1588266791029338678483285861004896440056893325470901832575017393368494381844313, 2062140763508547310649316830659374267702516490495399524838782204228464817557303, 2210631662045486660045329182773925615869393461089725622733280699922614662573188, 2459357704199420786919294385229487410232263583838342283632925369162881135458784, 2613643032209168797222243130152765007369922353402246208144392804402308111491213, 1710948753142088971871638997633063611816787381413888582644218262719506545790814, 2370888885585089451526475579030868634013098608165933127887831074072488486211027, 1874802131193521153356429186932124966125006368474096875577533362925609490873675, 2257490811907741146287835975463592107772672753660997437720973452168570067018183, 2027396376118176181554556587461857799175262388659116515495331190904871780900168, 2629203400695349534340609904454384114924188013467883308551455289883598277506576, 2890142848965203803657678020364632618710915881162439911156088498054480848444284, 2219081521671625674270988735444011710759687035389885997488568461190702712665391, 2380376764714634310626713438415734647767006799419143228948264493667246616324693, 2814638103849795047350222194926779177051843856327710877892295181020329663696490, 2047838076416771508199337081863868486021562878681029339974246205098649513457324, 1784932180402383121530422581359653305472252436816341976330551492781428029261514, 1941527319325036462639722135771653972446143884927214478817515634545849137431669, 2907563421094345848181477200768863573314924396229466732653561249857033838608028, 3000337261597585046467954498628106745718605542524330400603607525806097908557040, 2786351435794517058372407045515681838202163268432832568806234013222378647734555, 1836092084933347325356728587763659299616726483980078801819666587432774417206073, 1574796707547605480163763402663498447991988000366600032231056878314794495735406, 2353612553114861608109605098910218987289338082728729053511317177449593301899294, 2248699009001439455571494271407476531250809026878799237531708891383695128771122, 2417476639863872938259290255198814812522944882305274702168279778861529389946164, 2971783285485191513675004761256201878142447913010923130203347305001342064598990, 2142943014519370915558067112669312116295755777127417301618377823907694765946338, 2661527100047693021718564373867938790031132276013799786506265512546563727003637, 2789161914059543582404778858005723463894421641256844424769515176678453044603337, 3040014096172959690905204596262839182154829748346494437618210463868135852399494, 2635917392114338296279286936931727170162216403550460752678274156631579609014634, 2739029817120645069226715038276509821027853672448467093767065178330079288792182, 1484738110125237820910555901588888998435780560979615982696803082959376104709161, 2372999157870072620027636129336264510265625974962517451119668258432432453459291, 2455687222461827602660206191412397063350581337238480459622011027481646403606246, 1876432865628323024983726722907298656929294958135555012103492960934104600220219, 1307841776873030596697898086313556358231717270837313632583014388160388520957206, 1930461711710915408769618026875738822780815121368520129692337068401427296313373, 3325280034101518748159577481976984799447956248994089550885201924665697013425938, 2141730641878301259755102172773233369139906794041664225968362000101121750584861, 1375656209370479485060378259057252116555118144818855052445166926233837043706214, 2977769163020142792135228863060463623818385890145164352689707153311169566103001, 2002834314014321054187636141249638087852858776899333125132657509142700920915899, 2851322935231676704267708179361053286697597203152531856687447152874802460360864, 2992147055296731103287336167512602309601875655087942903948613982271058288601610, 1726152188820994697022282207330085869001951550140404285145456533691648598100569, 1888604908855715245619198652572645357831264155960901438791523139267142437922964, 2352448954998759084316420067380678866770050286925503771493227478020356378487607, 2048308642686539346926409497753971725904482476842642143130646956853793335448162, 2501794434297131030946196089001233568215948580707283625912119735439908255378216, 1903581457860725006292290733111833468722059955064722300000621986075260984730890, 3091137366193643814130757614246951323703457976373978819948176036606067628695033, 2320974233653240015647239860333344772512164840786841438935137525814103134556389, 2685814581994945080754008326997111441187184408176728102326696887317673828436881, 2000735932503291577967925242471844116928558854574240520790749980890194978580328, 2420029456477865293042005101867311660978152293635853664008446797812937597305509, 2129555161426105317333875952515114347501476208979636012506937915200909157703983, 2582947141522611573263255922392440642592155092034175475551805098992649126512502, 2007387202205259405202080331409071622936010454228446167685562218123845168427194, 1555346362119608126365015153381797593304002606210833679794143799398649488008709, 2627310074157008615051031552873690677995763263775766597112117219178356232254138, 2614870511241382676735961019792996302007146563530003061044256637662310198888354, 1835517951630184004031358550557037074114640173264557591588255546633305636557964, 2191360283419900545159044662092406127521650045451596375234153785353085173024074, 1633587445499810699103350031108401299972286118612069333913054471891868634481981, 2244506220430518115591858883493205895321869570070556445420237854928896037980916, 1701933270297668456594030101250077900332487913784571880972700238355040675454480, 2073349787428363296079890283770992319911798913918743690389931150271611080940175, 2554199147351498854198124357914578384080971977075570829246726644622890103967478, 2869859353109108769884032621260179038333321889811803968916073817470951304600426, 2163535859846850182293040680340377227423216011265031881108965948829531859829146, 2127374883010589876012860539719535092731861273867713812127079127126859754504360, 1938864159337265849599773369625058562249980220372090673684508081397701999600056, 2757117073936544413482459237210873364734485018520440516659943461070434895539784, 2173928418091053227417706702891687012126191118333695997916756600408543226601665, 1231466375392538328694612130964071690021805034621412520944511481512279507297777, 2349648477640756485993251301906725341047132183382215279465438497793389660839109, 3099111297578477135779886526345743640311475435758824993734579420700333420488649, 1690664359964097576800556030074459924192324269317618913545738475596847587203311, 2054265318601641370989870371763207271922774837760458400854115401387162521953106, 1455042222594995300357946948940506176079473202745755539315170165422919837214987, 2737703901230648620119729675184516215498340228498747075833558529322741550448515, 1847489593766622016816587362489572976735325020357364005648973154291576153981323, 2920110538280520314747827961178189014514998204549518095761788407950255153847540, 2958268500396601269761423235959825847393704227293222157799335793319669060622825, 2345985542180934042839128223629154919627988311400089812717130377891745822434700, 2241014203060338070745691577758044738147586031133732693491353306115564095153519, 2870347637439131502185386213581689360274632975558359807782293631067782158330598, 1852634989733999093426874218169458195422557079581034231098762933704435006044887, 1862388256084067824430383892323053894335290341611286789184625594484340897283766, 2840894927901654909141739161619191856732681195736147467945179479863663606830039, 2402361678063385966682160132501003561188266731404508880379614200749592715079467, 1909915635563467518852047815113709884418039180699302428128451374644140267941130, 1658926823813195282852604374649678095399363082284848840092112243331543914063209, 3246219477051766010472120322020803795950363636590298249520227420314197051320180, 1917533171125817291632511547114825642767636167947706046118285318907308481349834, 1732529573776954215396883824592109278461465616296113719187362257221124050421297, 2814263652577009321513917897615787457764472311899563306422689175146400874504093, 2324993916740169682393708336019975558244948129067453744986371404324519261398643, 1503532043620487999925454219611892452064871526670005017321304231576559050996563, 1699050200327606267818057665406833317372501004260777756764072516881987595376191, 1472586941034140862204493262409660776093862810910579498650970236100393355808389, 2029713505933905447328187739983632511774919013593902578922419593584096403736957, 3225171083287582817199300358232903389164407358944150878502408641001476881116329, 2002739705085819696773726906427925703939222313302954137977322923239129980777347, 2977185366949025183951676661737118397967970692854945619333644262933483104988303, 2947173195366661114129705192992773919565837049152232827162046911232264006182254, 1754887252759358888503156014386972306424663301077620313505515454966154084372388, 1907405965907142420721338795834817757376940109196779186347981266665613826233212, 2015330364408646879738783215328681821738282240814572865785393505480211039640066, 2727893473289569333590201710166502128438404920873958155705550313677854946255891, 2285909249720592854317361245045521549583079701492605951982463479972983290870664, 1845999854724343976570027772639141428826241063271141835304228421100708367103569, 2363672791141786231097409217383362655763662840519306763732391294439966071060443, 2806936541429868513549845833892240163395528940507540978740415968116778710515102, 2697219364136050209859748029002897741198163283378001317797626490633055309788843, 2247184701442480681779249398438744369415499975031480815364948207694623966199387, 3231086019038147296220763915450735650568111238173220866389065299438632440751237, 1832276392976999556129354128814768583897218865356710089662798671135934832729329, 1917342661910522861149489645623396859753824081005762371765834098322307654497381, 1568017253990396537784321601698015449451817832281251660296025502053520561811812, 2941616922582905030134617392243899143088159369106475594003645096550740211691295, 2683368351117012950411179150631678778651588063084420106900764888746387687168222, 1778420058969534218383812868489034592227993121385588230014110347522765607535946, 1923764582860656292136186495617159929691221984386016458167256338158112818097098, 2656631653745695250048441951987799766681703378345466605375664608750138267094490, 1691142612544234157420807122078777197042131796182931240632840532974741207366554, 2507486372683720823405119393792056270780488181696931417677286972451364222324898, 2447484598394060182059875442220084043147995607049408859564736403691102277754703, 2595545091473159386760353940687413026143395465208155790570429164011691489970522, 2202408778718364092229680334582879965674953387559013630876726207304442759100950, 1434044264080765552621476110745390069274931289997241169288539930228352180841157, 1730963110434177443493191358945360130890936890712807539961534419929496768666853, 1814514698770987074692007368337406747271432147111293957177097586796743335366864, 2019810504329770248199484256164192365539847161241402784488318370955221358775583, 1956536334521214519139005513274352058427551797660335556789649011126122469394621, 1694989916853171959536869648489026282016518865526156952107205253569208427588802, 1770954866648012756428357246696467696128773908163230225537396522364937343241454, 2802996166579840936213980653413335387241497268210450195945009691876958816391301, 2644513999224447293556676912891272387168542381412380571251701553565002974065160, 2463113107479271232731543030008511295698209596496337911158126811719994524730804, 1334261391981801071990435527914252759589346447377833542541150596820934615355804, 2279003943573323534404267206493585478080811684601838324835345540797019580209881, 2120333317125642116907729078091221616419400615377299883141448350668604241449740, 1756076625856166082841036230119144332034421616895963015504269044505034917059399, 2207615431411605687205294013132826939107597873984017330939473488301182073661283, 3402307618965454186510075915629520371557316035524100232971772642879541133866581, 2257357821930382005896155137026800185487154395207884048113343615729127921819640, 1551825494936649699327478596078225912177508474254549041414169792254557027355217, 1365732972487952087912201569843410874792402112231916794732119488395781020203311, 1807495973197443225501042200464935032992636693133827521190080032536875399246452, 3066548428950611112157801870665061157137219961909600957576183226324708978020683, 1827692464083287200286079376258081926585195439691129818155557308275829855008347, 2177950758759980504779021451412567471817907630921840590750050627364220415245388, 2500408490068677256675931862459954402673338550184480122429756334963949542806122, 2134138149727797607166351547030249872845232722149691714081305131457344525454827, 2332811982231893523373224098520580507465485470638866226523073135090091836623660, 2230040524682264142564447094948233324847290581046122443235354731861026477584174, 2331535816974572878114135820359512753886735587931098018590107412165934055193524, 2865092118462007871887135714513386199315743927247622435497167687480635403743332]
</code></pre></div></div>

<p>The encryption script converts the flag into bits, and depending on whether the bit is 1 or 0, generates sums of different numbers.
To get the flag, we must somehow differentiate between the two types of sums.</p>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>The encryption script defines a list of 64 prime numbers in the list <code class="language-plaintext highlighter-rouge">Primes</code>. If the flag bit is 1, then the sum is calculated using these primes like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">getPrimeSum</span><span class="p">(</span><span class="n">Primes</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">Primes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<p>The sum will consist of around half of the primes at random. This is a low density subset problem. Given the primes, and the result <code class="language-plaintext highlighter-rouge">res</code>, we can find out exactly which primes were used in the sum. To do this, we can utilize the CJLOSS solver from https://github.com/hyunsikjeong/LLL/tree/master/low-density-attack. The solver will find the list of random bits $b \in{0,1}$ and subsequently the prime numbers used in the sum. If the solver is not able to recover the list of bits, then <code class="language-plaintext highlighter-rouge">res</code> was generated with random bits instead of <code class="language-plaintext highlighter-rouge">Primes</code>.</p>

<p>So, by iterating over every element in the list <code class="language-plaintext highlighter-rouge">out</code>, we can attempt to solve the low density subset problem and determine whether the bit was 0 or 1, thus recovering the flag!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bitstring</span> <span class="o">=</span> <span class="s">""</span>

<span class="k">for</span> <span class="n">T</span> <span class="ow">in</span> <span class="n">output</span><span class="p">:</span>
    <span class="n">attack</span> <span class="o">=</span> <span class="n">CJLOSSAttack</span><span class="p">(</span><span class="n">primes</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
    <span class="n">subset</span> <span class="o">=</span> <span class="n">attack</span><span class="p">.</span><span class="n">solve</span><span class="p">()</span>               <span class="c1"># returns None or a list
</span>
    <span class="n">bitstring</span> <span class="o">+=</span> <span class="s">"1"</span> <span class="k">if</span> <span class="n">subset</span> <span class="k">else</span> <span class="s">"0"</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Iteration </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">bitstring</span><span class="p">)</span><span class="si">}</span><span class="s"> / </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="n">bitstring</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>And we get our flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ictf{dec1d3_my_fl4g_4nd_m9_b1ts_by_LLL_3ac4ed91}
</code></pre></div></div>

<h5 id="solvepy">Solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HighDensityException</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="c1"># https://github.com/hyunsikjeong/LLL/tree/master/low-density-attack
</span><span class="k">class</span> <span class="nc">CJLOSSAttack</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="n">target_sum</span><span class="p">,</span> <span class="n">try_on_high_density</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">array</span> <span class="o">=</span> <span class="n">array</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">array</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">target_sum</span> <span class="o">=</span> <span class="n">target_sum</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">density</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_calc_density</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">try_on_high_density</span> <span class="o">=</span> <span class="n">try_on_high_density</span>

    <span class="k">def</span> <span class="nf">_calc_density</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">/</span> <span class="n">log</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">array</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_check_ans</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ans</span><span class="p">):</span>
        <span class="n">calc_sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">array</span><span class="p">,</span> <span class="n">ans</span><span class="p">)))</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">target_sum</span> <span class="o">==</span> <span class="n">calc_sum</span>

    <span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">density</span> <span class="o">&gt;=</span> <span class="mf">0.9408</span> <span class="ow">and</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">try_on_high_density</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">HighDensityException</span><span class="p">()</span>

        <span class="c1"># 1. Initialize Lattice
</span>        <span class="n">L</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">ZZ</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">N</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">^</span> <span class="mf">0.5</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">N</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="k">elif</span> <span class="n">j</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">N</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">target_sum</span>
                <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
                <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1"># 2. LLL!
</span>        <span class="n">B</span> <span class="o">=</span> <span class="n">L</span><span class="p">.</span><span class="n">LLL</span><span class="p">()</span>

        <span class="c1"># 3. Find answer
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">v</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">][:</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">]):</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="p">[</span> <span class="p">(</span><span class="o">-</span><span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">)]</span>
                <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_check_ans</span><span class="p">(</span><span class="n">ans</span><span class="p">):</span>
                    <span class="k">return</span> <span class="n">ans</span>

        <span class="c1"># Failed to find answer
</span>        <span class="k">return</span> <span class="bp">None</span>

<span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">72631919237287927717402325207066133372227433253296739177918376436148037178709</span><span class="p">,</span> <span class="mi">113353610291242016590065192873217709952603000986249688822443880798128343484243</span><span class="p">,</span> <span class="mi">61233066689578933084047067233486334593864627770848707460125612953653435525433</span><span class="p">,</span> <span class="mi">77978495575166025609783168685853318929929985120608382285997233070243753385193</span><span class="p">,</span> <span class="mi">80417172361794527546157297403719656639313353810617700273168888986350803004203</span><span class="p">,</span> <span class="mi">93800524062346599265231876057535203946903026875666516269890416900099617168269</span><span class="p">,</span> <span class="mi">97119169071341082676466697825381644482201126912248293435182129435216726548277</span><span class="p">,</span> <span class="mi">90832133440133156989159367279306176825998079966947793083692222518066327714289</span><span class="p">,</span> <span class="mi">111156153696251933778615089796986226303676502808517311473776412932401230476889</span><span class="p">,</span> <span class="mi">96876329906549730024451384329729713704506332533562500650498800553860101511563</span><span class="p">,</span> <span class="mi">86286584634698122955683719925475582532115192185246692159668723874434524279659</span><span class="p">,</span> <span class="mi">65903466048748173224590166091273334517945429553166084561141664315404238203907</span><span class="p">,</span> <span class="mi">80257644525014402296950785012990048502725806405293146360109821535239650852907</span><span class="p">,</span> <span class="mi">58373867077613198457078300893876782065732447821855506855323213372595523275789</span><span class="p">,</span> <span class="mi">70307897209099281479027830823136514151063615523489003132414884551468231257349</span><span class="p">,</span> <span class="mi">111433863257040047657057024064485609580701784312490549902307306283243603655901</span><span class="p">,</span> <span class="mi">88549800795939126019069388048803588676552691797977376332734685232332072164611</span><span class="p">,</span> <span class="mi">86476382757716587211956370701024351863110631836242977802213434730486621965127</span><span class="p">,</span> <span class="mi">82148112346979254967951647310613710507093341929507534256164313491746002586951</span><span class="p">,</span> <span class="mi">106206517690710852498098306083737354679143918661360147773439327973136200544311</span><span class="p">,</span> <span class="mi">68502501866658798329225146058538660769659746373219280578608307065801979206749</span><span class="p">,</span> <span class="mi">60672358951835789704908924536327269229608581722109307581332432233259563717309</span><span class="p">,</span> <span class="mi">70488882148348465045675146058646614599668994423589427829886289191979266309117</span><span class="p">,</span> <span class="mi">64185058633455168148710182741821325813221678857870192808147347568058420273539</span><span class="p">,</span> <span class="mi">91724253020456850774223452039983162340908864012274266250017725349818456783109</span><span class="p">,</span> <span class="mi">71618237842953542929146771617756902175854017308219041983516624045533290148671</span><span class="p">,</span> <span class="mi">75197023276518530624655228580159958392853075363846419358432337879052466834339</span><span class="p">,</span> <span class="mi">93456081017428039908487992063415745064639093391962404368815742573133865752437</span><span class="p">,</span> <span class="mi">79035499415501060554217818757856129296904865755428035853024745565351157316251</span><span class="p">,</span> <span class="mi">59805093199483411592634594659959433594218194158384486422971106353915012766411</span><span class="p">,</span> <span class="mi">111919408600330285952702240192537220923756596627204818717634835189071000322683</span><span class="p">,</span> <span class="mi">75262644644049693251845454083264477166054642560145713740591274195595930738857</span><span class="p">,</span> <span class="mi">63107291444793410808481539494468138648438940305354720490618782409929413465861</span><span class="p">,</span> <span class="mi">100744061032607556872054413723197117826172064576093844455427086156246778889609</span><span class="p">,</span> <span class="mi">69944098927494206498383429919111314297649499702904660445522561403747921262421</span><span class="p">,</span> <span class="mi">113346972396001245314933795479549184611487155362285473220811161155716839719327</span><span class="p">,</span> <span class="mi">74218688380879993148756363091257639519963552776768614571709238172311300379603</span><span class="p">,</span> <span class="mi">62830315819802766439595083912661717804465372324778782249424277268108619546433</span><span class="p">,</span> <span class="mi">103264161057748215037613232072468966385010093608920012110892839613159235177147</span><span class="p">,</span> <span class="mi">111745284062876886448826120017412504536248941666698326600263722937179667853781</span><span class="p">,</span> <span class="mi">102714811226433002942383499624250583152662882905940125612155350448548464659233</span><span class="p">,</span> <span class="mi">70611222487436709133983543636965319174743496572075436130858190029811590943047</span><span class="p">,</span> <span class="mi">99496810066970068259786437030853049423281070820256977962618890794465017825307</span><span class="p">,</span> <span class="mi">71897979109619597470537943896799947425548512082291096317243737612115174228909</span><span class="p">,</span> <span class="mi">104187436607185844120347890155645701189598399837540491971438994225658781627931</span><span class="p">,</span> <span class="mi">62626312997351703501975166956924773510053238259969168260649056012070009346129</span><span class="p">,</span> <span class="mi">113589663301872140232122306385311526651909749000264118788303971823137568335927</span><span class="p">,</span> <span class="mi">61024064022365023006890119146557953676560021212017134989942000718839066371191</span><span class="p">,</span> <span class="mi">67026055890389695260806295983401484022484207056900797118789120807500773539953</span><span class="p">,</span> <span class="mi">86815148471309876492491436734517739148151702571685443764968941852499867942769</span><span class="p">,</span> <span class="mi">71271715405688825890556685001974607477934703744599035510306362314132173537477</span><span class="p">,</span> <span class="mi">99601448482842965306181001731134137098858054201123395666516878215267767241199</span><span class="p">,</span> <span class="mi">113333426140866487376554632761477764435792220853166221631449357955587299983789</span><span class="p">,</span> <span class="mi">72828024963517400487779049720080074711403344159975411686009397463831059644137</span><span class="p">,</span> <span class="mi">95860312447047952148765088986164717003567500104677736410327958593198109354407</span><span class="p">,</span> <span class="mi">80253883455538900223099283453614543220661664473671073544320428968033889527471</span><span class="p">,</span> <span class="mi">103875607752185714512846589096341482991367292949192208298733200829187258671351</span><span class="p">,</span> <span class="mi">62561055349714801292067442755895194201721853024266377169040217309869576245841</span><span class="p">,</span> <span class="mi">73521338255369954464887173385770028245451155962437070627520638378004981137099</span><span class="p">,</span> <span class="mi">62515182894498950668092010345264549688065719192878104686749339401615027858943</span><span class="p">,</span> <span class="mi">75835218084739868375808444485023469969077788504144911291940699066842732630177</span><span class="p">,</span> <span class="mi">59459793441768929943273834094267805463472005475964506059806584926516896170787</span><span class="p">,</span> <span class="mi">105671365703942819551817230317199973226465615061686381878212933469608213104791</span><span class="p">,</span> <span class="mi">78371883059256395153567659973332888704799612827628137474389521102815015551753</span><span class="p">]</span>
<span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2819156815559098608935907144572220067802239722477811081781526014230815206143508</span><span class="p">,</span> <span class="mi">2445222963144912170178987069682029265091235658826949940106147055263923553533629</span><span class="p">,</span> <span class="mi">1903920232368917874988192424627324450235235658985487184886880478410683087792453</span><span class="p">,</span> <span class="mi">2813221616898999319078173561719808991996933181529211199247718014749471761929473</span><span class="p">,</span> <span class="mi">2415317622707046015771404986131301659380189613747377882523905789358464245805261</span><span class="p">,</span> <span class="mi">2348523668852265507160083343621769660315154058706123058500525154384194150702687</span><span class="p">,</span> <span class="mi">2507695532453621805796926889796960598878592310480558358405686855827420862837893</span><span class="p">,</span> <span class="mi">1907141158421921299837854094999465484306927424258825549221658114723429318131800</span><span class="p">,</span> <span class="mi">2996584876130431493975535586331439098020486704416414144352617491038777966622026</span><span class="p">,</span> <span class="mi">2841914974487872424057865893430216860909258234230655793947295714954938560858141</span><span class="p">,</span> <span class="mi">2117193585089230557096034014862868497434663348391069775085361601423465450067018</span><span class="p">,</span> <span class="mi">1618663543487567888006759147344706501846991096986990711044152446484281789092728</span><span class="p">,</span> <span class="mi">2051102508394283286598498094689699993985391855870591140003037895002327443967078</span><span class="p">,</span> <span class="mi">2669090149346309750541187701674005414846285203668431896934154038082184277619487</span><span class="p">,</span> <span class="mi">2821099205382051817689533851435604893781741191048584470901901981584399503252461</span><span class="p">,</span> <span class="mi">1865954045962192539436077393382831106338177626620667766785969091756695991376972</span><span class="p">,</span> <span class="mi">2834906719283370643135074456045826212415690516444993198590544038983805430549716</span><span class="p">,</span> <span class="mi">3058345091889641880414874285391801133784878450057729860963845535706661712766583</span><span class="p">,</span> <span class="mi">2653042015966370288730193574681974757937960717309316465953319052871479994033878</span><span class="p">,</span> <span class="mi">1788584754515047633120809432697937475480742012061242716418696450961540809452374</span><span class="p">,</span> <span class="mi">2778277203488613589832969148165909575833274521043706044098629995730733708920929</span><span class="p">,</span> <span class="mi">2224400384415239578333692162811620743296388325332026485724809120569740438120124</span><span class="p">,</span> <span class="mi">1972940461789417047227766171894128324311970620153289908353435148885058189880133</span><span class="p">,</span> <span class="mi">1939948360526548190060387013721468591297090070359598090670159708826556568545839</span><span class="p">,</span> <span class="mi">2818991601490249808138281165356864885716943957945691816617065879361927463800526</span><span class="p">,</span> <span class="mi">2413553262118714460433349452670472062344099074014288014307335920153767804918120</span><span class="p">,</span> <span class="mi">2413408800394460311364369792044980960839523519084508082211467486837363000827481</span><span class="p">,</span> <span class="mi">1758845426962602600761866862339677239161642023927162827960263751844389125896820</span><span class="p">,</span> <span class="mi">3233495076000044704300506440819729106639319294573782017725443419307932794713315</span><span class="p">,</span> <span class="mi">2708355596539216171690103715674029628340788100952569621670228934102283487612686</span><span class="p">,</span> <span class="mi">1536652946359811468561318815856138090872457809794218679329504600452203252121629</span><span class="p">,</span> <span class="mi">2327165482735512477249691747760690742878483734660461193688694660880638031420606</span><span class="p">,</span> <span class="mi">2550687440844783131751933234767946237202902423067833745512891069590063347516760</span><span class="p">,</span> <span class="mi">2481177146135062825829716208896765976351123371323909570126219611506346709136544</span><span class="p">,</span> <span class="mi">2976906326202019421699257927192517202347665946583804579082838347322272835955292</span><span class="p">,</span> <span class="mi">2909029092339889063676233410972251606598736781501969698497611221586863427582444</span><span class="p">,</span> <span class="mi">1798168243495600724582836684300392122016253713231480820900737994151692535621603</span><span class="p">,</span> <span class="mi">2664817016106873773717597564360502202007571267185845325419923202388752047491200</span><span class="p">,</span> <span class="mi">2546620205597503490932601602466124914531025221973697650652600774749315385983563</span><span class="p">,</span> <span class="mi">1804691119541549731083265041619037469167936079860917628791885523586484670389517</span><span class="p">,</span> <span class="mi">2993720664170395904909588354135052455143402349099705390593820631482848174273290</span><span class="p">,</span> <span class="mi">2824574876463230873723626432904311683584749415106379741312890350093471390708956</span><span class="p">,</span> <span class="mi">2178703956912849180607179809502047743725546451796949709962564121093430758925487</span><span class="p">,</span> <span class="mi">2015984983682985181359500837085489870066576772548483853603306753416391570995652</span><span class="p">,</span> <span class="mi">2825886744264603050250570710182276613361768413096941638852875242334626590323394</span><span class="p">,</span> <span class="mi">1842366850389524393863483299415974342118431714168940010525357278313698104545686</span><span class="p">,</span> <span class="mi">1890692228347751845977588240213788310482016364994323180433181094057080388377341</span><span class="p">,</span> <span class="mi">1859570245693698000930635066477255198791798456916690502550935397773277654892786</span><span class="p">,</span> <span class="mi">2125075140724245092030270985636432641827993478574472770023332164359192925667914</span><span class="p">,</span> <span class="mi">2676755446455257799105999866711022387760341685507440939934907661068577868325690</span><span class="p">,</span> <span class="mi">2127492815150892523930677422663426899493881960036299948563967902858352278756381</span><span class="p">,</span> <span class="mi">2214414669786315022585169610350112451053743209985881827547493375134440269841335</span><span class="p">,</span> <span class="mi">3287270883919895663649415935008492686272583218112557495688303747999607127347485</span><span class="p">,</span> <span class="mi">1464885862912061941360124921607846166739201296269644683550488862315316621168915</span><span class="p">,</span> <span class="mi">2509523466354990323289405019390879993989971624147206461818727132356459058566874</span><span class="p">,</span> <span class="mi">1908179787903012986073536362508511663101907793909103292522128933290356486740831</span><span class="p">,</span> <span class="mi">2756805796292724316578649442951105668045760292153123880799123727624430139834784</span><span class="p">,</span> <span class="mi">2535051048687395125596454929207466830174234064994395507994578679918815348311204</span><span class="p">,</span> <span class="mi">1803956415800944523172461231393963076071547374162301111338088773341404180366095</span><span class="p">,</span> <span class="mi">1581427673457587965377040867880744385708196297129034872673417280313414009367552</span><span class="p">,</span> <span class="mi">2210767855216344078808268682929389681422344682528936968055695504737022629851880</span><span class="p">,</span> <span class="mi">2550877767452648921597688620286108961639250879503878114842193772033576204495050</span><span class="p">,</span> <span class="mi">2756447633884757327126748105695942994431200035562027053510977246623093748665864</span><span class="p">,</span> <span class="mi">1964779505858686501383673184089092976925707496895287157463367011777877630214817</span><span class="p">,</span> <span class="mi">1711601297301999862146389758002427112641271299995210895971794979535949846981662</span><span class="p">,</span> <span class="mi">2603372280135481877885014637230736101699219758925563658302680157251609514729763</span><span class="p">,</span> <span class="mi">2667368415669419620483366371882587489517753424105473575306644788864390049717122</span><span class="p">,</span> <span class="mi">2375381791051675212713652990248979670250212118711539078479113604716354841854844</span><span class="p">,</span> <span class="mi">2493019084337584580000577145137347950270131374601477024044058401572003131171703</span><span class="p">,</span> <span class="mi">2510272034609038717473097414524000178497639528965708166872787898622112571433878</span><span class="p">,</span> <span class="mi">3376645650205558777740641900007720202740974970958294476802138375965090427473755</span><span class="p">,</span> <span class="mi">1675454950441201753341148918023526478031944115873936771857166782930709781514176</span><span class="p">,</span> <span class="mi">2295573600228045311698664671032537593950444762263429917312199003345978643927531</span><span class="p">,</span> <span class="mi">2989232564205545757256184449992766612296977264754661974992606639914166850018847</span><span class="p">,</span> <span class="mi">1868488082029996620995659067458996737428518781510041614792233972151493754021593</span><span class="p">,</span> <span class="mi">1892797289282204998558656233944707165344792878835655367911040680710800217026842</span><span class="p">,</span> <span class="mi">2387274259011256581212632921041457702119262115024449666940614377355894562863869</span><span class="p">,</span> <span class="mi">1983881332955491024985326286718581476273785076433829348701324483746422111982812</span><span class="p">,</span> <span class="mi">2062767935119595318038310126927517801164698007835687279422680554697212705483997</span><span class="p">,</span> <span class="mi">1813426760548272486587501966021027363576238607043680794995756040734812014712643</span><span class="p">,</span> <span class="mi">1562722510157661651420650013368819014831598048375840600129656685790447905077365</span><span class="p">,</span> <span class="mi">2503673291651808329507024991940471465924677096391781913465384267653316557369694</span><span class="p">,</span> <span class="mi">3062166182385308323163803924577776096950506098179031933671983253622594360543831</span><span class="p">,</span> <span class="mi">1587591727372004646650383007276778974486973795582795614543330273924194355879822</span><span class="p">,</span> <span class="mi">2124191961778288686577724783613312141001752051971190691410871783736806888118043</span><span class="p">,</span> <span class="mi">2807161639821718296747775878877393924108396927585322529661889069690379681631831</span><span class="p">,</span> <span class="mi">2733246030913567509280676058184785395993901538144190159673188530100162954586757</span><span class="p">,</span> <span class="mi">2095734027587628478963707980384021314089446286378559071426863977096549124105443</span><span class="p">,</span> <span class="mi">2988941018164239592895981954356834130422828926400913046430556106893050888967261</span><span class="p">,</span> <span class="mi">1808937486427315645718998608467510156824996634701840345775870478636993074414998</span><span class="p">,</span> <span class="mi">2703685611351166699001869484070817849345096649407749301012107683124291961022814</span><span class="p">,</span> <span class="mi">3102613448307372159580295514146090155031564221004892924292098653939442448602987</span><span class="p">,</span> <span class="mi">2177101615271107571142318136385894289129856690017106068932561385040022673438923</span><span class="p">,</span> <span class="mi">2937151057349964713327739484700778587301119004787857337542161351225777024384191</span><span class="p">,</span> <span class="mi">3284853954926625174312940587880762860995369578650383285440565102632766263047228</span><span class="p">,</span> <span class="mi">1445263692951995462669671350436071269459804664046732803232667890225299584565948</span><span class="p">,</span> <span class="mi">3098676865357167767681695819580978584292551422560325551761761261030493576490054</span><span class="p">,</span> <span class="mi">2785990764438332102573798945869163846058964169046667905446760842139596358710096</span><span class="p">,</span> <span class="mi">2286672499975498339110837294171463889505598069964900735273552787076262216195906</span><span class="p">,</span> <span class="mi">2391874898075608542385911568726340514438277750074914316438113074664500269203548</span><span class="p">,</span> <span class="mi">2605723731444632182682979422507162229453344556769061654841867236618061760791325</span><span class="p">,</span> <span class="mi">1704836746065631894082906921469595231141025078554131926066714879810005676323751</span><span class="p">,</span> <span class="mi">2268547330405383390451485215576699310201492241110811312277295403794298328525318</span><span class="p">,</span> <span class="mi">2257279690119315586453943222353936242022588071540577167031856674546385664274173</span><span class="p">,</span> <span class="mi">2872612890312518257758936879530195946285789167890762413291543959195362374746469</span><span class="p">,</span> <span class="mi">2782503101773215051391891616156069531578324959687740312811009067332251738718639</span><span class="p">,</span> <span class="mi">2138140684559184701106744969820800303534456927075159680357462604985136618973448</span><span class="p">,</span> <span class="mi">3095278460762504782170722834315395471811818415470674607477221955419939863412688</span><span class="p">,</span> <span class="mi">1918147505022892323887450400533906049794530447772075631502966582700819074987318</span><span class="p">,</span> <span class="mi">1707010156387988967567351309817287890962086105434244078370980148566691847226989</span><span class="p">,</span> <span class="mi">2314881420429035304174113419210131391725806719440675908882594861083902503989894</span><span class="p">,</span> <span class="mi">1747310534609110545360894267130302582086449810852064052514438793880321649681103</span><span class="p">,</span> <span class="mi">3080886800074193535767113381895308001287890199225312650567732780605043357281585</span><span class="p">,</span> <span class="mi">1703302394447278966593359250968585558627874162942204836180727596194447436704731</span><span class="p">,</span> <span class="mi">2669959616748655909038072864148442141347343478193254233924937012286825458693418</span><span class="p">,</span> <span class="mi">2678347981660125571899295349441122811861081559641451673761407195954761042620360</span><span class="p">,</span> <span class="mi">2991379536309166201033224610863206913612841270474721698767515583673314564634450</span><span class="p">,</span> <span class="mi">2523223616403538242735730838547058862626362247959528229773500469162355596137501</span><span class="p">,</span> <span class="mi">2642334249408957788795981926934456200612035825182578292078882855617370677855476</span><span class="p">,</span> <span class="mi">1569264447503315408491941272069637567187075617506995254256292388264423968802988</span><span class="p">,</span> <span class="mi">2882151918273286344356356582994818011404936455027402382189340156913800330427975</span><span class="p">,</span> <span class="mi">2158967947928376114000914445674913628201764160381348927457320635619197102958046</span><span class="p">,</span> <span class="mi">2051737874569931765249515775461268812640666956809870235551742670881277489362727</span><span class="p">,</span> <span class="mi">1763323742103061035663123542430905313899541445815905288785170098209590602129239</span><span class="p">,</span> <span class="mi">2713986379520959678928522767197552952345350348987283755564726696384571034845768</span><span class="p">,</span> <span class="mi">2537378599555526856829858853624086645778822512223537633689220391093349190349778</span><span class="p">,</span> <span class="mi">1559241246373570128428798700624771661010342250781098062213106558536948558050766</span><span class="p">,</span> <span class="mi">2279150628340411933639371451926359538099865357708465543071800823000587477815011</span><span class="p">,</span> <span class="mi">2898997193141068749321572525457620525323957690056983345387036999017795349699409</span><span class="p">,</span> <span class="mi">2522226015585642028656627937913370376228450166094635794231237529375655653354731</span><span class="p">,</span> <span class="mi">1976905875820155215040299709744110576065821433679615259775310771962543694656698</span><span class="p">,</span> <span class="mi">3146904959601041464677308813467361006584585805682305551431275878689319837940924</span><span class="p">,</span> <span class="mi">2693972707687221507896250578017189021477213697938899249523534331595305491495324</span><span class="p">,</span> <span class="mi">1624327598106729094885115301581437685380703813627081789404977021142280698320107</span><span class="p">,</span> <span class="mi">1953514564966249010069920346168045652870850335033365089388414276370477434371002</span><span class="p">,</span> <span class="mi">1626888973038960042489813971944630122654048243552668114260339025510208408311822</span><span class="p">,</span> <span class="mi">1691170441751836250949367136389943978609695857804909953940716207113664903533044</span><span class="p">,</span> <span class="mi">2872352457635317352383489529000387930132790666173838033868080090425309904205463</span><span class="p">,</span> <span class="mi">2863893510770920872155566640788223513715980556898590207492297802804734220666273</span><span class="p">,</span> <span class="mi">1664325124883579998946067059421408604232610753151100601467802141679596987515744</span><span class="p">,</span> <span class="mi">3241231581569478941168907165945341550977831562153048119560311010399685701948601</span><span class="p">,</span> <span class="mi">1361807005173976916825978829400623371016110290335271142789044365351489158265785</span><span class="p">,</span> <span class="mi">1406627349406527471168668282696809465701018718681981074249372097245594123964851</span><span class="p">,</span> <span class="mi">1971525597164878946966277125289812240116013457995908459722202952295120967951958</span><span class="p">,</span> <span class="mi">2786911678726247421699703800762265831545443241798747206478605511107149362330097</span><span class="p">,</span> <span class="mi">2439508492564866839705294296041842112712325553837677868579211795105087869136093</span><span class="p">,</span> <span class="mi">2059191048467669923967691687228577391906624742849738642011719916045439079304823</span><span class="p">,</span> <span class="mi">1570106312941323008471547510823923094983111141481917147880596218618909287869316</span><span class="p">,</span> <span class="mi">2122987705390617331128483361876664852958813888207310728315947431193637092615610</span><span class="p">,</span> <span class="mi">2801489830287263060085120056123289367371498556308329538059159707855810575200325</span><span class="p">,</span> <span class="mi">2603504643744222599357535179213179516289477923306029799301160287585889511538186</span><span class="p">,</span> <span class="mi">1579559950022451616002666575318998221718261186164798108063013638204271323515426</span><span class="p">,</span> <span class="mi">2946959687392272154774154223307645704738122794108855599681623985844195753004336</span><span class="p">,</span> <span class="mi">1692770221755889837201538695387588277166659470005431078018491728102054788606405</span><span class="p">,</span> <span class="mi">2659449088987888852195471961116502165033707350474142851843714185859896260654058</span><span class="p">,</span> <span class="mi">3505646321172760059446810399769341926141272269356767693575285534015133195241233</span><span class="p">,</span> <span class="mi">2530481419181774953758830811170792749065265404043551952628317101074384012856365</span><span class="p">,</span> <span class="mi">2712291448546463050414385318858256938602633632117389382231541762951484136569160</span><span class="p">,</span> <span class="mi">2771788380581020235551999360102117509781311204513808674596945948863545438935552</span><span class="p">,</span> <span class="mi">1955826919431026980944761018180907821649592615023066213634119373120418173949204</span><span class="p">,</span> <span class="mi">2233584311947835760483846096048038712598649182856770677618031551939193923070629</span><span class="p">,</span> <span class="mi">3394595068511229452615822692260046682896960654048194476745024879264499379417364</span><span class="p">,</span> <span class="mi">2712573898841928347986369197314358548875252769951810734215760791710091814581815</span><span class="p">,</span> <span class="mi">1748981602423073911431838108063086650192315739500168302252222265177547421664563</span><span class="p">,</span> <span class="mi">2918701578242467135076226389338480065735119480562687109522929797564227072493184</span><span class="p">,</span> <span class="mi">2164542802657835484124827216032688263572786614573372525249065148400873809020470</span><span class="p">,</span> <span class="mi">1135304887972847560145538866404958097776596359071002711002875129077851779982891</span><span class="p">,</span> <span class="mi">2205584540603634087173783390627256443719846063793628767797341432227402910992158</span><span class="p">,</span> <span class="mi">2690352932777477095639383802001157556275154650146494280789592444767406723210088</span><span class="p">,</span> <span class="mi">2303944374984763927616623281091903699148030217974972202655946341959198480366990</span><span class="p">,</span> <span class="mi">1826879964307133264320563754533689815425723980821932135389272772715666899003374</span><span class="p">,</span> <span class="mi">2411535830583065044709148037012533536301300387611929837028371177053977732254183</span><span class="p">,</span> <span class="mi">3102248701716368945194959238072315916896617832833372561718927136392499451559578</span><span class="p">,</span> <span class="mi">2659059708824611624428432407423533442925665544505963263289772494964288235307875</span><span class="p">,</span> <span class="mi">2122091574300829544940359499145373746146266675687307129711907050808965471122010</span><span class="p">,</span> <span class="mi">1700916444187293837558906660368523799466101955714678788331652720755325956184538</span><span class="p">,</span> <span class="mi">2567718060732115690755878753641406930783934887601526519050886636729753186426791</span><span class="p">,</span> <span class="mi">1952081132214229966862614041338565988918704651475436080348360529823670476859620</span><span class="p">,</span> <span class="mi">1660215762591901715725992379790262398087569715838733505603236713521769589358820</span><span class="p">,</span> <span class="mi">1719279125595280317066033690110562638515279430979107832569413806636508635211996</span><span class="p">,</span> <span class="mi">3150257746796819704620980918552950504464974368953784237516693028734092071089047</span><span class="p">,</span> <span class="mi">1533483464980797817093734747462583125027126533889191512411074224355529845622071</span><span class="p">,</span> <span class="mi">2488961034310705334758521978741509630299502434569628208806014299768156795682257</span><span class="p">,</span> <span class="mi">1949296862369855738672364903506625258331673226248095354317656816116053344797835</span><span class="p">,</span> <span class="mi">3314180997278886324171475580120649860821510669127198863042562159001687994942122</span><span class="p">,</span> <span class="mi">1835912431730828052486567697931843664151353173587570710495449691984382497927315</span><span class="p">,</span> <span class="mi">2490573473773652707889662396932059726458725983603386101684045752109912066544351</span><span class="p">,</span> <span class="mi">2034391449976822309453187815141830984379516892947671482205865823880790979367955</span><span class="p">,</span> <span class="mi">2904021828859719234045989645729651328223671397095849600652399072239977584752185</span><span class="p">,</span> <span class="mi">2898092590337486358630458611863555173232553156056707848156576249041471235470768</span><span class="p">,</span> <span class="mi">3020050896501407718070202328514173978695297814931297739049640810470505425773745</span><span class="p">,</span> <span class="mi">1162913829573891584933621423487787462781528876246539914934653605693493109367743</span><span class="p">,</span> <span class="mi">2411509537509594942434869563398255803405247485496687541554728239521209563719728</span><span class="p">,</span> <span class="mi">3240460093945381326170175021314548622274008446302186694162254988437882522956789</span><span class="p">,</span> <span class="mi">2042576958259566656441090421986717161687799145769915833228519921746477531448760</span><span class="p">,</span> <span class="mi">2553411758242921025239995694953337401215433895789864555503864382953439429213802</span><span class="p">,</span> <span class="mi">2820514264957484223884788232888402572082052875947845405781652420449215392785603</span><span class="p">,</span> <span class="mi">2641370591795997642215472507781953866796675755685964449326951672513035331652719</span><span class="p">,</span> <span class="mi">2823035270072193806363721364627815545328685374442891399776824815269510767922152</span><span class="p">,</span> <span class="mi">1989373778720753497822506435334497629024665265080539577357802530369873476548739</span><span class="p">,</span> <span class="mi">1862386424241098951111754027338499846132635633222316642962968740112589660520830</span><span class="p">,</span> <span class="mi">2976767130013568871382359613949325813684341929036309541118080812240632837951917</span><span class="p">,</span> <span class="mi">2032079799183763407608429385442348826534633217836159747315522261005324747502541</span><span class="p">,</span> <span class="mi">2708285103915655469463038547427063010568545575090977468837676375353975489314033</span><span class="p">,</span> <span class="mi">1763806042471114758817803518721264989399707893537069108192481105750144308762714</span><span class="p">,</span> <span class="mi">1937326669619940914067700437225091575824756751300418686192482170396808556973038</span><span class="p">,</span> <span class="mi">2435703549632943593049899499355898299013949956078689678733600487087852297494155</span><span class="p">,</span> <span class="mi">1564269996471702815616616340843697420448380748563779822431189073561802077443811</span><span class="p">,</span> <span class="mi">2456980081971515876372636881680154805873081926372199873790185654198943312487861</span><span class="p">,</span> <span class="mi">2114228222599900470093715633907929439859036580370529231708091911394217318192346</span><span class="p">,</span> <span class="mi">2412504259980354806049559188591922758532822094151137644379211660889448844429578</span><span class="p">,</span> <span class="mi">2635073202673673572264139459896284480350454830352313451411706615748140392229736</span><span class="p">,</span> <span class="mi">2725320685400498493268546434049721871475577064325227566368156917361595597089351</span><span class="p">,</span> <span class="mi">3037867883571431356133279924916838430904119854900038874159214526715272191199734</span><span class="p">,</span> <span class="mi">2824971163661740859800864424701755168512099695296428827528594616947609789856313</span><span class="p">,</span> <span class="mi">1719312755020161540743541987056216628179475180251054784014251838005404915359190</span><span class="p">,</span> <span class="mi">3012080368518302834546286001958441602695677482755944367912995252821821409322630</span><span class="p">,</span> <span class="mi">2595410720707289052259292382365869693173486839668185767458178220761996549540776</span><span class="p">,</span> <span class="mi">1730386135469589080821808335571789810133070354002257675548380927002483585203525</span><span class="p">,</span> <span class="mi">2183488429559972081266293580805381776596408303103494625441288200546469064198052</span><span class="p">,</span> <span class="mi">1586663745637750938560919751995751853774793809756290411350824056092900626767581</span><span class="p">,</span> <span class="mi">2633560016633693373820917408699356704371120444974417409768038767304741258416882</span><span class="p">,</span> <span class="mi">1588266791029338678483285861004896440056893325470901832575017393368494381844313</span><span class="p">,</span> <span class="mi">2062140763508547310649316830659374267702516490495399524838782204228464817557303</span><span class="p">,</span> <span class="mi">2210631662045486660045329182773925615869393461089725622733280699922614662573188</span><span class="p">,</span> <span class="mi">2459357704199420786919294385229487410232263583838342283632925369162881135458784</span><span class="p">,</span> <span class="mi">2613643032209168797222243130152765007369922353402246208144392804402308111491213</span><span class="p">,</span> <span class="mi">1710948753142088971871638997633063611816787381413888582644218262719506545790814</span><span class="p">,</span> <span class="mi">2370888885585089451526475579030868634013098608165933127887831074072488486211027</span><span class="p">,</span> <span class="mi">1874802131193521153356429186932124966125006368474096875577533362925609490873675</span><span class="p">,</span> <span class="mi">2257490811907741146287835975463592107772672753660997437720973452168570067018183</span><span class="p">,</span> <span class="mi">2027396376118176181554556587461857799175262388659116515495331190904871780900168</span><span class="p">,</span> <span class="mi">2629203400695349534340609904454384114924188013467883308551455289883598277506576</span><span class="p">,</span> <span class="mi">2890142848965203803657678020364632618710915881162439911156088498054480848444284</span><span class="p">,</span> <span class="mi">2219081521671625674270988735444011710759687035389885997488568461190702712665391</span><span class="p">,</span> <span class="mi">2380376764714634310626713438415734647767006799419143228948264493667246616324693</span><span class="p">,</span> <span class="mi">2814638103849795047350222194926779177051843856327710877892295181020329663696490</span><span class="p">,</span> <span class="mi">2047838076416771508199337081863868486021562878681029339974246205098649513457324</span><span class="p">,</span> <span class="mi">1784932180402383121530422581359653305472252436816341976330551492781428029261514</span><span class="p">,</span> <span class="mi">1941527319325036462639722135771653972446143884927214478817515634545849137431669</span><span class="p">,</span> <span class="mi">2907563421094345848181477200768863573314924396229466732653561249857033838608028</span><span class="p">,</span> <span class="mi">3000337261597585046467954498628106745718605542524330400603607525806097908557040</span><span class="p">,</span> <span class="mi">2786351435794517058372407045515681838202163268432832568806234013222378647734555</span><span class="p">,</span> <span class="mi">1836092084933347325356728587763659299616726483980078801819666587432774417206073</span><span class="p">,</span> <span class="mi">1574796707547605480163763402663498447991988000366600032231056878314794495735406</span><span class="p">,</span> <span class="mi">2353612553114861608109605098910218987289338082728729053511317177449593301899294</span><span class="p">,</span> <span class="mi">2248699009001439455571494271407476531250809026878799237531708891383695128771122</span><span class="p">,</span> <span class="mi">2417476639863872938259290255198814812522944882305274702168279778861529389946164</span><span class="p">,</span> <span class="mi">2971783285485191513675004761256201878142447913010923130203347305001342064598990</span><span class="p">,</span> <span class="mi">2142943014519370915558067112669312116295755777127417301618377823907694765946338</span><span class="p">,</span> <span class="mi">2661527100047693021718564373867938790031132276013799786506265512546563727003637</span><span class="p">,</span> <span class="mi">2789161914059543582404778858005723463894421641256844424769515176678453044603337</span><span class="p">,</span> <span class="mi">3040014096172959690905204596262839182154829748346494437618210463868135852399494</span><span class="p">,</span> <span class="mi">2635917392114338296279286936931727170162216403550460752678274156631579609014634</span><span class="p">,</span> <span class="mi">2739029817120645069226715038276509821027853672448467093767065178330079288792182</span><span class="p">,</span> <span class="mi">1484738110125237820910555901588888998435780560979615982696803082959376104709161</span><span class="p">,</span> <span class="mi">2372999157870072620027636129336264510265625974962517451119668258432432453459291</span><span class="p">,</span> <span class="mi">2455687222461827602660206191412397063350581337238480459622011027481646403606246</span><span class="p">,</span> <span class="mi">1876432865628323024983726722907298656929294958135555012103492960934104600220219</span><span class="p">,</span> <span class="mi">1307841776873030596697898086313556358231717270837313632583014388160388520957206</span><span class="p">,</span> <span class="mi">1930461711710915408769618026875738822780815121368520129692337068401427296313373</span><span class="p">,</span> <span class="mi">3325280034101518748159577481976984799447956248994089550885201924665697013425938</span><span class="p">,</span> <span class="mi">2141730641878301259755102172773233369139906794041664225968362000101121750584861</span><span class="p">,</span> <span class="mi">1375656209370479485060378259057252116555118144818855052445166926233837043706214</span><span class="p">,</span> <span class="mi">2977769163020142792135228863060463623818385890145164352689707153311169566103001</span><span class="p">,</span> <span class="mi">2002834314014321054187636141249638087852858776899333125132657509142700920915899</span><span class="p">,</span> <span class="mi">2851322935231676704267708179361053286697597203152531856687447152874802460360864</span><span class="p">,</span> <span class="mi">2992147055296731103287336167512602309601875655087942903948613982271058288601610</span><span class="p">,</span> <span class="mi">1726152188820994697022282207330085869001951550140404285145456533691648598100569</span><span class="p">,</span> <span class="mi">1888604908855715245619198652572645357831264155960901438791523139267142437922964</span><span class="p">,</span> <span class="mi">2352448954998759084316420067380678866770050286925503771493227478020356378487607</span><span class="p">,</span> <span class="mi">2048308642686539346926409497753971725904482476842642143130646956853793335448162</span><span class="p">,</span> <span class="mi">2501794434297131030946196089001233568215948580707283625912119735439908255378216</span><span class="p">,</span> <span class="mi">1903581457860725006292290733111833468722059955064722300000621986075260984730890</span><span class="p">,</span> <span class="mi">3091137366193643814130757614246951323703457976373978819948176036606067628695033</span><span class="p">,</span> <span class="mi">2320974233653240015647239860333344772512164840786841438935137525814103134556389</span><span class="p">,</span> <span class="mi">2685814581994945080754008326997111441187184408176728102326696887317673828436881</span><span class="p">,</span> <span class="mi">2000735932503291577967925242471844116928558854574240520790749980890194978580328</span><span class="p">,</span> <span class="mi">2420029456477865293042005101867311660978152293635853664008446797812937597305509</span><span class="p">,</span> <span class="mi">2129555161426105317333875952515114347501476208979636012506937915200909157703983</span><span class="p">,</span> <span class="mi">2582947141522611573263255922392440642592155092034175475551805098992649126512502</span><span class="p">,</span> <span class="mi">2007387202205259405202080331409071622936010454228446167685562218123845168427194</span><span class="p">,</span> <span class="mi">1555346362119608126365015153381797593304002606210833679794143799398649488008709</span><span class="p">,</span> <span class="mi">2627310074157008615051031552873690677995763263775766597112117219178356232254138</span><span class="p">,</span> <span class="mi">2614870511241382676735961019792996302007146563530003061044256637662310198888354</span><span class="p">,</span> <span class="mi">1835517951630184004031358550557037074114640173264557591588255546633305636557964</span><span class="p">,</span> <span class="mi">2191360283419900545159044662092406127521650045451596375234153785353085173024074</span><span class="p">,</span> <span class="mi">1633587445499810699103350031108401299972286118612069333913054471891868634481981</span><span class="p">,</span> <span class="mi">2244506220430518115591858883493205895321869570070556445420237854928896037980916</span><span class="p">,</span> <span class="mi">1701933270297668456594030101250077900332487913784571880972700238355040675454480</span><span class="p">,</span> <span class="mi">2073349787428363296079890283770992319911798913918743690389931150271611080940175</span><span class="p">,</span> <span class="mi">2554199147351498854198124357914578384080971977075570829246726644622890103967478</span><span class="p">,</span> <span class="mi">2869859353109108769884032621260179038333321889811803968916073817470951304600426</span><span class="p">,</span> <span class="mi">2163535859846850182293040680340377227423216011265031881108965948829531859829146</span><span class="p">,</span> <span class="mi">2127374883010589876012860539719535092731861273867713812127079127126859754504360</span><span class="p">,</span> <span class="mi">1938864159337265849599773369625058562249980220372090673684508081397701999600056</span><span class="p">,</span> <span class="mi">2757117073936544413482459237210873364734485018520440516659943461070434895539784</span><span class="p">,</span> <span class="mi">2173928418091053227417706702891687012126191118333695997916756600408543226601665</span><span class="p">,</span> <span class="mi">1231466375392538328694612130964071690021805034621412520944511481512279507297777</span><span class="p">,</span> <span class="mi">2349648477640756485993251301906725341047132183382215279465438497793389660839109</span><span class="p">,</span> <span class="mi">3099111297578477135779886526345743640311475435758824993734579420700333420488649</span><span class="p">,</span> <span class="mi">1690664359964097576800556030074459924192324269317618913545738475596847587203311</span><span class="p">,</span> <span class="mi">2054265318601641370989870371763207271922774837760458400854115401387162521953106</span><span class="p">,</span> <span class="mi">1455042222594995300357946948940506176079473202745755539315170165422919837214987</span><span class="p">,</span> <span class="mi">2737703901230648620119729675184516215498340228498747075833558529322741550448515</span><span class="p">,</span> <span class="mi">1847489593766622016816587362489572976735325020357364005648973154291576153981323</span><span class="p">,</span> <span class="mi">2920110538280520314747827961178189014514998204549518095761788407950255153847540</span><span class="p">,</span> <span class="mi">2958268500396601269761423235959825847393704227293222157799335793319669060622825</span><span class="p">,</span> <span class="mi">2345985542180934042839128223629154919627988311400089812717130377891745822434700</span><span class="p">,</span> <span class="mi">2241014203060338070745691577758044738147586031133732693491353306115564095153519</span><span class="p">,</span> <span class="mi">2870347637439131502185386213581689360274632975558359807782293631067782158330598</span><span class="p">,</span> <span class="mi">1852634989733999093426874218169458195422557079581034231098762933704435006044887</span><span class="p">,</span> <span class="mi">1862388256084067824430383892323053894335290341611286789184625594484340897283766</span><span class="p">,</span> <span class="mi">2840894927901654909141739161619191856732681195736147467945179479863663606830039</span><span class="p">,</span> <span class="mi">2402361678063385966682160132501003561188266731404508880379614200749592715079467</span><span class="p">,</span> <span class="mi">1909915635563467518852047815113709884418039180699302428128451374644140267941130</span><span class="p">,</span> <span class="mi">1658926823813195282852604374649678095399363082284848840092112243331543914063209</span><span class="p">,</span> <span class="mi">3246219477051766010472120322020803795950363636590298249520227420314197051320180</span><span class="p">,</span> <span class="mi">1917533171125817291632511547114825642767636167947706046118285318907308481349834</span><span class="p">,</span> <span class="mi">1732529573776954215396883824592109278461465616296113719187362257221124050421297</span><span class="p">,</span> <span class="mi">2814263652577009321513917897615787457764472311899563306422689175146400874504093</span><span class="p">,</span> <span class="mi">2324993916740169682393708336019975558244948129067453744986371404324519261398643</span><span class="p">,</span> <span class="mi">1503532043620487999925454219611892452064871526670005017321304231576559050996563</span><span class="p">,</span> <span class="mi">1699050200327606267818057665406833317372501004260777756764072516881987595376191</span><span class="p">,</span> <span class="mi">1472586941034140862204493262409660776093862810910579498650970236100393355808389</span><span class="p">,</span> <span class="mi">2029713505933905447328187739983632511774919013593902578922419593584096403736957</span><span class="p">,</span> <span class="mi">3225171083287582817199300358232903389164407358944150878502408641001476881116329</span><span class="p">,</span> <span class="mi">2002739705085819696773726906427925703939222313302954137977322923239129980777347</span><span class="p">,</span> <span class="mi">2977185366949025183951676661737118397967970692854945619333644262933483104988303</span><span class="p">,</span> <span class="mi">2947173195366661114129705192992773919565837049152232827162046911232264006182254</span><span class="p">,</span> <span class="mi">1754887252759358888503156014386972306424663301077620313505515454966154084372388</span><span class="p">,</span> <span class="mi">1907405965907142420721338795834817757376940109196779186347981266665613826233212</span><span class="p">,</span> <span class="mi">2015330364408646879738783215328681821738282240814572865785393505480211039640066</span><span class="p">,</span> <span class="mi">2727893473289569333590201710166502128438404920873958155705550313677854946255891</span><span class="p">,</span> <span class="mi">2285909249720592854317361245045521549583079701492605951982463479972983290870664</span><span class="p">,</span> <span class="mi">1845999854724343976570027772639141428826241063271141835304228421100708367103569</span><span class="p">,</span> <span class="mi">2363672791141786231097409217383362655763662840519306763732391294439966071060443</span><span class="p">,</span> <span class="mi">2806936541429868513549845833892240163395528940507540978740415968116778710515102</span><span class="p">,</span> <span class="mi">2697219364136050209859748029002897741198163283378001317797626490633055309788843</span><span class="p">,</span> <span class="mi">2247184701442480681779249398438744369415499975031480815364948207694623966199387</span><span class="p">,</span> <span class="mi">3231086019038147296220763915450735650568111238173220866389065299438632440751237</span><span class="p">,</span> <span class="mi">1832276392976999556129354128814768583897218865356710089662798671135934832729329</span><span class="p">,</span> <span class="mi">1917342661910522861149489645623396859753824081005762371765834098322307654497381</span><span class="p">,</span> <span class="mi">1568017253990396537784321601698015449451817832281251660296025502053520561811812</span><span class="p">,</span> <span class="mi">2941616922582905030134617392243899143088159369106475594003645096550740211691295</span><span class="p">,</span> <span class="mi">2683368351117012950411179150631678778651588063084420106900764888746387687168222</span><span class="p">,</span> <span class="mi">1778420058969534218383812868489034592227993121385588230014110347522765607535946</span><span class="p">,</span> <span class="mi">1923764582860656292136186495617159929691221984386016458167256338158112818097098</span><span class="p">,</span> <span class="mi">2656631653745695250048441951987799766681703378345466605375664608750138267094490</span><span class="p">,</span> <span class="mi">1691142612544234157420807122078777197042131796182931240632840532974741207366554</span><span class="p">,</span> <span class="mi">2507486372683720823405119393792056270780488181696931417677286972451364222324898</span><span class="p">,</span> <span class="mi">2447484598394060182059875442220084043147995607049408859564736403691102277754703</span><span class="p">,</span> <span class="mi">2595545091473159386760353940687413026143395465208155790570429164011691489970522</span><span class="p">,</span> <span class="mi">2202408778718364092229680334582879965674953387559013630876726207304442759100950</span><span class="p">,</span> <span class="mi">1434044264080765552621476110745390069274931289997241169288539930228352180841157</span><span class="p">,</span> <span class="mi">1730963110434177443493191358945360130890936890712807539961534419929496768666853</span><span class="p">,</span> <span class="mi">1814514698770987074692007368337406747271432147111293957177097586796743335366864</span><span class="p">,</span> <span class="mi">2019810504329770248199484256164192365539847161241402784488318370955221358775583</span><span class="p">,</span> <span class="mi">1956536334521214519139005513274352058427551797660335556789649011126122469394621</span><span class="p">,</span> <span class="mi">1694989916853171959536869648489026282016518865526156952107205253569208427588802</span><span class="p">,</span> <span class="mi">1770954866648012756428357246696467696128773908163230225537396522364937343241454</span><span class="p">,</span> <span class="mi">2802996166579840936213980653413335387241497268210450195945009691876958816391301</span><span class="p">,</span> <span class="mi">2644513999224447293556676912891272387168542381412380571251701553565002974065160</span><span class="p">,</span> <span class="mi">2463113107479271232731543030008511295698209596496337911158126811719994524730804</span><span class="p">,</span> <span class="mi">1334261391981801071990435527914252759589346447377833542541150596820934615355804</span><span class="p">,</span> <span class="mi">2279003943573323534404267206493585478080811684601838324835345540797019580209881</span><span class="p">,</span> <span class="mi">2120333317125642116907729078091221616419400615377299883141448350668604241449740</span><span class="p">,</span> <span class="mi">1756076625856166082841036230119144332034421616895963015504269044505034917059399</span><span class="p">,</span> <span class="mi">2207615431411605687205294013132826939107597873984017330939473488301182073661283</span><span class="p">,</span> <span class="mi">3402307618965454186510075915629520371557316035524100232971772642879541133866581</span><span class="p">,</span> <span class="mi">2257357821930382005896155137026800185487154395207884048113343615729127921819640</span><span class="p">,</span> <span class="mi">1551825494936649699327478596078225912177508474254549041414169792254557027355217</span><span class="p">,</span> <span class="mi">1365732972487952087912201569843410874792402112231916794732119488395781020203311</span><span class="p">,</span> <span class="mi">1807495973197443225501042200464935032992636693133827521190080032536875399246452</span><span class="p">,</span> <span class="mi">3066548428950611112157801870665061157137219961909600957576183226324708978020683</span><span class="p">,</span> <span class="mi">1827692464083287200286079376258081926585195439691129818155557308275829855008347</span><span class="p">,</span> <span class="mi">2177950758759980504779021451412567471817907630921840590750050627364220415245388</span><span class="p">,</span> <span class="mi">2500408490068677256675931862459954402673338550184480122429756334963949542806122</span><span class="p">,</span> <span class="mi">2134138149727797607166351547030249872845232722149691714081305131457344525454827</span><span class="p">,</span> <span class="mi">2332811982231893523373224098520580507465485470638866226523073135090091836623660</span><span class="p">,</span> <span class="mi">2230040524682264142564447094948233324847290581046122443235354731861026477584174</span><span class="p">,</span> <span class="mi">2331535816974572878114135820359512753886735587931098018590107412165934055193524</span><span class="p">,</span> <span class="mi">2865092118462007871887135714513386199315743927247622435497167687480635403743332</span><span class="p">]</span>

<span class="n">bitstring</span> <span class="o">=</span> <span class="s">""</span>

<span class="k">for</span> <span class="n">T</span> <span class="ow">in</span> <span class="n">output</span><span class="p">:</span>
    <span class="n">attack</span> <span class="o">=</span> <span class="n">CJLOSSAttack</span><span class="p">(</span><span class="n">primes</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
    <span class="n">subset</span> <span class="o">=</span> <span class="n">attack</span><span class="p">.</span><span class="n">solve</span><span class="p">()</span>               <span class="c1"># returns None or a list
</span>
    <span class="n">bitstring</span> <span class="o">+=</span> <span class="s">"1"</span> <span class="k">if</span> <span class="n">subset</span> <span class="k">else</span> <span class="s">"0"</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Iteration </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">bitstring</span><span class="p">)</span><span class="si">}</span><span class="s"> / </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="n">bitstring</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># ictf{dec1d3_my_fl4g_4nd_m9_b1ts_by_LLL_3ac4ed91}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Knapsack" /><category term="Low density subset problem" /><category term="LLL" /><category term="Decisional" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Bivariate (ictf Round 54)</title><link href="http://localhost:4000/bivariate/" rel="alternate" type="text/html" title="Bivariate (ictf Round 54)" /><published>2025-04-30T12:00:00+02:00</published><updated>2025-04-30T12:00:00+02:00</updated><id>http://localhost:4000/bivariate</id><content type="html" xml:base="http://localhost:4000/bivariate/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getPrime</span><span class="p">,</span> <span class="n">bytes_to_long</span>
<span class="kn">from</span> <span class="nn">secret</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>

<span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>

<span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">gens</span><span class="p">()</span>

<span class="n">terms</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span>
    <span class="n">terms</span> <span class="o">+=</span> <span class="p">[(</span><span class="n">x</span><span class="o">**</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">y</span><span class="o">**</span><span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="o">-</span><span class="n">i</span><span class="p">)]</span>

<span class="n">T</span> <span class="o">=</span> <span class="n">RealDistribution</span><span class="p">(</span><span class="s">'gaussian'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">coefs</span> <span class="o">=</span> <span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="n">T</span><span class="p">.</span><span class="n">get_random_element</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">terms</span><span class="p">))]</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">term</span><span class="o">*</span><span class="n">coef</span> <span class="k">for</span> <span class="n">term</span><span class="p">,</span><span class="n">coef</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">terms</span><span class="p">,</span><span class="n">coefs</span><span class="p">)])</span>
<span class="n">w</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">f</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">),</span><span class="n">n</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'out.txt'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">n</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">e</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">c</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">f</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">w</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n = 98488948227534213135365379684862624429673068552821962383206603053375602239567322517902539151497074614991106864222481349938278930598229083057490442318255136829928469581554377192371866029487604479323565889518717446151982565992066276503827461143275322745847799672825450812329543611683563104108219738025321562523
e = 65537
c = 33689078336368731933599049868377598889513853827091255415228112692581639226201157033763841134090287166200344255205518269253856257850799105681895141225429744730522910522719711967250214161994104603730456295060918937791062152710510634082416634814375504799932491459723391812528758183583260665132261524658305233101
f = x^14*y + x^13*y^2 - x^12*y^3 - 3*x^10*y^5 - x^8*y^7 - x^6*y^9 + x^5*y^10 + x^4*y^11 - x^2*y^13 - 2*x*y^14 + y^15 - x^14 + 3*x^13*y + x^12*y^2 + 2*x^11*y^3 - x^9*y^5 + x^8*y^6 + x^7*y^7 - x^6*y^8 + x^5*y^9 - x^4*y^10 - 2*x^3*y^11 + 2*x^2*y^12 - 2*x*y^13 + x^11*y^2 - 3*x^10*y^3 - x^7*y^6 - x^6*y^7 + x^5*y^8 + 3*x^4*y^9 + 4*x^3*y^10 + 2*x^2*y^11 - 2*x*y^12 + y^13 + 2*x^12 + 2*x^11*y - 5*x^9*y^3 - 3*x^8*y^4 + 4*x^7*y^5 - 2*x^6*y^6 - x^5*y^7 - x^3*y^9 - x^2*y^10 + x*y^11 - y^12 - x^11 - x^10*y + 3*x^9*y^2 + 3*x^8*y^3 - 2*x^7*y^4 - 2*x^6*y^5 + 2*x^3*y^8 - 3*x^2*y^9 + y^11 + x^10 + x^8*y^2 - x^7*y^3 + 3*x^6*y^4 - 5*x^5*y^5 - x^4*y^6 + x^3*y^7 - x^2*y^8 - 2*y^10 - x^8*y - x^7*y^2 - x^5*y^4 - x^4*y^5 - x^2*y^7 - x*y^8 - 4*x^8 + 4*x^7*y - 2*x^6*y^2 - x^5*y^3 - 2*x^4*y^4 - x^3*y^5 - 3*x^2*y^6 + x*y^7 - 3*y^8 + 4*x^6*y + x^5*y^2 - 2*x^3*y^4 - 5*x^2*y^5 + x*y^6 + x^5*y + 2*x^4*y^2 - x^2*y^4 - x*y^5 - 2*y^6 + 3*x^5 + 4*x^4*y + 2*x^3*y^2 - y^5 - x^4 - 3*x^3*y - 3*x^2*y^2 + x*y^3 + 2*x^3 + x*y^2 + y^3 + x^2 - 4*x*y + y^2 + 2*x + y
w = 15989670860487110440149242708963326378222417402274922693109917884050744558426262015391394948248787707275063436118071762352120567031556081355002123446258001515700442370180130234425828020876205206138411646169530066935290884923582522784445410472996067725745321733529202293253140485085104533833013732203780391490
</code></pre></div></div>

<p>The encryption script uses RSA to encrypt the flag. However, we are given some hints about the prime factors $p$ and $q$.</p>

\[\large w = 2^{f(p,q)} \mod n\]

<h5 id="recovering-p">Recovering p</h5>

<p>This approach will be quite similar to the approach in the previous univariate challenge, meaning it will involve fermat’s little theorem and gcd. However, we must make some preparations first.
For $f(p,q)$, the terms $x^{i}y^{j}$ become $p^{i} q^{j}$. However, if we instead do $f(1,n)$, the terms become $1\cdot p^{j}q^{j}$. If we have:</p>

\[\large p^{i}q^{j} \quad \text{and} \quad p^{j}q^{j}\]

<p>We can rewrite $p^{i}$ as:</p>

\[\large \begin{align}
\nonumber p^{i} = p^{i} \cdot p^{j} \cdot p^{-j} \\
\nonumber p^{i} = p^{j} \cdot p^{i-j}
\end{align}\]

<p>By doing this, the terms are quite similar:</p>

\[\large p^{j}q^{j}p^{i-j} \quad \text{and} \quad p^{j}q^{j}\]

<p>Their difference, will thus equal:</p>

\[\large p^{j}q^{j} - p^{j}q^{j} \cdot p^{i-j}= p^{j}q^{j}(1-p^{i-j})\]

<p>This difference $p^{j}q^{j}(1-p^{i-j})$ contains a term $1-p^{k}$ for some value $k = i-j$, which can be rewritten as $-(p^{k}-1)$. Any multiple of $p^{k}-1$ is always divisible by $p-1$.</p>

<p>The result of this is that $f(1,n) - f(p,q)$ is divisible by $p-1$. We can now utilize fermat’s little theorem:</p>

\[\large
\begin{align}
\nonumber 2^{f(1,n)-f(p,q)} &amp;\equiv 1 \mod p \\
\nonumber \frac{2^{f(1,n)}}{2^{f(p,q)} } &amp;\equiv 1 \mod p \\
\nonumber 2^{f(1,n)} &amp;\equiv 2^{f(p,q)}  \mod p \\
\nonumber 2^{f(1,n)} &amp;\equiv w  \mod p \\
\nonumber 2^{f(1,n)} - w &amp;\equiv 0  \mod p
\end{align}\]

<p>Since this term is congruent to $0 \mod p$, we can use $gcd$ with $N$ to recover the prime factors:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">),</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="n">w</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span>
</code></pre></div></div>

<p>And from here, decryption is easy:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">phi</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">))</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
<span class="c1"># b'ictf{symmetry_of_bivariate_polynomials_is_zany}'
</span></code></pre></div></div>

<h5 id="solvepy">Solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">gens</span><span class="p">()</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">98488948227534213135365379684862624429673068552821962383206603053375602239567322517902539151497074614991106864222481349938278930598229083057490442318255136829928469581554377192371866029487604479323565889518717446151982565992066276503827461143275322745847799672825450812329543611683563104108219738025321562523</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">33689078336368731933599049868377598889513853827091255415228112692581639226201157033763841134090287166200344255205518269253856257850799105681895141225429744730522910522719711967250214161994104603730456295060918937791062152710510634082416634814375504799932491459723391812528758183583260665132261524658305233101</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">14</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">13</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">12</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">10</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">13</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">14</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">15</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">14</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">13</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">12</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">11</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">9</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">12</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">13</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">11</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">10</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">12</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">13</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">12</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">11</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">9</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">-</span> <span class="n">y</span><span class="o">^</span><span class="mi">12</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">11</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">10</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">9</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">10</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="n">w</span> <span class="o">=</span> <span class="mi">15989670860487110440149242708963326378222417402274922693109917884050744558426262015391394948248787707275063436118071762352120567031556081355002123446258001515700442370180130234425828020876205206138411646169530066935290884923582522784445410472996067725745321733529202293253140485085104533833013732203780391490</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">),</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="n">w</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">phi</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">))</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Fermat&apos;s Little Theorem" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Univariate (ictf Round 54)</title><link href="http://localhost:4000/univariate/" rel="alternate" type="text/html" title="Univariate (ictf Round 54)" /><published>2025-04-30T12:00:00+02:00</published><updated>2025-04-30T12:00:00+02:00</updated><id>http://localhost:4000/univariate</id><content type="html" xml:base="http://localhost:4000/univariate/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getPrime</span><span class="p">,</span> <span class="n">bytes_to_long</span>
<span class="kn">from</span> <span class="nn">secret</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>

<span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>

<span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">gens</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">terms</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">**</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">137</span><span class="p">)]</span>

<span class="n">T</span> <span class="o">=</span> <span class="n">RealDistribution</span><span class="p">(</span><span class="s">'gaussian'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">coefs</span> <span class="o">=</span> <span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="n">T</span><span class="p">.</span><span class="n">get_random_element</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">terms</span><span class="p">))]</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">term</span><span class="o">*</span><span class="n">coef</span> <span class="k">for</span> <span class="n">term</span><span class="p">,</span><span class="n">coef</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">terms</span><span class="p">,</span><span class="n">coefs</span><span class="p">)])</span>
<span class="n">w</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">f</span><span class="p">(</span><span class="n">p</span><span class="p">),</span><span class="n">n</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'out.txt'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">n</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">e</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">c</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">f</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">w</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n = 151510886600487624888537926759375027338192556324330182365859112926770109752858284462159488504727238764120612593911292154858008775463001345641311051184326218974685701057787672193003745574697137968457609530135969033403360561333863943223407215732526198691453110628598401583407984162075630768455052482583101773637
e = 65537
c = 74468088842131664480394073891613024559473817230309311952320910922177130990996003196602702376336093457990873018154873841543712071422931358036924937335888815556064840522100618318507080665149514719351519909821468981883880543654015414713368018500970500498936910817336501949914675483148862843329341461828563728789
f = -x^136 + x^135 - 2*x^134 - 4*x^132 + 2*x^130 - x^128 - 3*x^127 + 4*x^126 + 3*x^125 + 3*x^124 + x^123 + x^122 - 5*x^121 - 3*x^120 - x^119 - x^118 + x^117 + x^116 - 4*x^114 - 2*x^112 + 2*x^110 + x^109 + 2*x^108 - 2*x^107 + 3*x^106 - x^104 + 2*x^103 - x^102 + x^101 - 2*x^100 + 3*x^99 - 2*x^98 - x^97 - x^96 - 3*x^95 - x^94 - 2*x^93 - 2*x^91 + 3*x^90 - 2*x^89 - 2*x^88 + x^86 + x^85 - 2*x^84 - 3*x^83 + 2*x^82 + 3*x^79 - x^76 + 2*x^75 - x^74 + x^71 - 5*x^70 - x^67 + x^66 + x^65 + x^63 - x^61 + x^59 - 2*x^58 + 6*x^56 + x^55 + 3*x^54 - x^53 + 2*x^52 + 3*x^51 + x^50 + 2*x^49 + 3*x^47 + 2*x^46 - 4*x^45 + 3*x^44 + 3*x^43 - x^42 - 2*x^40 - 5*x^39 + x^38 + x^37 + 2*x^36 + 2*x^35 + x^34 - x^33 + x^32 - 5*x^31 + x^30 + x^29 + 2*x^28 - 2*x^27 + 3*x^26 - x^25 - x^23 - x^22 - 3*x^21 + 2*x^20 - x^19 - x^17 + 2*x^16 - 2*x^15 - 2*x^14 - 2*x^13 - 2*x^12 + 2*x^11 - 2*x^9 + 3*x^8 - 4*x^7 + 2*x^6 - 2*x^5 - 5*x^4 - 3*x^3 + 5*x^2 - 2
w = 86258923706084556733053644452456806418792871483898871193707132372143291757396867798433017660985422614532352743658877188445517898648519256573663299464811234251773841741466280567326570167017786562044635756348763128567054349991798640926148221279889174229551074668002853442182664523748992260830782387602048836221
</code></pre></div></div>

<p>The encryption script uses RSA to encrypt the flag. However, we are given some hints about the prime factor $p$.</p>

\[\large w = 2^{f(p)} \mod n\]

<h5 id="recovering-p">Recovering p</h5>

<p>We utilize the polynomial identity:</p>

\[\large f(x) - f(1) = (x-1)\cdot g(x)\]

<p>for some polynomial $g(x)$. We can evaluate $f$ at $x=1$ in sagemath:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="o">-</span><span class="mi">12</span>
</code></pre></div></div>

<p>So, for $f(p)$, we have:</p>

\[\large f(p) + 12 = (p-1)\cdot g(x)\]

<p>This means $f(p)+12$ is a multiple of $p-1$!</p>

<p>We can then utilize fermat’s little theorem:</p>

\[\large 2^{p-1} \equiv 1 \mod (p)\]

<p>Any exponent that is a multiple of $p-1$ will also be congruent to $1 \mod p$.</p>

\[\large 
\begin{align}
\nonumber 2^{f(p)+12} \equiv 1 \mod p \\
\nonumber 2^{f(p)}\cdot 2^{12} \equiv 1 \mod p \\
\nonumber w \cdot 2^{12} - 1 \equiv 0 \mod p
\end{align}\]

<p>From here, we can use $gcd$ with $N$ to recover $p$ and $q$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">p</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">w</span><span class="o">*</span><span class="mi">2</span><span class="o">^</span><span class="mi">12</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">q</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span>
<span class="n">sage</span><span class="p">:</span> <span class="k">assert</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span> <span class="o">==</span> <span class="n">n</span>
</code></pre></div></div>

<p>With the prime factors recovered, the decryption is trivial:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">phi</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">))</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
<span class="c1"># ictf{p-1_g0es_aB$olU7eLy_w1lD!!!}
</span></code></pre></div></div>

<h5 id="solvepy">solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">gens</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">151510886600487624888537926759375027338192556324330182365859112926770109752858284462159488504727238764120612593911292154858008775463001345641311051184326218974685701057787672193003745574697137968457609530135969033403360561333863943223407215732526198691453110628598401583407984162075630768455052482583101773637</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">74468088842131664480394073891613024559473817230309311952320910922177130990996003196602702376336093457990873018154873841543712071422931358036924937335888815556064840522100618318507080665149514719351519909821468981883880543654015414713368018500970500498936910817336501949914675483148862843329341461828563728789</span>
<span class="n">f</span> <span class="o">=</span> <span class="o">-</span><span class="n">x</span><span class="o">^</span><span class="mi">136</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">135</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">134</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">132</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">130</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">128</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">127</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">126</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">125</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">124</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">123</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">122</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">121</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">120</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">119</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">118</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">117</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">116</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">114</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">112</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">110</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">109</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">108</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">107</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">106</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">104</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">103</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">102</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">101</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">100</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">99</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">98</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">97</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">96</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">95</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">94</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">93</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">91</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">90</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">89</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">88</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">86</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">85</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">84</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">83</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">82</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">79</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">76</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">75</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">74</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">71</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">70</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">67</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">66</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">65</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">63</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">61</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">59</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">58</span> <span class="o">+</span> <span class="mi">6</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">56</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">55</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">54</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">53</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">52</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">51</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">50</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">49</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">47</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">46</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">45</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">44</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">43</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">42</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">40</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">39</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">38</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">37</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">36</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">35</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">34</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">33</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">32</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">31</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">30</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">29</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">28</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">27</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">26</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">25</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">23</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">22</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">21</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">20</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">19</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">17</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">16</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">15</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">14</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">13</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">12</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">11</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">8</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">7</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">2</span>
<span class="n">w</span> <span class="o">=</span> <span class="mi">86258923706084556733053644452456806418792871483898871193707132372143291757396867798433017660985422614532352743658877188445517898648519256573663299464811234251773841741466280567326570167017786562044635756348763128567054349991798640926148221279889174229551074668002853442182664523748992260830782387602048836221</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">w</span><span class="o">*</span><span class="mi">2</span><span class="o">^</span><span class="mi">12</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">phi</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">))</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Fermat&apos;s Little Theorem" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Cover Yourself in Oil (UMDCTF 2025) (Coming soon)</title><link href="http://localhost:4000/cover-yourself-in-oil/" rel="alternate" type="text/html" title="Cover Yourself in Oil (UMDCTF 2025) (Coming soon)" /><published>2025-04-28T12:00:00+02:00</published><updated>2025-04-28T12:00:00+02:00</updated><id>http://localhost:4000/cover-yourself-in-oil</id><content type="html" xml:base="http://localhost:4000/cover-yourself-in-oil/"><![CDATA[<p>Coming Soon™</p>

<h5 id="solvepy">solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">ast</span>

<span class="n">F</span>        <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="mi">127</span><span class="p">)</span>
<span class="n">n</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">l</span>  <span class="o">=</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">6</span>
<span class="n">N</span>        <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="n">v</span>          <span class="c1"># 168
</span><span class="n">G</span>        <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="n">v</span><span class="p">)</span><span class="o">//</span><span class="n">l</span>       <span class="c1"># 28 blocks
</span><span class="n">pow2</span>     <span class="o">=</span> <span class="p">[</span><span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">k</span><span class="p">,</span><span class="mi">127</span><span class="p">)</span> <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l</span><span class="p">)]</span>

<span class="c1"># read the compressed key
</span><span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"public_key.txt"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">pk_raw</span> <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">())</span>
<span class="n">C</span> <span class="o">=</span> <span class="p">[[</span><span class="n">vector</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">col</span><span class="p">)</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">pk_raw</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">sign</span><span class="p">(</span><span class="n">target</span><span class="p">):</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="c1"># 1) choose a non-zero vector
</span>        <span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">F</span><span class="p">.</span><span class="n">random_element</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">G</span><span class="p">)]</span>
        <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="n">si</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">si</span> <span class="ow">in</span> <span class="n">s</span><span class="p">):</span>
            <span class="k">continue</span>

        <span class="n">rows</span><span class="p">,</span> <span class="n">rhs</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[]</span>

        <span class="c1"># 2) 48 linearised quadratic equations
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">coeff</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">g</span><span class="p">]</span><span class="o">*</span><span class="n">C</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">g</span><span class="p">][</span><span class="n">k</span><span class="p">]</span> <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">G</span><span class="p">))</span>  <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">N</span><span class="p">)]</span>
            <span class="n">rows</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">coeff</span><span class="p">)</span>
            <span class="n">rhs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="n">target</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span>

        <span class="c1"># 3) 28 block-sum equations
</span>        <span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">G</span><span class="p">):</span>
            <span class="n">coeff</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">N</span>
            <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">l</span><span class="p">):</span>
                <span class="n">coeff</span><span class="p">[</span><span class="n">g</span><span class="o">*</span><span class="n">l</span><span class="o">+</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">pow2</span><span class="p">[</span><span class="n">k</span><span class="p">]</span>
            <span class="n">rows</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">coeff</span><span class="p">)</span>
            <span class="n">rhs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">s</span><span class="p">[</span><span class="n">g</span><span class="p">])</span>

        <span class="n">A</span>   <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">rows</span><span class="p">)</span>
        <span class="n">b</span>   <span class="o">=</span> <span class="n">vector</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">rhs</span><span class="p">)</span>

        <span class="n">x</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">solve_right</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>   
        <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">x</span><span class="p">))</span>

<span class="c1"># Message to sign
</span><span class="n">target</span> <span class="o">=</span> <span class="p">[</span><span class="mi">48</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">80</span><span class="p">]</span>

<span class="n">sig</span> <span class="o">=</span> <span class="n">sign</span><span class="p">(</span><span class="n">target</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">sig</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proof of work:
curl -sSfL https://pwn.red/pow | sh -s s.AAA6mA==.GzBfBERO5SxgYlEG0+exjA==
solution: s.OxRwISyqf5aWf9fttd+fnu6tQbwqUkW4gIVbUbWxsSB2M5b90Z1cQeS8yaboeBb2I6sID1g76/hZfCLvV6YLSRu0AYMyIBHRZ0au+whOBs3qtMCYGO50KdmLfix6rv1HAbsyTlVayab9wi2nPrYeYguC4lyOGmcp0IpEaX6vnVWLT13QZs9OAiNModubUv0F34R1CHK0rJcQITUSF47Ssg==
The message to sign is [48, 124, 82, 23, 117, 80, 75, 101, 118, 16, 24, 91, 0, 87, 17, 112, 68, 2, 119, 48, 49, 89, 115, 112, 42, 122, 116, 52, 61, 67, 69, 66, 63, 110, 83, 85, 47, 22, 92, 117, 98, 16, 44, 63, 108, 114, 11, 80]
Input your signature in the form x1, x2, ..., x168
125, 98, 38, 88, 23, 112, 0, 69, 8, 90, 7, 95, 16, 119, 112, 110, 80, 3, 69, 72, 42, 3, 92, 119, 14, 35, 109, 38, 98, 118, 60, 105, 73, 117, 35, 19, 105, 20, 108, 26, 89, 29, 112, 114, 70, 53, 10, 67, 75, 36, 26, 65, 107, 39, 69, 61, 54, 49, 0, 0, 48, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 98, 0, 0, 0, 0, 0, 126, 0, 0, 0, 0, 0, 49, 0, 0, 0, 0, 0, 87, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 122, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 117, 0, 0, 0, 0, 0, 94, 0, 0, 0, 0, 0, 113, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0
UMDCTF{s0_much_0il_that_USA_1s_try1ng_t0_1nvad3}
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="UOV" /><summary type="html"><![CDATA[Coming Soon™]]></summary></entry><entry><title type="html">Prime Sponsorship (UMDCTF 2025) (Coming soon)</title><link href="http://localhost:4000/prime-sponsorship/" rel="alternate" type="text/html" title="Prime Sponsorship (UMDCTF 2025) (Coming soon)" /><published>2025-04-28T12:00:00+02:00</published><updated>2025-04-28T12:00:00+02:00</updated><id>http://localhost:4000/prime-sponsorship</id><content type="html" xml:base="http://localhost:4000/prime-sponsorship/"><![CDATA[<p>Coming Soon™</p>

<h5 id="solvepy">solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p1</span> <span class="o">=</span> <span class="mi">211</span>
<span class="n">p2</span> <span class="o">=</span> <span class="mi">223</span>
<span class="n">q</span> <span class="o">=</span> <span class="mi">1511</span>     
<span class="n">pk1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1475</span><span class="p">,</span> <span class="mi">724</span><span class="p">,</span> <span class="mi">857</span><span class="p">,</span> <span class="mi">322</span><span class="p">,</span> <span class="mi">1405</span><span class="p">,</span> <span class="mi">898</span><span class="p">,</span> <span class="mi">1406</span><span class="p">,</span> <span class="mi">1299</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">745</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">1382</span><span class="p">,</span> <span class="mi">196</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">882</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">774</span><span class="p">,</span> <span class="mi">293</span><span class="p">,</span> <span class="mi">135</span><span class="p">,</span> <span class="mi">961</span><span class="p">,</span> <span class="mi">1431</span><span class="p">,</span> <span class="mi">675</span><span class="p">,</span> <span class="mi">1246</span><span class="p">,</span> <span class="mi">940</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">1286</span><span class="p">,</span> <span class="mi">1065</span><span class="p">,</span> <span class="mi">586</span><span class="p">,</span> <span class="mi">1497</span><span class="p">,</span> <span class="mi">702</span><span class="p">,</span> <span class="mi">1213</span><span class="p">,</span> <span class="mi">900</span><span class="p">,</span> <span class="mi">246</span><span class="p">,</span> <span class="mi">282</span><span class="p">,</span> <span class="mi">1080</span><span class="p">,</span> <span class="mi">916</span><span class="p">,</span> <span class="mi">532</span><span class="p">,</span> <span class="mi">369</span><span class="p">,</span> <span class="mi">708</span><span class="p">,</span> <span class="mi">257</span><span class="p">,</span> <span class="mi">1345</span><span class="p">,</span> <span class="mi">469</span><span class="p">,</span> <span class="mi">395</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">691</span><span class="p">,</span> <span class="mi">1216</span><span class="p">,</span> <span class="mi">819</span><span class="p">,</span> <span class="mi">566</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">1500</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">1428</span><span class="p">,</span> <span class="mi">1104</span><span class="p">,</span> <span class="mi">262</span><span class="p">,</span> <span class="mi">537</span><span class="p">,</span> <span class="mi">253</span><span class="p">,</span> <span class="mi">1163</span><span class="p">,</span> <span class="mi">202</span><span class="p">,</span> <span class="mi">358</span><span class="p">,</span> <span class="mi">620</span><span class="p">,</span> <span class="mi">1304</span><span class="p">,</span> <span class="mi">321</span><span class="p">,</span> <span class="mi">369</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">451</span><span class="p">,</span> <span class="mi">1122</span><span class="p">,</span> <span class="mi">624</span><span class="p">,</span> <span class="mi">441</span><span class="p">,</span> <span class="mi">1489</span><span class="p">,</span> <span class="mi">499</span><span class="p">,</span> <span class="mi">590</span><span class="p">,</span> <span class="mi">524</span><span class="p">,</span> <span class="mi">446</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">435</span><span class="p">,</span> <span class="mi">1493</span><span class="p">,</span> <span class="mi">912</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">987</span><span class="p">,</span> <span class="mi">1076</span><span class="p">,</span> <span class="mi">439</span><span class="p">,</span> <span class="mi">829</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">177</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">491</span><span class="p">,</span> <span class="mi">644</span><span class="p">,</span> <span class="mi">894</span><span class="p">,</span> <span class="mi">732</span><span class="p">,</span> <span class="mi">503</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">1365</span><span class="p">,</span> <span class="mi">1359</span><span class="p">,</span> <span class="mi">636</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">207</span><span class="p">,</span> <span class="mi">175</span><span class="p">,</span> <span class="mi">861</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">1087</span><span class="p">,</span> <span class="mi">945</span><span class="p">,</span> <span class="mi">582</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">778</span><span class="p">,</span> <span class="mi">1419</span><span class="p">,</span> <span class="mi">1362</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">1208</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">1189</span><span class="p">,</span> <span class="mi">680</span><span class="p">,</span> <span class="mi">419</span><span class="p">,</span> <span class="mi">297</span><span class="p">,</span> <span class="mi">1414</span><span class="p">,</span> <span class="mi">768</span><span class="p">,</span> <span class="mi">1506</span><span class="p">,</span> <span class="mi">1263</span><span class="p">,</span> <span class="mi">948</span><span class="p">,</span> <span class="mi">1055</span><span class="p">,</span> <span class="mi">1007</span><span class="p">,</span> <span class="mi">385</span><span class="p">,</span> <span class="mi">837</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span> <span class="mi">1058</span><span class="p">,</span> <span class="mi">1007</span><span class="p">,</span> <span class="mi">678</span><span class="p">,</span> <span class="mi">1007</span><span class="p">,</span> <span class="mi">696</span><span class="p">,</span> <span class="mi">1033</span><span class="p">,</span> <span class="mi">373</span><span class="p">,</span> <span class="mi">1240</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">806</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">322</span><span class="p">,</span> <span class="mi">434</span><span class="p">,</span> <span class="mi">651</span><span class="p">,</span> <span class="mi">152</span><span class="p">,</span> <span class="mi">1180</span><span class="p">,</span> <span class="mi">911</span><span class="p">,</span> <span class="mi">868</span><span class="p">,</span> <span class="mi">1241</span><span class="p">,</span> <span class="mi">1091</span><span class="p">,</span> <span class="mi">1469</span><span class="p">,</span> <span class="mi">440</span><span class="p">,</span> <span class="mi">204</span><span class="p">,</span> <span class="mi">719</span><span class="p">,</span> <span class="mi">1251</span><span class="p">,</span> <span class="mi">1090</span><span class="p">,</span> <span class="mi">585</span><span class="p">,</span> <span class="mi">998</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="mi">1057</span><span class="p">,</span> <span class="mi">1383</span><span class="p">,</span> <span class="mi">1026</span><span class="p">,</span> <span class="mi">1349</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">1405</span><span class="p">,</span> <span class="mi">1378</span><span class="p">,</span> <span class="mi">156</span><span class="p">,</span> <span class="mi">1473</span><span class="p">,</span> <span class="mi">413</span><span class="p">,</span> <span class="mi">1402</span><span class="p">,</span> <span class="mi">1481</span><span class="p">,</span> <span class="mi">1488</span><span class="p">,</span> <span class="mi">680</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">516</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">1066</span><span class="p">,</span> <span class="mi">1142</span><span class="p">,</span> <span class="mi">784</span><span class="p">,</span> <span class="mi">968</span><span class="p">,</span> <span class="mi">1120</span><span class="p">,</span> <span class="mi">987</span><span class="p">,</span> <span class="mi">676</span><span class="p">,</span> <span class="mi">1315</span><span class="p">,</span> <span class="mi">314</span><span class="p">,</span> <span class="mi">1011</span><span class="p">,</span> <span class="mi">462</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">435</span><span class="p">,</span> <span class="mi">130</span><span class="p">,</span> <span class="mi">1486</span><span class="p">,</span> <span class="mi">331</span><span class="p">,</span> <span class="mi">706</span><span class="p">,</span> <span class="mi">509</span><span class="p">,</span> <span class="mi">1119</span><span class="p">,</span> <span class="mi">1475</span><span class="p">,</span> <span class="mi">235</span><span class="p">,</span> <span class="mi">600</span><span class="p">,</span> <span class="mi">1143</span><span class="p">,</span> <span class="mi">460</span><span class="p">,</span> <span class="mi">874</span><span class="p">,</span> <span class="mi">274</span><span class="p">,</span> <span class="mi">351</span><span class="p">,</span> <span class="mi">1184</span><span class="p">,</span> <span class="mi">840</span><span class="p">,</span> <span class="mi">974</span><span class="p">,</span> <span class="mi">1094</span><span class="p">,</span> <span class="mi">259</span><span class="p">,</span> <span class="mi">1090</span><span class="p">,</span> <span class="mi">1419</span><span class="p">,</span> <span class="mi">872</span><span class="p">,</span> <span class="mi">639</span><span class="p">,</span> <span class="mi">1112</span><span class="p">,</span> <span class="mi">1313</span><span class="p">,</span> <span class="mi">263</span><span class="p">,</span> <span class="mi">1134</span><span class="p">,</span> <span class="mi">1156</span><span class="p">]</span>
<span class="n">pk2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1045</span><span class="p">,</span> <span class="mi">277</span><span class="p">,</span> <span class="mi">193</span><span class="p">,</span> <span class="mi">978</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">1224</span><span class="p">,</span> <span class="mi">1109</span><span class="p">,</span> <span class="mi">513</span><span class="p">,</span> <span class="mi">1351</span><span class="p">,</span> <span class="mi">799</span><span class="p">,</span> <span class="mi">454</span><span class="p">,</span> <span class="mi">325</span><span class="p">,</span> <span class="mi">163</span><span class="p">,</span> <span class="mi">493</span><span class="p">,</span> <span class="mi">392</span><span class="p">,</span> <span class="mi">469</span><span class="p">,</span> <span class="mi">549</span><span class="p">,</span> <span class="mi">315</span><span class="p">,</span> <span class="mi">1110</span><span class="p">,</span> <span class="mi">759</span><span class="p">,</span> <span class="mi">359</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">541</span><span class="p">,</span> <span class="mi">744</span><span class="p">,</span> <span class="mi">165</span><span class="p">,</span> <span class="mi">1256</span><span class="p">,</span> <span class="mi">1258</span><span class="p">,</span> <span class="mi">1414</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">230</span><span class="p">,</span> <span class="mi">947</span><span class="p">,</span> <span class="mi">1449</span><span class="p">,</span> <span class="mi">1439</span><span class="p">,</span> <span class="mi">400</span><span class="p">,</span> <span class="mi">918</span><span class="p">,</span> <span class="mi">838</span><span class="p">,</span> <span class="mi">168</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">1325</span><span class="p">,</span> <span class="mi">702</span><span class="p">,</span> <span class="mi">610</span><span class="p">,</span> <span class="mi">1391</span><span class="p">,</span> <span class="mi">164</span><span class="p">,</span> <span class="mi">602</span><span class="p">,</span> <span class="mi">176</span><span class="p">,</span> <span class="mi">309</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">965</span><span class="p">,</span> <span class="mi">1159</span><span class="p">,</span> <span class="mi">1016</span><span class="p">,</span> <span class="mi">231</span><span class="p">,</span> <span class="mi">1278</span><span class="p">,</span> <span class="mi">143</span><span class="p">,</span> <span class="mi">1271</span><span class="p">,</span> <span class="mi">1383</span><span class="p">,</span> <span class="mi">1014</span><span class="p">,</span> <span class="mi">567</span><span class="p">,</span> <span class="mi">290</span><span class="p">,</span> <span class="mi">1263</span><span class="p">,</span> <span class="mi">879</span><span class="p">,</span> <span class="mi">701</span><span class="p">,</span> <span class="mi">1310</span><span class="p">,</span> <span class="mi">443</span><span class="p">,</span> <span class="mi">713</span><span class="p">,</span> <span class="mi">1456</span><span class="p">,</span> <span class="mi">236</span><span class="p">,</span> <span class="mi">317</span><span class="p">,</span> <span class="mi">1056</span><span class="p">,</span> <span class="mi">1159</span><span class="p">,</span> <span class="mi">1181</span><span class="p">,</span> <span class="mi">1218</span><span class="p">,</span> <span class="mi">866</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">323</span><span class="p">,</span> <span class="mi">435</span><span class="p">,</span> <span class="mi">851</span><span class="p">,</span> <span class="mi">1216</span><span class="p">,</span> <span class="mi">1502</span><span class="p">,</span> <span class="mi">376</span><span class="p">,</span> <span class="mi">1127</span><span class="p">,</span> <span class="mi">1454</span><span class="p">,</span> <span class="mi">1281</span><span class="p">,</span> <span class="mi">1158</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">1161</span><span class="p">,</span> <span class="mi">1024</span><span class="p">,</span> <span class="mi">877</span><span class="p">,</span> <span class="mi">283</span><span class="p">,</span> <span class="mi">399</span><span class="p">,</span> <span class="mi">196</span><span class="p">,</span> <span class="mi">659</span><span class="p">,</span> <span class="mi">939</span><span class="p">,</span> <span class="mi">307</span><span class="p">,</span> <span class="mi">529</span><span class="p">,</span> <span class="mi">176</span><span class="p">,</span> <span class="mi">1458</span><span class="p">,</span> <span class="mi">484</span><span class="p">,</span> <span class="mi">372</span><span class="p">,</span> <span class="mi">384</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">180</span><span class="p">,</span> <span class="mi">955</span><span class="p">,</span> <span class="mi">695</span><span class="p">,</span> <span class="mi">502</span><span class="p">,</span> <span class="mi">1456</span><span class="p">,</span> <span class="mi">945</span><span class="p">,</span> <span class="mi">914</span><span class="p">,</span> <span class="mi">389</span><span class="p">,</span> <span class="mi">249</span><span class="p">,</span> <span class="mi">1013</span><span class="p">,</span> <span class="mi">560</span><span class="p">,</span> <span class="mi">1483</span><span class="p">,</span> <span class="mi">769</span><span class="p">,</span> <span class="mi">1089</span><span class="p">,</span> <span class="mi">264</span><span class="p">,</span> <span class="mi">753</span><span class="p">,</span> <span class="mi">1047</span><span class="p">,</span> <span class="mi">163</span><span class="p">,</span> <span class="mi">1169</span><span class="p">,</span> <span class="mi">567</span><span class="p">,</span> <span class="mi">393</span><span class="p">,</span> <span class="mi">924</span><span class="p">,</span> <span class="mi">1473</span><span class="p">,</span> <span class="mi">402</span><span class="p">,</span> <span class="mi">519</span><span class="p">,</span> <span class="mi">963</span><span class="p">,</span> <span class="mi">1002</span><span class="p">,</span> <span class="mi">1354</span><span class="p">,</span> <span class="mi">1248</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">1447</span><span class="p">,</span> <span class="mi">320</span><span class="p">,</span> <span class="mi">298</span><span class="p">,</span> <span class="mi">791</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">889</span><span class="p">,</span> <span class="mi">1266</span><span class="p">,</span> <span class="mi">686</span><span class="p">,</span> <span class="mi">139</span><span class="p">,</span> <span class="mi">1417</span><span class="p">,</span> <span class="mi">960</span><span class="p">,</span> <span class="mi">963</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">591</span><span class="p">,</span> <span class="mi">689</span><span class="p">,</span> <span class="mi">1437</span><span class="p">,</span> <span class="mi">450</span><span class="p">,</span> <span class="mi">589</span><span class="p">,</span> <span class="mi">485</span><span class="p">,</span> <span class="mi">875</span><span class="p">,</span> <span class="mi">1296</span><span class="p">,</span> <span class="mi">1482</span><span class="p">,</span> <span class="mi">350</span><span class="p">,</span> <span class="mi">323</span><span class="p">,</span> <span class="mi">1104</span><span class="p">,</span> <span class="mi">322</span><span class="p">,</span> <span class="mi">458</span><span class="p">,</span> <span class="mi">1079</span><span class="p">,</span> <span class="mi">719</span><span class="p">,</span> <span class="mi">330</span><span class="p">,</span> <span class="mi">578</span><span class="p">,</span> <span class="mi">513</span><span class="p">,</span> <span class="mi">128</span><span class="p">,</span> <span class="mi">1322</span><span class="p">,</span> <span class="mi">886</span><span class="p">,</span> <span class="mi">1096</span><span class="p">,</span> <span class="mi">1074</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">882</span><span class="p">,</span> <span class="mi">428</span><span class="p">,</span> <span class="mi">608</span><span class="p">,</span> <span class="mi">1250</span><span class="p">,</span> <span class="mi">1497</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">785</span><span class="p">,</span> <span class="mi">1408</span><span class="p">,</span> <span class="mi">846</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">1043</span><span class="p">,</span> <span class="mi">619</span><span class="p">,</span> <span class="mi">465</span><span class="p">,</span> <span class="mi">1249</span><span class="p">,</span> <span class="mi">942</span><span class="p">,</span> <span class="mi">1264</span><span class="p">,</span> <span class="mi">1219</span><span class="p">,</span> <span class="mi">843</span><span class="p">,</span> <span class="mi">459</span><span class="p">,</span> <span class="mi">1486</span><span class="p">,</span> <span class="mi">236</span><span class="p">,</span> <span class="mi">1238</span><span class="p">,</span> <span class="mi">442</span><span class="p">,</span> <span class="mi">488</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">153</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">457</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">251</span><span class="p">,</span> <span class="mi">445</span><span class="p">,</span> <span class="mi">580</span><span class="p">,</span> <span class="mi">1276</span><span class="p">,</span> <span class="mi">581</span><span class="p">,</span> <span class="mi">1188</span><span class="p">,</span> <span class="mi">1180</span><span class="p">,</span> <span class="mi">1345</span><span class="p">,</span> <span class="mi">1045</span><span class="p">,</span> <span class="mi">458</span><span class="p">,</span> <span class="mi">430</span><span class="p">,</span> <span class="mi">580</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">871</span><span class="p">,</span> <span class="mi">766</span><span class="p">,</span> <span class="mi">1164</span><span class="p">,</span> <span class="mi">851</span><span class="p">,</span> <span class="mi">1182</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">1183</span><span class="p">]</span>
<span class="n">ct</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1017</span><span class="p">,</span> <span class="mi">1506</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">1458</span><span class="p">,</span> <span class="mi">582</span><span class="p">,</span> <span class="mi">1491</span><span class="p">,</span> <span class="mi">1383</span><span class="p">,</span> <span class="mi">1107</span><span class="p">,</span> <span class="mi">438</span><span class="p">,</span> <span class="mi">1263</span><span class="p">,</span> <span class="mi">825</span><span class="p">,</span> <span class="mi">1299</span><span class="p">,</span> <span class="mi">387</span><span class="p">,</span> <span class="mi">717</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">1251</span><span class="p">,</span> <span class="mi">177</span><span class="p">,</span> <span class="mi">1338</span><span class="p">,</span> <span class="mi">192</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">141</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">459</span><span class="p">,</span> <span class="mi">669</span><span class="p">,</span> <span class="mi">381</span><span class="p">,</span> <span class="mi">369</span><span class="p">,</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">459</span><span class="p">,</span> <span class="mi">759</span><span class="p">,</span> <span class="mi">1215</span><span class="p">,</span> <span class="mi">1440</span><span class="p">,</span> <span class="mi">612</span><span class="p">,</span> <span class="mi">1305</span><span class="p">,</span> <span class="mi">1152</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">321</span><span class="p">,</span> <span class="mi">1227</span><span class="p">,</span> <span class="mi">918</span><span class="p">,</span> <span class="mi">540</span><span class="p">,</span> <span class="mi">780</span><span class="p">,</span> <span class="mi">873</span><span class="p">,</span> <span class="mi">999</span><span class="p">,</span> <span class="mi">876</span><span class="p">,</span> <span class="mi">228</span><span class="p">,</span> <span class="mi">1041</span><span class="p">,</span> <span class="mi">852</span><span class="p">,</span> <span class="mi">1188</span><span class="p">,</span> <span class="mi">348</span><span class="p">,</span> <span class="mi">1146</span><span class="p">,</span> <span class="mi">1257</span><span class="p">,</span> <span class="mi">975</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">1068</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span> <span class="mi">1227</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">834</span><span class="p">,</span> <span class="mi">1227</span><span class="p">,</span> <span class="mi">540</span><span class="p">,</span> <span class="mi">168</span><span class="p">,</span> <span class="mi">690</span><span class="p">,</span> <span class="mi">1107</span><span class="p">,</span> <span class="mi">561</span><span class="p">,</span> <span class="mi">492</span><span class="p">,</span> <span class="mi">1107</span><span class="p">,</span> <span class="mi">489</span><span class="p">,</span> <span class="mi">915</span><span class="p">,</span> <span class="mi">1191</span><span class="p">,</span> <span class="mi">129</span><span class="p">,</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">249</span><span class="p">,</span> <span class="mi">186</span><span class="p">,</span> <span class="mi">519</span><span class="p">,</span> <span class="mi">1437</span><span class="p">,</span> <span class="mi">1485</span><span class="p">,</span> <span class="mi">1332</span><span class="p">,</span> <span class="mi">852</span><span class="p">,</span> <span class="mi">288</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">1092</span><span class="p">,</span> <span class="mi">291</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">855</span><span class="p">,</span> <span class="mi">810</span><span class="p">,</span> <span class="mi">390</span><span class="p">,</span> <span class="mi">273</span><span class="p">,</span> <span class="mi">327</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span> <span class="mi">489</span><span class="p">,</span> <span class="mi">735</span><span class="p">,</span> <span class="mi">1476</span><span class="p">,</span> <span class="mi">549</span><span class="p">,</span> <span class="mi">645</span><span class="p">,</span> <span class="mi">642</span><span class="p">,</span> <span class="mi">1434</span><span class="p">,</span> <span class="mi">768</span><span class="p">,</span> <span class="mi">789</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">1095</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">1458</span><span class="p">,</span> <span class="mi">1233</span><span class="p">,</span> <span class="mi">846</span><span class="p">,</span> <span class="mi">891</span><span class="p">,</span> <span class="mi">594</span><span class="p">,</span> <span class="mi">447</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">306</span><span class="p">,</span> <span class="mi">339</span><span class="p">,</span> <span class="mi">1179</span><span class="p">,</span> <span class="mi">546</span><span class="p">,</span> <span class="mi">1377</span><span class="p">,</span> <span class="mi">237</span><span class="p">,</span> <span class="mi">444</span><span class="p">,</span> <span class="mi">1242</span><span class="p">,</span> <span class="mi">1470</span><span class="p">,</span> <span class="mi">1101</span><span class="p">,</span> <span class="mi">1200</span><span class="p">,</span> <span class="mi">345</span><span class="p">,</span> <span class="mi">1449</span><span class="p">,</span> <span class="mi">330</span><span class="p">,</span> <span class="mi">663</span><span class="p">,</span> <span class="mi">282</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">288</span><span class="p">,</span> <span class="mi">354</span><span class="p">,</span> <span class="mi">657</span><span class="p">,</span> <span class="mi">447</span><span class="p">,</span> <span class="mi">384</span><span class="p">,</span> <span class="mi">1200</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">1332</span><span class="p">,</span> <span class="mi">138</span><span class="p">,</span> <span class="mi">1242</span><span class="p">,</span> <span class="mi">915</span><span class="p">,</span> <span class="mi">729</span><span class="p">,</span> <span class="mi">1320</span><span class="p">,</span> <span class="mi">702</span><span class="p">,</span> <span class="mi">876</span><span class="p">,</span> <span class="mi">519</span><span class="p">,</span> <span class="mi">156</span><span class="p">,</span> <span class="mi">1179</span><span class="p">,</span> <span class="mi">993</span><span class="p">,</span> <span class="mi">378</span><span class="p">,</span> <span class="mi">1044</span><span class="p">,</span> <span class="mi">816</span><span class="p">,</span> <span class="mi">243</span><span class="p">,</span> <span class="mi">1158</span><span class="p">,</span> <span class="mi">630</span><span class="p">,</span> <span class="mi">429</span><span class="p">,</span> <span class="mi">1416</span><span class="p">,</span> <span class="mi">516</span><span class="p">,</span> <span class="mi">720</span><span class="p">,</span> <span class="mi">852</span><span class="p">,</span> <span class="mi">1098</span><span class="p">,</span> <span class="mi">264</span><span class="p">,</span> <span class="mi">855</span><span class="p">,</span> <span class="mi">1434</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">1032</span><span class="p">,</span> <span class="mi">822</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">669</span><span class="p">,</span> <span class="mi">681</span><span class="p">,</span> <span class="mi">465</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">972</span><span class="p">,</span> <span class="mi">873</span><span class="p">,</span> <span class="mi">837</span><span class="p">,</span> <span class="mi">687</span><span class="p">,</span> <span class="mi">1173</span><span class="p">,</span> <span class="mi">516</span><span class="p">,</span> <span class="mi">864</span><span class="p">,</span> <span class="mi">906</span><span class="p">,</span> <span class="mi">387</span><span class="p">,</span> <span class="mi">981</span><span class="p">,</span> <span class="mi">999</span><span class="p">,</span> <span class="mi">1362</span><span class="p">,</span> <span class="mi">393</span><span class="p">,</span> <span class="mi">1347</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">528</span><span class="p">,</span> <span class="mi">738</span><span class="p">,</span> <span class="mi">1353</span><span class="p">,</span> <span class="mi">630</span><span class="p">,</span> <span class="mi">801</span><span class="p">,</span> <span class="mi">144</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">1506</span><span class="p">,</span> <span class="mi">405</span><span class="p">,</span> <span class="mi">573</span><span class="p">,</span> <span class="mi">1008</span><span class="p">,</span> <span class="mi">246</span><span class="p">,</span> <span class="mi">1020</span><span class="p">,</span> <span class="mi">888</span><span class="p">,</span> <span class="mi">1386</span><span class="p">,</span> <span class="mi">1458</span><span class="p">,</span> <span class="mi">1482</span><span class="p">,</span> <span class="mi">195</span><span class="p">,</span> <span class="mi">1437</span><span class="p">,</span> <span class="mi">1164</span><span class="p">,</span> <span class="mi">1464</span><span class="p">,</span> <span class="mi">270</span><span class="p">,</span> <span class="mi">1509</span><span class="p">,</span> <span class="mi">1071</span><span class="p">,</span> <span class="mi">987</span><span class="p">]</span>

<span class="n">Fq</span>        <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">q</span><span class="p">)</span>
<span class="n">Rq</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span>    <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">Fq</span><span class="p">)</span>        
<span class="n">R3</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x3</span><span class="o">&gt;</span>   <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">GF</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>      
<span class="n">modP</span>      <span class="o">=</span> <span class="n">x3</span><span class="o">^</span><span class="n">p1</span> <span class="o">-</span> <span class="n">x3</span> <span class="o">-</span> <span class="mi">1</span>            

<span class="k">def</span> <span class="nf">mul_matrix</span><span class="p">(</span><span class="n">pk</span><span class="p">,</span> <span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">):</span>
    <span class="n">h</span>  <span class="o">=</span> <span class="mi">3</span><span class="o">*</span><span class="n">Rq</span><span class="p">(</span><span class="n">pk</span><span class="p">)</span>       
    <span class="n">mp</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="n">rows</span> <span class="o">-</span> <span class="n">x</span> <span class="o">-</span> <span class="mi">1</span>   <span class="c1"># modulus x^rows − x − 1
</span>    <span class="k">return</span> <span class="n">matrix</span><span class="p">(</span><span class="n">Fq</span><span class="p">,</span> <span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">,</span> <span class="k">lambda</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">:</span> <span class="p">((</span><span class="n">h</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="n">j</span><span class="p">)</span> <span class="o">%</span> <span class="n">mp</span><span class="p">)[</span><span class="n">i</span><span class="p">])</span>   <span class="c1"># coeff of x^i
</span>
<span class="n">M1</span> <span class="o">=</span> <span class="n">mul_matrix</span><span class="p">(</span><span class="n">pk1</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">p1</span><span class="p">)</span>               <span class="c1"># 211×211
</span><span class="n">M2</span> <span class="o">=</span> <span class="n">mul_matrix</span><span class="p">(</span><span class="n">pk2</span><span class="p">,</span> <span class="n">p2</span><span class="p">,</span> <span class="n">p1</span><span class="p">)</span>               <span class="c1"># 223×211
</span><span class="n">A</span>  <span class="o">=</span> <span class="p">(</span><span class="n">M2</span><span class="p">[:</span><span class="n">p1</span><span class="p">,</span> <span class="p">:]</span> <span class="o">-</span> <span class="n">M1</span><span class="p">).</span><span class="n">stack</span><span class="p">(</span><span class="n">M2</span><span class="p">[</span><span class="n">p1</span><span class="p">:,</span> <span class="p">:])</span>   <span class="c1"># 223×211
</span><span class="n">ker</span> <span class="o">=</span> <span class="n">A</span><span class="p">.</span><span class="n">right_kernel</span><span class="p">()</span>
<span class="n">basis</span>  <span class="o">=</span> <span class="n">ker</span><span class="p">.</span><span class="n">basis</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>                  

<span class="n">good_f</span> <span class="o">=</span> <span class="bp">None</span>
<span class="n">good_g</span> <span class="o">=</span> <span class="bp">None</span>
<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>                              
    <span class="n">f</span> <span class="o">=</span> <span class="n">basis</span> <span class="o">*</span> <span class="n">t</span>
    <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">lift_centered</span><span class="p">()</span> <span class="ow">in</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">f</span><span class="p">):</span>
        <span class="n">g</span> <span class="o">=</span> <span class="n">M1</span> <span class="o">*</span> <span class="n">f</span> <span class="c1"># g = (3*pk1) f
</span>        <span class="n">g3</span> <span class="o">=</span> <span class="n">R3</span><span class="p">([</span><span class="n">c</span><span class="p">.</span><span class="n">lift_centered</span><span class="p">()</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">g</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">gcd</span><span class="p">(</span><span class="n">g3</span><span class="p">,</span> <span class="n">modP</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>    <span class="c1"># check if g is a unit in R3
</span>            <span class="n">good_f</span> <span class="o">=</span> <span class="n">Rq</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>
            <span class="n">good_g</span> <span class="o">=</span> <span class="n">Rq</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">g</span><span class="p">))</span>
            <span class="k">break</span>

<span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="n">good_f</span><span class="o">*</span><span class="n">Rq</span><span class="p">(</span><span class="n">ct</span><span class="p">)</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="n">p1</span><span class="o">-</span><span class="n">x</span><span class="o">-</span><span class="mi">1</span><span class="p">)).</span><span class="nb">list</span><span class="p">()</span>
<span class="n">e3</span>     <span class="o">=</span> <span class="n">R3</span><span class="p">([</span><span class="n">c</span><span class="p">.</span><span class="n">lift_centered</span><span class="p">()</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">e</span><span class="p">])</span>
<span class="n">g3_inv</span> <span class="o">=</span> <span class="n">R3</span><span class="p">([</span><span class="n">c</span><span class="p">.</span><span class="n">lift_centered</span><span class="p">()</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">good_g</span><span class="p">]).</span><span class="n">inverse_mod</span><span class="p">(</span><span class="n">modP</span><span class="p">)</span>
<span class="n">m</span>      <span class="o">=</span> <span class="p">(</span><span class="n">g3_inv</span> <span class="o">*</span> <span class="n">e3</span><span class="p">)</span> <span class="o">%</span> <span class="n">modP</span>

<span class="n">bits</span>   <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">m</span><span class="p">.</span><span class="nb">list</span><span class="p">())</span> 
<span class="n">flag</span>   <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="n">bits</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="s">"UMDCTF{"</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">+</span> <span class="s">"}"</span><span class="p">)</span>
<span class="c1"># UMDCTF{no_logan_paul_here}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="NTRU" /><summary type="html"><![CDATA[Coming Soon™]]></summary></entry><entry><title type="html">Square Up (UMDCTF 2025)</title><link href="http://localhost:4000/square-up/" rel="alternate" type="text/html" title="Square Up (UMDCTF 2025)" /><published>2025-04-28T12:00:00+02:00</published><updated>2025-04-28T12:00:00+02:00</updated><id>http://localhost:4000/square-up</id><content type="html" xml:base="http://localhost:4000/square-up/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getPrime</span><span class="p">,</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">long_to_bytes</span>
<span class="kn">from</span> <span class="nn">os</span> <span class="kn">import</span> <span class="n">urandom</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">flag</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">q</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">while</span> <span class="n">p</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">:</span> <span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">384</span><span class="p">)</span>
<span class="k">while</span> <span class="n">q</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">:</span> <span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">384</span><span class="p">)</span>

<span class="n">N</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">N</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
        <span class="n">lp</span> <span class="o">=</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="n">lq</span> <span class="o">=</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">q</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">m</span> <span class="o">*</span> <span class="n">m</span> <span class="o">%</span> <span class="n">N</span><span class="p">,</span> <span class="n">lp</span><span class="p">,</span> <span class="n">lq</span>

<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">lp</span><span class="p">,</span> <span class="n">lq</span><span class="p">):</span>
        <span class="n">yq</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
        <span class="n">yp</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">yq</span> <span class="o">*</span> <span class="n">q</span><span class="p">)</span> <span class="o">//</span> <span class="n">p</span>

        <span class="n">mp</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
        <span class="n">mq</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">mp</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">-</span> <span class="n">lp</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">mp</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-</span> <span class="n">mp</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">mq</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">-</span> <span class="n">lq</span><span class="p">)</span> <span class="o">%</span> <span class="n">q</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">mq</span> <span class="o">=</span> <span class="n">q</span> <span class="o">-</span> <span class="n">mp</span>

        <span class="k">return</span> <span class="p">(</span><span class="n">yp</span> <span class="o">*</span> <span class="n">p</span> <span class="o">*</span> <span class="n">mq</span> <span class="o">+</span> <span class="n">yq</span> <span class="o">*</span> <span class="n">q</span> <span class="o">*</span> <span class="n">mp</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span>


<span class="n">c</span><span class="p">,</span> <span class="n">lp</span><span class="p">,</span> <span class="n">lq</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">lp</span><span class="p">,</span> <span class="n">lq</span><span class="p">)</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="n">decrypt</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">lp</span><span class="p">,</span> <span class="n">lq</span><span class="p">))</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>   
</code></pre></div></div>

<p>as well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>N = 1298690852855676717877172430649235439701166577296380685015744142960768447038281361897617173145966407353660262643273693068083328108519398663073368426744653753236312330497119252304579628565448615356293308415969827357877088267274695333
(c, lp, lq) = (162345251908758036296170413099695514860545515965805244415511843227313118622229046299657295062100889503276740904118647336251473821440423216697485906153356736210597508871299190718706584361947325513349221296586217139380060755033205077, 1, -1)
long_to_bytes(decrypt(c, lp, lq)) = b'\x1bR \xc4\xf0\x8f\xa7l\xa4\xdd\xbf\xf73\xf3\xe9(\xc8Q\xdd\xbd,\x08\xbd\x7f\xafm\x9b\xbf\xa0\xbe\xd4)t\xd4e\xc0,J\xb8H\x93i\xea\xbcy\x9a7AA\xeb]q\xae\x00\xebJ(Y\x8a\xa4B\xdc\t(\x8b\xcef&amp;@b\x91\x06Y~\x88m\xaf\x9bl\\\x12\xf2\x9f\xe1\x1f\x18q\x16\xd8\xb4\x9f$\x88%8\x0f'
</code></pre></div></div>

<p>We are given the modulus $N$, the ciphertext $c$, the legendre symbols $lp$ and $lq$, in addition to a broken plaintext $x$.</p>

<p>The code implements a RSA-like system with public exponent $e=2$:</p>

\[\large c = m^{2} \mod N\]

<p>The legendre symbols are used to distinguish the four square roots of $c \mod N$</p>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>There is a mistake in the implementation of the decryption function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">mp</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">-</span> <span class="n">lp</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">mp</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-</span> <span class="n">mp</span>
<span class="k">if</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">mq</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">-</span> <span class="n">lq</span><span class="p">)</span> <span class="o">%</span> <span class="n">q</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">mq</span> <span class="o">=</span> <span class="n">q</span> <span class="o">-</span> <span class="n">mp</span> <span class="c1"># &lt;-- !!!
</span></code></pre></div></div>

<p>This section essentially checks whether the calculated modular square roots $mp$ and $mq$ match the given legendre symbols $lp$ and $lq$. If the wrong square root is picked, the other square root is picked instead. However, $mq$ is updated to an incorrect value. 
The correct implementation would be to have:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mp</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-</span> <span class="n">mp</span>
<span class="n">mq</span> <span class="o">=</span> <span class="n">q</span> <span class="o">-</span> <span class="n">mq</span> <span class="c1"># &lt;-- use mq instead of mp again
</span></code></pre></div></div>

<p>This mistake means that the decrypted output $x$, recovered via CRT:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span> <span class="p">(</span><span class="n">yp</span> <span class="o">*</span> <span class="n">p</span> <span class="o">*</span> <span class="n">mq</span> <span class="o">+</span> <span class="n">yq</span> <span class="o">*</span> <span class="n">q</span> <span class="o">*</span> <span class="n">mp</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span>
</code></pre></div></div>

<p>doesn’t hold for $x^{2} = c \mod N$. It only holds for $x^{2}=c \mod p$ but not for $q$.</p>

<p>We can use this fact to recover the prime factors like so:</p>

\[\large
\begin{align}
\nonumber x^{2} \equiv c \mod p \\
\nonumber x^{2}- c \equiv 0 \mod p \\
\nonumber N \equiv 0 \mod p \\
\nonumber gcd(x^{2}-c, N) = p
\end{align}\]

<p>With the recovered prime factors, we can reimplement the decryption function with the bug fixed:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">lp</span><span class="p">,</span> <span class="n">lq</span><span class="p">):</span>
        <span class="n">yq</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
        <span class="n">yp</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">yq</span> <span class="o">*</span> <span class="n">q</span><span class="p">)</span> <span class="o">//</span> <span class="n">p</span>

        <span class="n">mp</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
        <span class="n">mq</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">mp</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">-</span> <span class="n">lp</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">mp</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-</span> <span class="n">mp</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">mq</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">-</span> <span class="n">lq</span><span class="p">)</span> <span class="o">%</span> <span class="n">q</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">mq</span> <span class="o">=</span> <span class="n">q</span> <span class="o">-</span> <span class="n">mq</span> <span class="c1"># &lt;- fix bug
</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">yp</span> <span class="o">*</span> <span class="n">p</span> <span class="o">*</span> <span class="n">mq</span> <span class="o">+</span> <span class="n">yq</span> <span class="o">*</span> <span class="n">q</span> <span class="o">*</span> <span class="n">mp</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span>
</code></pre></div></div>

<p>and we can simply decrypt to get the flag!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>UMDCTF{e=3_has_many_attacks_and_e=2_has_its_own_problems...maybe_we_should_try_e=1_next?}
</code></pre></div></div>

<h5 id="solvepy">solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">gcd</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="sa">b</span><span class="s">'</span><span class="se">\x1b</span><span class="s">R </span><span class="se">\xc4\xf0\x8f\xa7</span><span class="s">l</span><span class="se">\xa4\xdd\xbf\xf7</span><span class="s">3</span><span class="se">\xf3\xe9</span><span class="s">(</span><span class="se">\xc8</span><span class="s">Q</span><span class="se">\xdd\xbd</span><span class="s">,</span><span class="se">\x08\xbd\x7f\xaf</span><span class="s">m</span><span class="se">\x9b\xbf\xa0\xbe\xd4</span><span class="s">)t</span><span class="se">\xd4</span><span class="s">e</span><span class="se">\xc0</span><span class="s">,J</span><span class="se">\xb8</span><span class="s">H</span><span class="se">\x93</span><span class="s">i</span><span class="se">\xea\xbc</span><span class="s">y</span><span class="se">\x9a</span><span class="s">7AA</span><span class="se">\xeb</span><span class="s">]q</span><span class="se">\xae\x00\xeb</span><span class="s">J(Y</span><span class="se">\x8a\xa4</span><span class="s">B</span><span class="se">\xdc\t</span><span class="s">(</span><span class="se">\x8b\xce</span><span class="s">f&amp;@b</span><span class="se">\x91\x06</span><span class="s">Y~</span><span class="se">\x88</span><span class="s">m</span><span class="se">\xaf\x9b</span><span class="s">l</span><span class="se">\\\x12\xf2\x9f\xe1\x1f\x18</span><span class="s">q</span><span class="se">\x16\xd8\xb4\x9f</span><span class="s">$</span><span class="se">\x88</span><span class="s">%8</span><span class="se">\x0f</span><span class="s">'</span><span class="p">)</span>
<span class="n">N</span>  <span class="o">=</span> <span class="mi">1298690852855676717877172430649235439701166577296380685015744142960768447038281361897617173145966407353660262643273693068083328108519398663073368426744653753236312330497119252304579628565448615356293308415969827357877088267274695333</span>
<span class="n">c</span>  <span class="o">=</span> <span class="mi">162345251908758036296170413099695514860545515965805244415511843227313118622229046299657295062100889503276740904118647336251473821440423216697485906153356736210597508871299190718706584361947325513349221296586217139380060755033205077</span>
<span class="n">lp</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">lq</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="n">x</span><span class="o">*</span><span class="n">x</span> <span class="o">-</span> <span class="n">c</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">N</span> <span class="o">//</span> <span class="n">p</span>
<span class="k">assert</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span> <span class="o">==</span> <span class="n">N</span>

<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">lp</span><span class="p">,</span> <span class="n">lq</span><span class="p">):</span>
        <span class="n">yq</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
        <span class="n">yp</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">-</span> <span class="n">yq</span> <span class="o">*</span> <span class="n">q</span><span class="p">)</span> <span class="o">//</span> <span class="n">p</span>

        <span class="n">mp</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
        <span class="n">mq</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>

        <span class="k">if</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">mp</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">-</span> <span class="n">lp</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">mp</span> <span class="o">=</span> <span class="n">p</span> <span class="o">-</span> <span class="n">mp</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">mq</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">-</span> <span class="n">lq</span><span class="p">)</span> <span class="o">%</span> <span class="n">q</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">mq</span> <span class="o">=</span> <span class="n">q</span> <span class="o">-</span> <span class="n">mq</span> <span class="c1"># &lt;- fix bug
</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">yp</span> <span class="o">*</span> <span class="n">p</span> <span class="o">*</span> <span class="n">mq</span> <span class="o">+</span> <span class="n">yq</span> <span class="o">*</span> <span class="n">q</span> <span class="o">*</span> <span class="n">mp</span><span class="p">)</span> <span class="o">%</span> <span class="n">N</span>

<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">decrypt</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">lp</span><span class="p">,</span> <span class="n">lq</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Legendre Symbol" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry></feed>