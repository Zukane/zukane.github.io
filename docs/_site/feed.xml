<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-08-05T08:29:08+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zukane CTF</title><subtitle>CTF Writeups, mostly focused on crypto</subtitle><author><name>Zukane</name></author><entry><title type="html">Diamond Ticket (idekCTF 2025)</title><link href="http://localhost:4000/diamond-ticket/" rel="alternate" type="text/html" title="Diamond Ticket (idekCTF 2025)" /><published>2025-08-02T12:00:00+02:00</published><updated>2025-08-02T12:00:00+02:00</updated><id>http://localhost:4000/diamond-ticket</id><content type="html" xml:base="http://localhost:4000/diamond-ticket/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1">#Some magic from Willy Wonka
</span><span class="n">p</span> <span class="o">=</span> <span class="mi">170829625398370252501980763763988409583</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">164164878498114882034745803752027154293</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">125172356708896457197207880391835698381</span>

<span class="k">def</span> <span class="nf">chocolate_generator</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="k">return</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">+</span> <span class="nb">pow</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span> <span class="o">%</span> <span class="n">p</span>

<span class="c1">#The diamond ticket is hiding inside chocolate
</span><span class="n">diamond_ticket</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
<span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">diamond_ticket</span><span class="p">)</span> <span class="o">==</span> <span class="mi">26</span>
<span class="k">assert</span> <span class="n">diamond_ticket</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> <span class="o">==</span> <span class="sa">b</span><span class="s">"idek{"</span>
<span class="k">assert</span> <span class="n">diamond_ticket</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span> <span class="o">==</span> <span class="sa">b</span><span class="s">"}"</span>
<span class="n">diamond_ticket</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">diamond_ticket</span><span class="p">[</span><span class="mi">5</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>

<span class="n">flag_chocolate</span> <span class="o">=</span> <span class="n">chocolate_generator</span><span class="p">(</span><span class="n">diamond_ticket</span><span class="p">)</span>
<span class="n">chocolate_bag</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1">#Willy Wonka are making chocolates
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1337</span><span class="p">):</span> <span class="c1"># 1337 random szám
</span>    <span class="n">chocolate_bag</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">getRandomRange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span>

<span class="c1">#And he put the golden ticket at the end
</span><span class="n">chocolate_bag</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">flag_chocolate</span><span class="p">)</span> <span class="c1"># az utolsó a flag
</span>
<span class="c1">#Augustus ate lots of chocolates, but he can't eat all cuz he is full now :D
</span><span class="n">remain</span> <span class="o">=</span> <span class="n">chocolate_bag</span><span class="p">[</span><span class="o">-</span><span class="mi">5</span><span class="p">:]</span> <span class="c1"># az első 4 random szám, az utolsó a flag
</span>
<span class="c1">#Compress all remain chocolates into one
</span><span class="n">remain_bytes</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">c</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">bit_length</span><span class="p">()</span><span class="o">//</span><span class="mi">8</span><span class="p">,</span> <span class="s">"big"</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">remain</span><span class="p">])</span> 

<span class="c1">#The last chocolate is too important, so Willy Wonka did magic again
</span><span class="n">P</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">Q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">N</span> <span class="o">=</span> <span class="n">P</span> <span class="o">*</span> <span class="n">Q</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="sa">b</span><span class="s">"idek{this_is_a_fake_flag_lolol}"</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">P</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">Q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">c1</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">remain_bytes</span><span class="p">),</span> <span class="n">e</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
<span class="n">c2</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">remain_bytes</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span> <span class="c1"># A small gift
</span>
<span class="c1">#How can you get it ?
</span><span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">N</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">c1</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">c2</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span> 
</code></pre></div></div>

<p>As well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>N = 85494791395295332945307239533692379607357839212287019473638934253301452108522067416218735796494842928689545564411909493378925446256067741352255455231566967041733698260315140928382934156213563527493360928094724419798812564716724034316384416100417243844799045176599197680353109658153148874265234750977838548867
c1 = 27062074196834458670191422120857456217979308440332928563784961101978948466368298802765973020349433121726736536899260504828388992133435359919764627760887966221328744451867771955587357887373143789000307996739905387064272569624412963289163997701702446706106089751532607059085577031825157942847678226256408018301
c2 = 30493926769307279620402715377825804330944677680927170388776891152831425786788516825687413453427866619728035923364764078434617853754697076732657422609080720944160407383110441379382589644898380399280520469116924641442283645426172683945640914810778133226061767682464112690072473051344933447823488551784450844649
</code></pre></div></div>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>This challenge consists of multiple parts. Firstly, we are given two RSA ciphertexts of the same message with the same modulus. The encrypted message is <code class="language-plaintext highlighter-rouge">remain_bytes</code>, which consists of five concatenated elements of <code class="language-plaintext highlighter-rouge">chocolate_bag</code>. Four of these are random numbers, while the final element is <code class="language-plaintext highlighter-rouge">flag_chocolate</code>.</p>

<p><code class="language-plaintext highlighter-rouge">flag_chocolate</code> is the flag output of the <code class="language-plaintext highlighter-rouge">chocolate_generator(m)</code> function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">chocolate_generator</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="k">return</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">+</span> <span class="nb">pow</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span> <span class="o">%</span> <span class="n">p</span>
</code></pre></div></div>

<p>We must recover <code class="language-plaintext highlighter-rouge">flag_chocolate</code> from the RSA output, and then recover the message $m$ from the equation</p>

\[\large a^{m} + b^{m} \mod p\]

<p>Where $m$ is the 20-byte plaintext flag</p>

<h5 id="recovering-flag_chocolate">Recovering flag_chocolate</h5>

<p>Like previously mentioned, we are given two RSA samples of the same message, encrypted with different exponents but the same modulus. This makes the plaintext susceptible to an RSA common modulus attack. We can use the implementation from <code class="language-plaintext highlighter-rouge">jvdsn</code>’s repo: https://github.com/jvdsn/crypto-attacks/blob/master/attacks/rsa/common_modulus.py</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">attack</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">e2</span><span class="p">,</span> <span class="n">c2</span><span class="p">):</span>
    <span class="n">g</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">xgcd</span><span class="p">(</span><span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
    <span class="n">p1</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="k">if</span> <span class="n">u</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="nb">pow</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span> <span class="o">-</span><span class="n">u</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="n">p2</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="k">if</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="nb">pow</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span> <span class="o">-</span><span class="n">v</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">ZZ</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">p1</span> <span class="o">*</span> <span class="n">p2</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">).</span><span class="n">nth_root</span><span class="p">(</span><span class="n">g</span><span class="p">))</span>
</code></pre></div></div>

<p>We can simply input the parameters from the source code, and we easily recover <code class="language-plaintext highlighter-rouge">flag_chooclate</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span> <span class="o">=</span> <span class="mi">85494791395295332945307239533692379607357839212287019473638934253301452108522067416218735796494842928689545564411909493378925446256067741352255455231566967041733698260315140928382934156213563527493360928094724419798812564716724034316384416100417243844799045176599197680353109658153148874265234750977838548867</span>
<span class="n">c1</span> <span class="o">=</span> <span class="mi">27062074196834458670191422120857456217979308440332928563784961101978948466368298802765973020349433121726736536899260504828388992133435359919764627760887966221328744451867771955587357887373143789000307996739905387064272569624412963289163997701702446706106089751532607059085577031825157942847678226256408018301</span>
<span class="n">c2</span> <span class="o">=</span> <span class="mi">30493926769307279620402715377825804330944677680927170388776891152831425786788516825687413453427866619728035923364764078434617853754697076732657422609080720944160407383110441379382589644898380399280520469116924641442283645426172683945640914810778133226061767682464112690072473051344933447823488551784450844649</span>
<span class="n">e1</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="sa">b</span><span class="s">"idek{this_is_a_fake_flag_lolol}"</span><span class="p">)</span>
<span class="n">e2</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">remain_bytes</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">attack</span><span class="p">(</span><span class="n">N</span><span class="p">,</span><span class="n">e1</span><span class="p">,</span><span class="n">c1</span><span class="p">,</span><span class="n">e2</span><span class="p">,</span><span class="n">c2</span><span class="p">))</span>
<span class="n">remain</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">remain_bytes</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">16</span><span class="p">],</span> <span class="s">"big"</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">remain_bytes</span><span class="p">),</span> <span class="mi">16</span><span class="p">)]</span>
<span class="n">flag_chocolate</span> <span class="o">=</span> <span class="n">remain</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="c1"># 99584795316725433978492646071734128819
</span></code></pre></div></div>

<h5 id="recovering-the-original-m">Recovering the original m</h5>

<p>With <code class="language-plaintext highlighter-rouge">flag_chocolate</code> recovered, we now must recover the original flag from the equation.</p>

\[\large \text{flag\_chocolate} \equiv a^{m} + b^{m} \mod p\]

<p>Firstly, we notice that $p$ is a prime. We therefore work in the finite field $\mathbb{F}_{p}$. In SageMath, we can check the order $r$ of the field:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">p</span>  <span class="o">=</span> <span class="mi">170829625398370252501980763763988409583</span>
<span class="p">....:</span> <span class="n">a</span>  <span class="o">=</span> <span class="mi">164164878498114882034745803752027154293</span>
<span class="p">....:</span> <span class="n">b</span>  <span class="o">=</span> <span class="mi">125172356708896457197207880391835698381</span>
<span class="p">....:</span> <span class="n">F</span>  <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">).</span><span class="n">multiplicative_order</span><span class="p">()</span>
<span class="mi">85414812699185126250990381881994204791</span>
</code></pre></div></div>

<p>It turns out, the order of the field is surprisingly smooth:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">factor</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">).</span><span class="n">multiplicative_order</span><span class="p">())</span>
<span class="mi">40841</span> <span class="o">*</span> <span class="mi">50119</span> <span class="o">*</span> <span class="mi">51193</span> <span class="o">*</span> <span class="mi">55823</span> <span class="o">*</span> <span class="mi">57809</span> <span class="o">*</span> <span class="mi">61991</span> <span class="o">*</span> <span class="mi">63097</span> <span class="o">*</span> <span class="mi">64577</span>
</code></pre></div></div>

<p>This means calculating discrete logs is quite easy. We can calculate the discrete log</p>

\[\large b = a^{k} \mod p\]

<p>for some $k$. Afterwards, we can rewrite our equation to:</p>

\[\large \text{flag\_chocolate} \equiv a^{m} + a^{mk} \mod p\]

<p>The discrete log is easily calculable in SageMath, and since the order is smooth, it is almost instant:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">).</span><span class="n">multiplicative_order</span><span class="p">()</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">k</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">ord</span><span class="o">=</span><span class="n">r</span><span class="p">)</span>
<span class="c1"># 73331
</span></code></pre></div></div>

<p>The exponent $k = 73331$, which seems intentional considering it is $13337$ backwards. We denote $a^{m}$ as $x$, and we are now left with the polynomial:</p>

\[\large x + x^{k} - \text{flag\_chocolate} \equiv 0 \mod p\]

<p>By finding the root of this polynomial, we can find $a^{m} \bmod p$, where we can again solve for the discrete log, retrieving $m$. However, simply attempting <code class="language-plaintext highlighter-rouge">f.roots(multiplicities=False)</code> in SageMath is not enough. I used the <code class="language-plaintext highlighter-rouge">Cantor - Zassnehaus</code> method to find the root:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">R</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">F</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="n">k</span> <span class="o">-</span> <span class="n">flag_chocolate</span>

<span class="k">def</span> <span class="nf">unique_root</span><span class="p">(</span><span class="n">poly</span><span class="p">):</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">characteristic</span><span class="p">()</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">g</span> <span class="o">=</span> <span class="n">R</span><span class="p">.</span><span class="n">random_element</span><span class="p">(</span><span class="n">degree</span><span class="o">=</span><span class="n">poly</span><span class="p">.</span><span class="n">degree</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">=</span> <span class="p">(</span><span class="n">power_mod</span><span class="p">(</span><span class="n">g</span><span class="p">,(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">poly</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">).</span><span class="n">gcd</span><span class="p">(</span><span class="n">poly</span><span class="p">)</span>
        <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">.</span><span class="n">degree</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">poly</span><span class="p">.</span><span class="n">degree</span><span class="p">():</span>
            <span class="n">poly</span> <span class="o">=</span> <span class="n">h</span>  
            <span class="k">if</span> <span class="n">poly</span><span class="p">.</span><span class="n">degree</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">-</span><span class="n">poly</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  

<span class="n">root</span> <span class="o">=</span> <span class="n">unique_root</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>  
<span class="c1"># 126961729658296101306560858021273501485
</span></code></pre></div></div>

<p>With the root $a^{m} \bmod p$ recovered, we can now recover $m$ using the discrete log:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">ord</span><span class="o">=</span><span class="n">r</span><span class="p">)</span>  
<span class="c1"># 4807895356063327854843653048517090061
</span></code></pre></div></div>

<p>However, the recovered $m$ is not the complete plaintext. The original plaintext is 20 bytes, or rather 159 bits (because of leading 0 bit in ascii) while our modulus $p$ is 128 bits. To recover the complete 160 bit plaintext flag, we must lift the modulus and brute-force the missing factor $k$:</p>

\[\large \text{flag} = m + k \cdot r\]

<p>To verify if the flag is correct (or at least a candidate), we can check whether all flag bytes are printable ascii (between 32 and 126). With a 127 bit modulus $r$ and a 160 bit plaintext, the missing factor $k$ has an upper bound of $2^{33}$. This is doable in python/SageMath, but can be done a lot faster in a low-level language like c++ or rust. I wrote a brute-force code in c++ which iterates over possible values $k$ and prints the flag candidates:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>idek{ cm &amp;d@05 CS*q_[6Xxo}, k = 2164788270
idek{"pVJWCNmgg59#/c,A1lf}, k = 2301835951
idek{**}iVY9U:VhDtYv|Z@Un}, k = 2818307047
idek{+MUks($7Mgr}k^M9EMB0}, k = 2894242741
idek{,uMCt7xQoGqB+=Vkz"X0}, k = 2971516341
idek{-'0v|lsh/#JFnY?_!S\S}, k = 3017960554
idek{-;dC^#LP]I\3ke*iKIzV}, k = 3023235135
idek{-{=G(2|N955PXau;%,;"}, k = 3039904979
idek{9nRCVJsLMOij?QU/&amp;Dj4}, k = 3838593233
idek{=rL&gt;7&gt;`HH?z dwF#\Rsb}, k = 4106985107
idek{&gt;Xs\C7)bg1"_CB5p('| }, k = 4167075141
idek{&gt;`6D\-v^1DVo9nAbY{f?}, k = 4169101534
idek{@cL5&amp;a3iu~~jwMu~?68`}, k = 4303584005
idek{A-;4;6kR&amp;xjp"ebkaFYf}, k = 4356306351
idek{ALZ&gt;fE\}Lu,\6ku;5v/S}, k = 4364431722
idek{Aqcll#(*wLKg{k: 9x!a}, k = 4374101324
idek{D=7q7ZmjJU+/_SET(k&lt;Z}, k = 4560995163
idek{DjeT|t!M&amp;o#~TYeKTaL^}, k = 4572790903
idek{ETJ|+J+~B{q;f1$cJdO?}, k = 4633858014
idek{F\eth:*"=Oq5qXM0@I(Q}, k = 4702812636
idek{GGqO`:j0, OVhGk6`QI=}, k = 4764180304
idek{H+@B~2[q{UtzIEEU+&lt;7r}, k = 4823658243
idek{J$\Gu~.)Be{/#`@Y@a"7}, k = 4955536038
idek{L[&amp;RdOPDT2*D}q?Oi^Xu}, k = 5103517656
idek{N`(&lt;}~b*iHSmtz4'X68g}, k = 5238501878
idek{OH&amp;F`@GGUpsVMHkX![hM}, k = 5299072192
idek{P5bxoo)'46];&gt;`])&gt;)pE}, k = 5361011336
idek{Q.=k;. PCu,q#}OZ}|f6}, k = 5425984351
idek{TK%_6N?GvA@z.F Vvi$P}, k = 5634046613
idek{T}bLK\y7=7h"EKU&amp;!@PU}, k = 5647163128
idek{W)pA[}X(cS&gt;`w16l'cYn}, k = 5825761255
idek{Y6'g2eA?&lt;DfH$33f}:+@}, k = 5962757925
idek{YoFMQ?|I!,U'?hAYTwL`}, k = 5977671429
idek{^Swy+98nqf3F#M5 ZD- }, k = 6304603205
idek{a_DUV.bwgVg0G5=Q1Z+B}, k = 6508199347
idek{dX5Z:`_B:w E?2g`A96&gt;}, k = 6706871703
idek{d}Okl]'GAP^Re#-aPEHM}, k = 6716558528
idek{hdmhF2o7XO#XIY=&lt;7&amp;a[}, k = 6977415586
idek{iD(*_@q"aQ 6&gt;H#H' Mw}, k = 7035828582
idek{kV*_rGI-Q]z8z{+A[-v&lt;}, k = 7174207241
idek{l=Mt0@&amp;;3]+))wOQxxLW}, k = 7234554246
idek{n }W~-LJ(qb&lt;\kw4aR,#}, k = 7360708378
idek{ng0qo1rmR2_jS[;,Q1UM}, k = 7379167168
idek{o-Z4t_oZ[_.Fng} W0`&lt;}, k = 7430905097
idek{tks_f0r_ur_t1ck3t_xD}, k = 7781310273 &lt;- our flag
idek{u]aAv}2(KI~?.yrgmhxS}, k = 7844474986
idek{w_"knU](04jH_hi*&lt;.xy}, k = 7978609908
idek{zxZmPiv]iZ,1fSH|9_m,}, k = 8185709465
idek{~&gt;AkP(C2`p-DWPSe2=_t}, k = 8437894545
</code></pre></div></div>

<p>With $k = 7781310273$ we recover our flag: <code class="language-plaintext highlighter-rouge">idek{tks_f0r_ur_t1ck3t_xD}</code> !</p>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Common Modulus attack" /><category term="Diophantine" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">SHA-CTR (CERT.PL 2025)</title><link href="http://localhost:4000/SHA-CTR/" rel="alternate" type="text/html" title="SHA-CTR (CERT.PL 2025)" /><published>2025-07-15T13:00:00+02:00</published><updated>2025-07-15T13:00:00+02:00</updated><id>http://localhost:4000/SHA-CTR</id><content type="html" xml:base="http://localhost:4000/SHA-CTR/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the source code for a remote instance:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">binascii</span>
<span class="kn">import</span> <span class="nn">itertools</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">sha512</span>

<span class="n">key</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">xor</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([(</span><span class="n">aa</span> <span class="o">^</span> <span class="n">bb</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">aa</span><span class="p">,</span> <span class="n">bb</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)])</span>


<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">nonce</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">block_size</span> <span class="o">=</span> <span class="mi">512</span> <span class="o">//</span> <span class="mi">8</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">block</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">itertools</span><span class="p">.</span><span class="n">batched</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">block_size</span><span class="p">)):</span>
        <span class="n">counter</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">i</span><span class="si">:</span><span class="mi">010</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
        <span class="n">keystream</span> <span class="o">=</span> <span class="n">sha512</span><span class="p">(</span><span class="n">key</span> <span class="o">+</span> <span class="n">nonce</span> <span class="o">+</span> <span class="n">counter</span><span class="p">).</span><span class="n">digest</span><span class="p">()</span>
        <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">xor</span><span class="p">(</span><span class="n">keystream</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">block</span><span class="p">)))</span>
    <span class="k">return</span> <span class="sa">b</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">get_ciphertext</span><span class="p">(</span><span class="n">nonce</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag.bmp"</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">nonce</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
        <span class="n">nonce</span> <span class="o">=</span> <span class="n">binascii</span><span class="p">.</span><span class="n">unhexlify</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"nonce:"</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="n">binascii</span><span class="p">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">get_ciphertext</span><span class="p">(</span><span class="n">nonce</span><span class="p">)).</span><span class="n">decode</span><span class="p">())</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<p>as well as an example_flag.bmp image.</p>

<h5 id="length-extension">Length extension</h5>

<p>The encryption service implements a custom stream cipher using SHA512. We have the ability to encrypt the flag.bmp file with a chosen nonce. The plaintext data is split into blocks of size 64, and for each block, a keystream is generated and XORed with the block:</p>

\[\large \begin{align}
\nonumber keystream_{i} &amp;= SHA512(key \space \| \space nonce \space \| \space ctr_{i}) \\
\nonumber ct _{i} &amp;= keystream_{i} \oplus block_{i}
\end{align}\]

<p>Using SHA512 in this fashion is dangerous, as it opens up the possibility for a length extension attack. A length extension attack allows a user to calculate the hash $Hash(secret \space | \space message)$ if the length of the <code class="language-plaintext highlighter-rouge">secret</code> is known, and the <code class="language-plaintext highlighter-rouge">message</code> is known. If we can generate the hash (keystream) for each of the predictable counters, even without knowing the key, we can decrypt the encrypted flag image. In our case, this <code class="language-plaintext highlighter-rouge">message</code> is comprised of the chosen nonce and the known counter. In addition to this, SHA512 includes some internal padding since it handles 128-byte chunks at a time.</p>

<p>We begin by sending an empty nonce <code class="language-plaintext highlighter-rouge">b''</code> in the first round. The encryption service will generate a keystream by hashing:</p>

\[\large keystream_{0} = SHA512(key \space \| \space ctr_{0} \space \| \space padding)\]

<p>We have a 32 byte key and a 10 byte counter, which means we have 86 bytes of padding being hashed. This $keystream_{0}$ will be a vital piece of information later. We can denote this keystream or hash as $H_{0}$. On the second (and last) query, we set the nonce to $(ctr_{0} \space | \space padding)$. The encryption service will then generate a keystream by hashing:</p>

\[\large keystream_{0} = SHA512(key \space \| \space ctr_{0} \space \| \space padding_{0} \space \| \space ctr_{i} \space \| \space padding_{i})\]

<p>Now, the data to be hashed has surpassed 128 bytes in length. Internally, SHA512 will digest the first block $key \space | \space ctr_{0} \space | \space padding_{0}$, update the internal state, then digest the second block $ctr_{i} \space | \space padding_{i}$. The updated internal state will be $H_{0}$. If we are able to recover this $H_{0}$, we can set the known internal state of a SHA512 copy locally, and process each $i$ possible second blocks. This way, we are able to recover all keystreams and hence decrypt the encrypted flag by XOR.</p>

<h5 id="attack-implementation">Attack implementation</h5>

<p>The attack hinges on knowing $H_{0}$ or rather $keystream_{0}$. By sending in an empty nonce to the encryption service, we receive</p>

\[\large ct_{0} = pt_{0} \oplus H_{0}\]

<p>If we knew the first plaintext block of the flag, then $H_{0}$ would be recoverable. Luckily for us, the challenge gave us an example_flag.bmp file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xxd -p -l 64 example_flag.bmp
424dee3b0000000000003600000028000000c40000001a00000001001800
00000000b83b000000000000000000000000000000000000ffffffffffff
ffffffff
</code></pre></div></div>

<p>The BMP header consists of magic bytes, dimension fields, size fields, and some <code class="language-plaintext highlighter-rouge">ffffffffff</code> pixel values at the end (white pixels). This is all predictable information, as the flag will most likely have the same dimensions, the same size (can be verified by the ciphertext size) and also include white pixels in that position. Therefore, with high likelihood, the first plaintext block of the example flag, and the actual flag, is the same.</p>

<p>This way, we can recover $H_{0}$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">known_plain</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span>
    <span class="s">"424dee3b0000000000003600000028000000c40000001a00000001001800"</span>
    <span class="s">"00000000b83b000000000000000000000000000000000000ffffffffffff"</span>
    <span class="s">"ffffffff"</span>
<span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"nonce:"</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">""</span><span class="p">)</span> <span class="c1"># empty nonce
</span><span class="n">cipher0</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span> <span class="c1"># get ciphertext
</span><span class="n">state_ints</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">xor</span><span class="p">(</span><span class="n">cipher0</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span><span class="n">known_plain</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">]))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="mi">8</span><span class="p">)]</span> <span class="c1"># xor 
</span></code></pre></div></div>

<p>$H_{0}$ is split up into <code class="language-plaintext highlighter-rouge">state_ints</code> to be later processed as the SHA512 internal state. From here, we can prepare the second step. Padding in SHA2 is structured like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\x80 + many \x00 + 16-byte length field 
</code></pre></div></div>

<p>We recall that we have 86 bytes of padding, since the counter is 10 bytes and the key is 32 bytes. With the <code class="language-plaintext highlighter-rouge">\x80</code> padding “header” and the 16 byte length field, we are left with 69 null-bytes. We construct the padding and nonce like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">KEY_LEN</span>      <span class="o">=</span> <span class="mi">32</span>
<span class="n">CTR_LEN</span>      <span class="o">=</span> <span class="mi">10</span>
<span class="n">first_ctr</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"0"</span> <span class="o">*</span> <span class="n">CTR_LEN</span>
<span class="n">pad</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x80</span><span class="s">"</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="mi">69</span> <span class="o">+</span> <span class="p">((</span><span class="n">KEY_LEN</span> <span class="o">+</span> <span class="n">CTR_LEN</span><span class="p">)</span><span class="o">*</span><span class="mi">8</span><span class="p">).</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
<span class="n">nonce</span> <span class="o">=</span> <span class="n">first_ctr</span> <span class="o">+</span> <span class="n">pad</span>
</code></pre></div></div>

<p>After sending the nonce, we receive the corresponding encrypted flag.bmp. This data has to be handled in blocks of 64. For each block, we generate the predictable counter $ctr_{i}$, then we generate it’s corresponding padding (now 118 bytes since the second block consists of just the counter), before the block is fed to the internal SHA512 copy with the <code class="language-plaintext highlighter-rouge">state_ints</code> from $H_{0}$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">second_block</span><span class="p">(</span><span class="n">counter</span><span class="p">):</span>
    <span class="n">total_bits</span> <span class="o">=</span> <span class="p">(</span><span class="n">KEY_LEN</span> <span class="o">+</span> <span class="n">CTR_LEN</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">pad</span><span class="p">)</span> <span class="o">+</span> <span class="n">CTR_LEN</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>
    <span class="k">return</span> <span class="n">counter</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x80</span><span class="s">"</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="mi">101</span> <span class="o">+</span> <span class="n">total_bits</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>

<span class="k">for</span> <span class="n">block_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">cipher</span><span class="p">),</span> <span class="n">BLOCK_SIZE</span><span class="p">):</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">block_index</span><span class="o">//</span><span class="n">BLOCK_SIZE</span><span class="si">:</span><span class="mi">010</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
    <span class="n">ks_words</span> <span class="o">=</span> <span class="n">sha512_compress</span><span class="p">(</span><span class="n">second_block</span><span class="p">(</span><span class="n">counter</span><span class="p">),</span> <span class="n">state_ints</span><span class="p">)</span>
    <span class="n">keystream</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">ks_words</span><span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">sha512_compress()</code> functions is a boilerplate SHA512 implementation in python from here: https://github.com/KelCodesStuff/Cryptographic-Algorithms/blob/42441605679ee0aa9ad94611c21512cab93ea559/src/sha512.py</p>

<p>With the keystream for each block, we are able to easily recover the plaintext bytes through XOR. The complete plaintext byte-array is written to <code class="language-plaintext highlighter-rouge">flag.bmp</code>, which reveals the flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ecsc25{never_cross_the_streams}
</code></pre></div></div>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">struct</span>

<span class="c1"># sha512 implementation from https://github.com/KelCodesStuff/Cryptographic-Algorithms/blob/42441605679ee0aa9ad94611c21512cab93ea559/src/sha512.py
</span><span class="n">K</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mh">0x428a2f98d728ae22</span><span class="p">,</span> <span class="mh">0x7137449123ef65cd</span><span class="p">,</span> <span class="mh">0xb5c0fbcfec4d3b2f</span><span class="p">,</span> <span class="mh">0xe9b5dba58189dbbc</span><span class="p">,</span>
    <span class="mh">0x3956c25bf348b538</span><span class="p">,</span> <span class="mh">0x59f111f1b605d019</span><span class="p">,</span> <span class="mh">0x923f82a4af194f9b</span><span class="p">,</span> <span class="mh">0xab1c5ed5da6d8118</span><span class="p">,</span>
    <span class="mh">0xd807aa98a3030242</span><span class="p">,</span> <span class="mh">0x12835b0145706fbe</span><span class="p">,</span> <span class="mh">0x243185be4ee4b28c</span><span class="p">,</span> <span class="mh">0x550c7dc3d5ffb4e2</span><span class="p">,</span>
    <span class="mh">0x72be5d74f27b896f</span><span class="p">,</span> <span class="mh">0x80deb1fe3b1696b1</span><span class="p">,</span> <span class="mh">0x9bdc06a725c71235</span><span class="p">,</span> <span class="mh">0xc19bf174cf692694</span><span class="p">,</span>
    <span class="mh">0xe49b69c19ef14ad2</span><span class="p">,</span> <span class="mh">0xefbe4786384f25e3</span><span class="p">,</span> <span class="mh">0x0fc19dc68b8cd5b5</span><span class="p">,</span> <span class="mh">0x240ca1cc77ac9c65</span><span class="p">,</span>
    <span class="mh">0x2de92c6f592b0275</span><span class="p">,</span> <span class="mh">0x4a7484aa6ea6e483</span><span class="p">,</span> <span class="mh">0x5cb0a9dcbd41fbd4</span><span class="p">,</span> <span class="mh">0x76f988da831153b5</span><span class="p">,</span>
    <span class="mh">0x983e5152ee66dfab</span><span class="p">,</span> <span class="mh">0xa831c66d2db43210</span><span class="p">,</span> <span class="mh">0xb00327c898fb213f</span><span class="p">,</span> <span class="mh">0xbf597fc7beef0ee4</span><span class="p">,</span>
    <span class="mh">0xc6e00bf33da88fc2</span><span class="p">,</span> <span class="mh">0xd5a79147930aa725</span><span class="p">,</span> <span class="mh">0x06ca6351e003826f</span><span class="p">,</span> <span class="mh">0x142929670a0e6e70</span><span class="p">,</span>
    <span class="mh">0x27b70a8546d22ffc</span><span class="p">,</span> <span class="mh">0x2e1b21385c26c926</span><span class="p">,</span> <span class="mh">0x4d2c6dfc5ac42aed</span><span class="p">,</span> <span class="mh">0x53380d139d95b3df</span><span class="p">,</span>
    <span class="mh">0x650a73548baf63de</span><span class="p">,</span> <span class="mh">0x766a0abb3c77b2a8</span><span class="p">,</span> <span class="mh">0x81c2c92e47edaee6</span><span class="p">,</span> <span class="mh">0x92722c851482353b</span><span class="p">,</span>
    <span class="mh">0xa2bfe8a14cf10364</span><span class="p">,</span> <span class="mh">0xa81a664bbc423001</span><span class="p">,</span> <span class="mh">0xc24b8b70d0f89791</span><span class="p">,</span> <span class="mh">0xc76c51a30654be30</span><span class="p">,</span>
    <span class="mh">0xd192e819d6ef5218</span><span class="p">,</span> <span class="mh">0xd69906245565a910</span><span class="p">,</span> <span class="mh">0xf40e35855771202a</span><span class="p">,</span> <span class="mh">0x106aa07032bbd1b8</span><span class="p">,</span>
    <span class="mh">0x19a4c116b8d2d0c8</span><span class="p">,</span> <span class="mh">0x1e376c085141ab53</span><span class="p">,</span> <span class="mh">0x2748774cdf8eeb99</span><span class="p">,</span> <span class="mh">0x34b0bcb5e19b48a8</span><span class="p">,</span>
    <span class="mh">0x391c0cb3c5c95a63</span><span class="p">,</span> <span class="mh">0x4ed8aa4ae3418acb</span><span class="p">,</span> <span class="mh">0x5b9cca4f7763e373</span><span class="p">,</span> <span class="mh">0x682e6ff3d6b2b8a3</span><span class="p">,</span>
    <span class="mh">0x748f82ee5defb2fc</span><span class="p">,</span> <span class="mh">0x78a5636f43172f60</span><span class="p">,</span> <span class="mh">0x84c87814a1f0ab72</span><span class="p">,</span> <span class="mh">0x8cc702081a6439ec</span><span class="p">,</span>
    <span class="mh">0x90befffa23631e28</span><span class="p">,</span> <span class="mh">0xa4506cebde82bde9</span><span class="p">,</span> <span class="mh">0xbef9a3f7b2c67915</span><span class="p">,</span> <span class="mh">0xc67178f2e372532b</span><span class="p">,</span>
    <span class="mh">0xca273eceea26619c</span><span class="p">,</span> <span class="mh">0xd186b8c721c0c207</span><span class="p">,</span> <span class="mh">0xeada7dd6cde0eb1e</span><span class="p">,</span> <span class="mh">0xf57d4f7fee6ed178</span><span class="p">,</span>
    <span class="mh">0x06f067aa72176fba</span><span class="p">,</span> <span class="mh">0x0a637dc5a2c898a6</span><span class="p">,</span> <span class="mh">0x113f9804bef90dae</span><span class="p">,</span> <span class="mh">0x1b710b35131c471b</span><span class="p">,</span>
    <span class="mh">0x28db77f523047d84</span><span class="p">,</span> <span class="mh">0x32caab7b40c72493</span><span class="p">,</span> <span class="mh">0x3c9ebe0a15c9bebc</span><span class="p">,</span> <span class="mh">0x431d67c49c100d4c</span><span class="p">,</span>
    <span class="mh">0x4cc5d4becb3e42b6</span><span class="p">,</span> <span class="mh">0x597f299cfc657e2a</span><span class="p">,</span> <span class="mh">0x5fcb6fab3ad6faec</span><span class="p">,</span> <span class="mh">0x6c44198c4a475817</span><span class="p">,</span>
<span class="p">]</span>

<span class="k">def</span> <span class="nf">right_rotate</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">((</span><span class="n">value</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">value</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">64</span> <span class="o">-</span> <span class="n">n</span><span class="p">)))</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>

<span class="k">def</span> <span class="nf">sha512_compress</span><span class="p">(</span><span class="n">chunk</span><span class="p">,</span> <span class="n">hash_state</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">:</span>
        <span class="n">chunk</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="o">*</span> <span class="p">(</span><span class="mi">128</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">))</span>

    <span class="n">w</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">80</span>
    <span class="n">w</span><span class="p">[:</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">'&gt;16Q'</span><span class="p">,</span> <span class="n">chunk</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">80</span><span class="p">):</span>
        <span class="n">s0</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">15</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">15</span><span class="p">],</span> <span class="mi">8</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">15</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="p">)</span>
        <span class="n">s1</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">],</span> <span class="mi">19</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">],</span> <span class="mi">61</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">)</span>
        <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">16</span><span class="p">]</span> <span class="o">+</span> <span class="n">s0</span> <span class="o">+</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">7</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>

    <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hash_state</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">80</span><span class="p">):</span>
        <span class="n">s1</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="mi">41</span><span class="p">)</span>
        <span class="n">ch</span> <span class="o">=</span> <span class="p">(</span><span class="n">e</span> <span class="o">&amp;</span> <span class="n">f</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="o">~</span><span class="n">e</span> <span class="o">&amp;</span> <span class="n">g</span><span class="p">)</span>
        <span class="n">temp1</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">+</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">ch</span> <span class="o">+</span> <span class="n">K</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
        <span class="n">s0</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">28</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">34</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">39</span><span class="p">)</span>
        <span class="n">maj</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">a</span> <span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span>
        <span class="n">temp2</span> <span class="o">=</span> <span class="p">(</span><span class="n">s0</span> <span class="o">+</span> <span class="n">maj</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>

        <span class="n">h</span> <span class="o">=</span> <span class="n">g</span>
        <span class="n">g</span> <span class="o">=</span> <span class="n">f</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">e</span>
        <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">d</span> <span class="o">+</span> <span class="n">temp1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">c</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">b</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp1</span> <span class="o">+</span> <span class="n">temp2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>

    <span class="n">hash_state</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">hash_state</span><span class="p">,</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span><span class="p">])]</span>
    <span class="k">return</span> <span class="n">hash_state</span>




<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">remote</span><span class="p">,</span> <span class="n">xor</span>

<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span>   <span class="o">=</span> <span class="s">"shactr.ecsc25.hack.cert.pl"</span><span class="p">,</span> <span class="mi">5203</span>
<span class="n">BLOCK_SIZE</span>   <span class="o">=</span> <span class="mi">64</span>
<span class="n">KEY_LEN</span>      <span class="o">=</span> <span class="mi">32</span>
<span class="n">CTR_LEN</span>      <span class="o">=</span> <span class="mi">10</span>

<span class="c1"># xxd -p -l 64 example_flag.bmp
</span><span class="n">known_plain</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span>
    <span class="s">"424dee3b0000000000003600000028000000c40000001a00000001001800"</span>
    <span class="s">"00000000b83b000000000000000000000000000000000000ffffffffffff"</span>
    <span class="s">"ffffffff"</span>
<span class="p">)</span>
<span class="n">file_size</span> <span class="o">=</span> <span class="mh">0x3bee</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"nonce:"</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">""</span><span class="p">)</span>
<span class="n">cipher0</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span>

<span class="n">state_ints</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">xor</span><span class="p">(</span><span class="n">cipher0</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span><span class="n">known_plain</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">]))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="mi">8</span><span class="p">)]</span>
<span class="n">first_ctr</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"0"</span> <span class="o">*</span> <span class="n">CTR_LEN</span>
<span class="c1"># 0x80 + many 0x00 + 16 bytes length-field
</span><span class="n">pad</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x80</span><span class="s">"</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="mi">69</span> <span class="o">+</span> <span class="p">((</span><span class="n">KEY_LEN</span> <span class="o">+</span> <span class="n">CTR_LEN</span><span class="p">)</span><span class="o">*</span><span class="mi">8</span><span class="p">).</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
<span class="n">nonce</span> <span class="o">=</span> <span class="n">first_ctr</span> <span class="o">+</span> <span class="n">pad</span>

<span class="n">io</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"nonce:"</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">nonce</span><span class="p">.</span><span class="nb">hex</span><span class="p">().</span><span class="n">encode</span><span class="p">())</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span>
<span class="n">io</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># ctr(i) \| padding
</span><span class="k">def</span> <span class="nf">second_block</span><span class="p">(</span><span class="n">counter</span><span class="p">):</span>
    <span class="n">total_bits</span> <span class="o">=</span> <span class="p">(</span><span class="n">KEY_LEN</span> <span class="o">+</span> <span class="n">CTR_LEN</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">pad</span><span class="p">)</span> <span class="o">+</span> <span class="n">CTR_LEN</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>
    <span class="c1"># 0x80 + many 0x00 + 16 bytes length-field
</span>    <span class="k">return</span> <span class="n">counter</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x80</span><span class="s">"</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="mi">101</span> <span class="o">+</span> <span class="n">total_bits</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>

<span class="n">plaintext</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cipher</span><span class="p">))</span>
<span class="k">for</span> <span class="n">block_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">cipher</span><span class="p">),</span> <span class="n">BLOCK_SIZE</span><span class="p">):</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">block_index</span><span class="o">//</span><span class="n">BLOCK_SIZE</span><span class="si">:</span><span class="mi">010</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
    <span class="n">ks_words</span> <span class="o">=</span> <span class="n">sha512_compress</span><span class="p">(</span><span class="n">second_block</span><span class="p">(</span><span class="n">counter</span><span class="p">),</span> <span class="n">state_ints</span><span class="p">)</span>
    <span class="n">keystream</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">ks_words</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">byte_index</span><span class="p">,</span> <span class="p">(</span><span class="n">ct_byte</span><span class="p">,</span> <span class="n">keystream_byte</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">cipher</span><span class="p">[</span><span class="n">block_index</span><span class="p">:</span><span class="n">block_index</span><span class="o">+</span><span class="n">BLOCK_SIZE</span><span class="p">],</span> <span class="n">keystream</span><span class="p">)):</span>
        <span class="n">plaintext</span><span class="p">[</span><span class="n">block_index</span> <span class="o">+</span> <span class="n">byte_index</span><span class="p">]</span> <span class="o">=</span> <span class="n">ct_byte</span> <span class="o">^</span> <span class="n">keystream_byte</span>

<span class="nb">open</span><span class="p">(</span><span class="s">"flag.bmp"</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">).</span><span class="n">write</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"flag.bmp written"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="SHA2" /><category term="Length extension" /><category term="Stream cipher" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Mancity (CryptoCTF 2025)</title><link href="http://localhost:4000/mancity/" rel="alternate" type="text/html" title="Mancity (CryptoCTF 2025)" /><published>2025-07-13T12:00:00+02:00</published><updated>2025-07-13T12:00:00+02:00</updated><id>http://localhost:4000/mancity</id><content type="html" xml:base="http://localhost:4000/mancity/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">flag</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="k">def</span> <span class="nf">man</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">B</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">n</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>
        <span class="n">M</span> <span class="o">=</span> <span class="s">''</span>
        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">B</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="s">'0'</span><span class="p">:</span>
                        <span class="n">M</span> <span class="o">+=</span> <span class="s">'01'</span>
                <span class="k">else</span><span class="p">:</span>
                        <span class="n">M</span> <span class="o">+=</span> <span class="s">'11'</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">keygen</span><span class="p">(</span><span class="n">nbit</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="n">nbit</span><span class="p">)</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">man</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
                <span class="n">B</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">p</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span> <span class="o">+</span> <span class="s">'1'</span> <span class="o">*</span> <span class="n">nbit</span>
                <span class="n">q</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">isPrime</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="ow">and</span> <span class="n">isPrime</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>
                                <span class="k">return</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span>

<span class="n">nbit</span> <span class="o">=</span> <span class="mi">256</span>
<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">keygen</span><span class="p">(</span><span class="n">nbit</span><span class="p">)</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">n</span>
<span class="n">e</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1234567891</span><span class="p">,</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'n = </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'c = </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>  
</code></pre></div></div>

<p>as well as output.txt:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n = 147170819334030469053514652921356515888015711942553338463409772437981228515273287953989706666936875524451626901247038180594875568558137526484665015890594045767912340169965961750130156341999306808017498374501001042628249176543370525803456692022546235595791111819909503496986338431136130272043196908119165239297
c = 77151713996168344370880352082934801122524956107256445231326053049976568087412199358725058612262271922128984783428798480191211811217854076875727477848490840660333035334309193217618178091153472265093622822195960145852562781183839474868269109313543427082414220136748700364027714272845969723750108397300867408537     
</code></pre></div></div>

<p>This is an RSA-like implementation with some funky key generation</p>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>The encryption script implements a Manchester encoding scheme in the function <code class="language-plaintext highlighter-rouge">man()</code>. The number passed to this function is converted to bits, and each bit is replaced with either <code class="language-plaintext highlighter-rouge">01</code> or <code class="language-plaintext highlighter-rouge">11</code>. The resulting bitstream is converted back into an integer.</p>

<p>The key generation algorithm produces a 256-bit prime integer $p$, which is used to generate both RSA prime factors. One is generated by passing $p$ to <code class="language-plaintext highlighter-rouge">man()</code>, resulting in a 512-bit integer, while the other prime is generated by appending 256 bits to $p$’s bitstream. This tells us a lot about the structure of the prime factors.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>r: ?1?1?1?1?1?1?1?1...?1?1?1?1?1?1?1?1 
q: ????????????????...1111111111111111
</code></pre></div></div>

<p>Since half of the prime factor $q$ is known, recovering the prime using coppersmith is a promising idea. However, even with 50% consecutive bits, the approach failed. Another approach may be to use branch and prune, since 50% of both primes are known and are scattered in $r$, but this also did not work out, probably due to $q$ missing too many consecutive bits.</p>

<p>Instead, we take advantage of the prime factor’s unique structure and relationship with the modulus $n$. First, for clarity, I will refer to the prime factors $q$ and $r$ as $p$ and $q$ respectively, due to the way the encryption script reuses variable names and returns the factors from the keygen algorithm</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p: ????????????????...1111111111111111
q: ?1?1?1?1?1?1?1?1...?1?1?1?1?1?1?1?1 
</code></pre></div></div>

<p>We can represent $p$ as the following:</p>

\[\large p = 2^{256}\cdot x + 2^{256}-1\]

<p>for some unknown $x$ (upper bits). Taking $p$ modulo $2^{256}$, we get:</p>

\[\large p = -1 \mod 2^{256}\]

<p>Which means:</p>

\[\large \begin{align}
\nonumber n = p \cdot q \mod 2^{256} \\
\nonumber n = -1 \cdot q \mod 2^{256} \\
\nonumber n = -q \mod 2^{256} \\
\nonumber -n = q \mod 2^{256}
\end{align}\]

<p>So by taking $-n \mod 2^{256}$, we are able to recover the bottom $256$ bits of $q$. Remember, $q$ (r) was generated using the Manchester encoding. The $256$ bottom bits of $q$ include the $128$ least significant bits of the random prime. Since $p$ and $q$ are generated using the same prime, this leaks another $128$ bits of $p$, for a total of $384$. With 75% of a prime factor’s bits, the primes are recovered from coppersmith in a trivial manner.</p>

<h5 id="recovering-the-prime-factors">Recovering the prime factors</h5>

<p>Recovering 75% of $p$’s bits can be done like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rlow</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="o">^</span><span class="mi">256</span>
<span class="n">rbits</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">rlow</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>

<span class="c1"># Undoing manchester encoding
</span><span class="n">qlow</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">rbits</span><span class="p">),</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">qlow</span> <span class="o">+=</span> <span class="n">rbits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="n">qlow</span> <span class="o">+=</span> <span class="s">"1"</span><span class="o">*</span><span class="mi">256</span>
<span class="n">leak</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">qlow</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>With the leaked value, the prime is instantly recovered using <code class="language-plaintext highlighter-rouge">cuso</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">T</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">"x"</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">384</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">leak</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span>           <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span>              <span class="o">=</span> <span class="p">{</span><span class="n">T</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">^</span><span class="mi">128</span><span class="p">)},</span>
    <span class="n">modulus</span>             <span class="o">=</span> <span class="s">"p"</span><span class="p">,</span>     
    <span class="n">modulus_multiple</span>    <span class="o">=</span> <span class="n">n</span><span class="p">,</span>   
    <span class="n">modulus_lower_bound</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">511</span><span class="p">,</span> 
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"CuSO found no root"</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"p"</span><span class="p">]</span>
</code></pre></div></div>

<p>From here, its just regular RSA decryption</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"p"</span><span class="p">]</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span> <span class="o">//</span> <span class="n">p</span>
<span class="k">assert</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span> <span class="o">==</span> <span class="n">n</span>

<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="n">m</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="n">m</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># CCTF{M4nch3sReR_c0D!ng_wI7H_RSA}
</span></code></pre></div></div>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cuso</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">147170819334030469053514652921356515888015711942553338463409772437981228515273287953989706666936875524451626901247038180594875568558137526484665015890594045767912340169965961750130156341999306808017498374501001042628249176543370525803456692022546235595791111819909503496986338431136130272043196908119165239297</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">77151713996168344370880352082934801122524956107256445231326053049976568087412199358725058612262271922128984783428798480191211811217854076875727477848490840660333035334309193217618178091153472265093622822195960145852562781183839474868269109313543427082414220136748700364027714272845969723750108397300867408537</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">1234567891</span>

<span class="n">M</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">256</span>
<span class="n">rlow</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="p">)</span><span class="o">%</span><span class="n">M</span>
<span class="n">rbits</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">rlow</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>

<span class="n">qlow</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">rbits</span><span class="p">),</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">qlow</span> <span class="o">+=</span> <span class="n">rbits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="n">qlow</span> <span class="o">+=</span> <span class="s">"1"</span><span class="o">*</span><span class="mi">256</span>
<span class="n">leak</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">qlow</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>

<span class="n">T</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">"x"</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">384</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">leak</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span>           <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span>              <span class="o">=</span> <span class="p">{</span><span class="n">T</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">^</span><span class="mi">128</span><span class="p">)},</span>
    <span class="n">modulus</span>             <span class="o">=</span> <span class="s">"p"</span><span class="p">,</span>     
    <span class="n">modulus_multiple</span>    <span class="o">=</span> <span class="n">n</span><span class="p">,</span>   
    <span class="n">modulus_lower_bound</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">511</span><span class="p">,</span> 
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"CuSO found no root"</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"p"</span><span class="p">]</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span> <span class="o">//</span> <span class="n">p</span>
<span class="k">assert</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span> <span class="o">==</span> <span class="n">n</span>

<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="n">m</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="n">m</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># CCTF{M4nch3sReR_c0D!ng_wI7H_RSA}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Coppersmith small roots" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Phony (CryptoCTF 2025)</title><link href="http://localhost:4000/phony/" rel="alternate" type="text/html" title="Phony (CryptoCTF 2025)" /><published>2025-07-13T12:00:00+02:00</published><updated>2025-07-13T12:00:00+02:00</updated><id>http://localhost:4000/phony</id><content type="html" xml:base="http://localhost:4000/phony/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script, as well as a host and port to connect to.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">flag</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="k">def</span> <span class="nf">die</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="n">pr</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="n">quit</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">pr</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">))</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">flush</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">sc</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nb">buffer</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">keygen</span><span class="p">(</span><span class="n">nbit</span><span class="p">):</span>
        <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">getPrime</span><span class="p">(</span><span class="n">nbit</span> <span class="o">+</span> <span class="p">(</span><span class="n">nbit</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">_</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
        <span class="k">return</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
        <span class="n">border</span> <span class="o">=</span> <span class="s">"┃"</span>
        <span class="n">pr</span><span class="p">(</span>        <span class="s">"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"</span><span class="p">)</span>
        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">" Welcome to the Phoney crypto-system task, a nice cryptosystem   "</span><span class="p">,</span> <span class="n">border</span><span class="p">)</span>
        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">" that's so good, it's theoretically unbreakable because it exists"</span><span class="p">,</span> <span class="n">border</span><span class="p">)</span>
        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">" only in the realm of imagination!! Try the get the long flag :-)"</span><span class="p">,</span> <span class="n">border</span><span class="p">)</span>
        <span class="n">pr</span><span class="p">(</span>        <span class="s">"┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"</span><span class="p">)</span>
        <span class="k">global</span> <span class="n">flag</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">))</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">)))</span>
        <span class="n">nbit</span> <span class="o">=</span> <span class="mi">512</span>
        <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">keygen</span><span class="p">(</span><span class="n">nbit</span><span class="p">)</span>
        <span class="n">n</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span> <span class="o">*</span> <span class="n">r</span><span class="p">,</span> <span class="n">inverse</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">*</span> <span class="n">r</span><span class="p">)</span> <span class="o">+</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1234567891</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">pr</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">border</span><span class="si">}</span><span class="s"> Options: </span><span class="se">\n</span><span class="si">{</span><span class="n">border</span><span class="si">}</span><span class="se">\t</span><span class="s">[E]ncrypt the flag! </span><span class="se">\n</span><span class="si">{</span><span class="n">border</span><span class="si">}</span><span class="se">\t</span><span class="s">[P]ublic information </span><span class="se">\n</span><span class="si">{</span><span class="n">border</span><span class="si">}</span><span class="se">\t</span><span class="s">[Q]uit"</span><span class="p">)</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">sc</span><span class="p">().</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">ans</span> <span class="o">==</span> <span class="s">'e'</span><span class="p">:</span>
                        <span class="k">assert</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">n</span>
                        <span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
                        <span class="n">pr</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">c</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
                <span class="k">elif</span> <span class="n">ans</span> <span class="o">==</span> <span class="s">'p'</span><span class="p">:</span>
                        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">n</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
                        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">s</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
                        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">q</span> <span class="o">%</span> <span class="n">p</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
                <span class="k">elif</span> <span class="n">ans</span> <span class="o">==</span> <span class="s">'q'</span><span class="p">:</span>
                        <span class="n">die</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">"Quitting..."</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                        <span class="n">die</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">"Bye..."</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
        <span class="n">main</span><span class="p">()</span>  
</code></pre></div></div>

<p>By connecting to the host, we are given some parameters:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c = 6869860867050333958899459281380169365224860725191141490075681906921285491146868469402924407937586752602837270188417362698698432410645612767176659341773981474956667075905162196530581138090668035380527629936507938083351225221764373058697174991005915834617167971014590329567873587411280896708327508300000380436210779160971169732950060789651351851118197920235412555409856566771235934800199725530146544692622204638420681024709553733579632544440316928742635345488552585477308018879605401386083632773124260425537471704361270484
n = 7593182903146811406435471791518649687495414242882290735012260860376531253817852809889056324416625293328336902814033416817885049198231261658575996571173050362548418752191140228401121790728216545279595354039266794764391641456534625225792086731913555135968347381141768054313651417425174249608933255246607612139992917832326481150388513002349951254458456726813282961483706607801158152631829134593355178831985262912282527824542674089294563518520637393822269227734326318416000202832970945614787755290083730313250861320246580607
s = 408090971571018322541813922483180473677053198626231795703512988713148003287852666320118777537915800591251623270019431071055073761901852807133561327188793849601691060300945653929089492414728804506355613740171489217849409547504090029963007153700898456243760945317209450011285770935513349812984386394905043517448605752738202406721452527001589670740463592746693105274845
q % p = 9306850992856150821106831016751373801819672057267955676046215879463293889689158245940844448621629363248578706865630660666356930840954191009944889404229867
</code></pre></div></div>

<h5 id="recovering-the-prime-factors">Recovering the prime factors</h5>

<p>The service leaks three pieces of information besides the ciphertext $c$:</p>
<ul>
  <li>the composite modulus $n = p \cdot q \cdot r$</li>
  <li>the integer $s = p + p^{-1}_{qr}$</li>
  <li>the residue $r \equiv q \bmod p$</li>
</ul>

<p>Because $s = p + p^{-1}_{\;qr}$ we have</p>

\[\large
\begin{align}
\nonumber p^{-1}_{\;qr} &amp;= s-p \\
\nonumber (s-p)\,p &amp;\equiv 1\mod{qr}
\end{align}\]

<p>Multiplying by $p$ gives a relation that is zero modulo $n$:</p>

\[\large
\begin{align}
\nonumber p\bigl((s-p)p-1\bigr) &amp;\equiv 0 \mod{n} \\
\nonumber f(p)=p^{3}-s\,p^{2}+p &amp;\equiv 0\mod{n}
\end{align}\]

<p>The prime $p$ is only $512$ bits, while $n$ is about $1728$ bits, so $p$ is a small root of the monic cubic</p>

\[\large f(x)=x^{3}-s\,x^{2}+x\mod{n}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">3</span> <span class="o">-</span> <span class="n">s</span><span class="o">*</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">520</span><span class="p">)}</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span><span class="o">=</span><span class="p">[</span><span class="n">f</span><span class="p">],</span>         
    <span class="n">bounds</span><span class="o">=</span><span class="n">bounds</span><span class="p">,</span>
    <span class="n">modulus</span><span class="o">=</span><span class="n">n</span><span class="p">,</span>               
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no root found"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"p = </span><span class="si">{</span><span class="n">p</span><span class="si">:</span><span class="c1">#x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="c1"># p = 0xda7a510e37d4c24fbed858e74371c3b199b7163f04e87be5cc36345419443a48ae80c16a4634b2754b543326e30ac45d35e13a20274a94bd662ea96f7d7121b9
</span></code></pre></div></div>

<p>Once $p$ is known, the extra leak $q\bmod p$ lets us write</p>

\[\large
\begin{align}
\nonumber q &amp;= p \cdot k + r \\
\nonumber r &amp;= q \bmod p
\end{align}\]

<p>Here $k &lt; 2^{64}$ because $q$ is $576$ bits, only $64$ bits longer than $p$.  Substituting into $n$ shows that the linear polynomial</p>

\[\large g(k)=p\,k+r\equiv 0 \mod{q}\]

<p>This can also be easily solved using <code class="language-plaintext highlighter-rouge">cuso</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">q_mod_p</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">64</span><span class="p">)}</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span>        <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span>           <span class="o">=</span> <span class="n">bounds</span><span class="p">,</span>
    <span class="n">modulus</span>          <span class="o">=</span> <span class="s">"q"</span><span class="p">,</span>    
    <span class="n">modulus_multiple</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span><span class="p">,</span>      
    <span class="n">modulus_lower_bound</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">560</span>  
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no root found"</span>

<span class="n">q</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"q"</span><span class="p">])</span> 
</code></pre></div></div>

<p>From here, its just standard RSA decryption.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">q</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"q"</span><span class="p">])</span> 
<span class="n">r</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="n">q</span><span class="p">)</span>
<span class="n">e</span>   <span class="o">=</span> <span class="mi">1234567891</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>b'ax\x90\xda\xea\xefa\x9f\xce\xb8&amp;n\x85~\xf4\xbe\xef|\x9eF\xc4x\xa039\xf1\x8a=\xdf\x10\x17\x96\x97\xe3h@\xb6\xae\xea\xf3\x84K\x03\x9a\xb4\xe6i\xd8\x04CCTF{c0UlD_b3_ReCoVEr3d_v!4_Coppersmiths_m3ThOd?}_(\x9a\x9e\x9b,\xbb\xde\x15\xf3\x0fP\x1e\xbc\xd5C\x1au\x1b3d\x18\x15X$^\x83\x17\xbd\xa3&amp;\xb9\xa7H\xe0\x19Y\xf7\x8f0`\xd6J`\xf7\xd22\xfb\xd8'
</code></pre></div></div>

<p>So the flag is <code class="language-plaintext highlighter-rouge">CCTF{c0UlD_b3_ReCoVEr3d_v!4_Coppersmiths_m3ThOd?}</code></p>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cuso</span>

<span class="n">c</span> <span class="o">=</span> <span class="mi">6869860867050333958899459281380169365224860725191141490075681906921285491146868469402924407937586752602837270188417362698698432410645612767176659341773981474956667075905162196530581138090668035380527629936507938083351225221764373058697174991005915834617167971014590329567873587411280896708327508300000380436210779160971169732950060789651351851118197920235412555409856566771235934800199725530146544692622204638420681024709553733579632544440316928742635345488552585477308018879605401386083632773124260425537471704361270484</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">7593182903146811406435471791518649687495414242882290735012260860376531253817852809889056324416625293328336902814033416817885049198231261658575996571173050362548418752191140228401121790728216545279595354039266794764391641456534625225792086731913555135968347381141768054313651417425174249608933255246607612139992917832326481150388513002349951254458456726813282961483706607801158152631829134593355178831985262912282527824542674089294563518520637393822269227734326318416000202832970945614787755290083730313250861320246580607</span>
<span class="n">s</span> <span class="o">=</span> <span class="mi">408090971571018322541813922483180473677053198626231795703512988713148003287852666320118777537915800591251623270019431071055073761901852807133561327188793849601691060300945653929089492414728804506355613740171489217849409547504090029963007153700898456243760945317209450011285770935513349812984386394905043517448605752738202406721452527001589670740463592746693105274845</span>
<span class="n">q_mod_p</span> <span class="o">=</span> <span class="mi">9306850992856150821106831016751373801819672057267955676046215879463293889689158245940844448621629363248578706865630660666356930840954191009944889404229867</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">3</span> <span class="o">-</span> <span class="n">s</span><span class="o">*</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">520</span><span class="p">)}</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span><span class="o">=</span><span class="p">[</span><span class="n">f</span><span class="p">],</span>         
    <span class="n">bounds</span><span class="o">=</span><span class="n">bounds</span><span class="p">,</span>
    <span class="n">modulus</span><span class="o">=</span><span class="n">n</span><span class="p">,</span>               
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no root found"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"p = </span><span class="si">{</span><span class="n">p</span><span class="si">:</span><span class="c1">#x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">q_mod_p</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">64</span><span class="p">)}</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span>        <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span>           <span class="o">=</span> <span class="n">bounds</span><span class="p">,</span>
    <span class="n">modulus</span>          <span class="o">=</span> <span class="s">"q"</span><span class="p">,</span>    
    <span class="n">modulus_multiple</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span><span class="p">,</span>      
    <span class="n">modulus_lower_bound</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">560</span>  
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no root found"</span>

<span class="n">q</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"q"</span><span class="p">])</span> 
<span class="n">r</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="n">q</span><span class="p">)</span>
<span class="n">e</span>   <span class="o">=</span> <span class="mi">1234567891</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Coppersmith small roots" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Lowkey RSA (L3AK 2025)</title><link href="http://localhost:4000/lowkey-rsa/" rel="alternate" type="text/html" title="Lowkey RSA (L3AK 2025)" /><published>2025-07-11T12:00:00+02:00</published><updated>2025-07-11T12:00:00+02:00</updated><id>http://localhost:4000/lowkey-rsa</id><content type="html" xml:base="http://localhost:4000/lowkey-rsa/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>

<span class="k">def</span> <span class="nf">gen_primes</span><span class="p">(</span><span class="n">SIZE</span><span class="p">):</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">random_prime</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">SIZE</span><span class="p">)</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">q</span> <span class="o">=</span> <span class="n">random_prime</span><span class="p">(</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">SIZE</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">SIZE</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="n">q</span><span class="p">:</span> 
            <span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">q</span><span class="p">,</span> <span class="n">p</span>
            <span class="k">if</span> <span class="n">q</span> <span class="o">&lt;</span> <span class="n">p</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">*</span><span class="n">q</span><span class="p">:</span>
                <span class="k">break</span>
    <span class="k">return</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span>

<span class="n">nbits</span> <span class="o">=</span> <span class="mi">1024</span>
<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"L3AK{&lt;REDACTED&gt;}"</span>

<span class="n">R</span> <span class="o">=</span> <span class="n">RealField</span><span class="p">(</span><span class="n">nbits</span><span class="p">)</span>
<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">gen_primes</span><span class="p">(</span><span class="n">nbits</span><span class="o">//</span><span class="mi">2</span><span class="p">)</span>
<span class="n">N</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">**</span><span class="mi">4</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">**</span><span class="mi">4</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">N_s</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">N</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
<span class="n">N_ss</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">N</span><span class="o">**</span><span class="mi">4</span><span class="p">)</span>   
<span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">N_ss</span><span class="o">-</span><span class="mi">49</span><span class="o">*</span><span class="n">N_s</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">N</span><span class="o">+</span><span class="mi">170</span><span class="o">*</span><span class="n">N_s</span><span class="p">)</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">d</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">round</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">t</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">gcd</span><span class="p">(</span><span class="n">phi</span><span class="o">-</span><span class="n">d</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">break</span>

<span class="n">e</span> <span class="o">=</span> <span class="n">inverse_mod</span><span class="p">(</span><span class="n">phi</span><span class="o">-</span><span class="n">d</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">),</span> <span class="n">e</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"e = </span><span class="si">{</span><span class="n">e</span><span class="si">}</span><span class="se">\n</span><span class="s">N = </span><span class="si">{</span><span class="n">N</span><span class="si">}</span><span class="se">\n</span><span class="s">c = </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>As well as output.txt</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>e = 370641246943654763647982436393968410523035056803076571952063446221981054741105804986870907803130391736840420704227524827167178043545763070520011423497365360567040835216714988776285676818833967899487393611410406708467049153990487431775151667103817558875154145780446157545062795321820537740212495675608976163877567007753523774447008611976905578477758365862741282887079873779055623972564793977884741350325450634869927603664722967323341473363320613467433998603537242156610765948379449307405122629600556105209482040761323271134932553579828576227233549741862990693111061962892676568398083446001891012661453694340879845386900986024512140441823076068075531089610607812090402852586184229193699718454197060072575595570232588935191272416546819793045623275550409871218062357273309812154110783534714662063322116568964675372602159108306251453500390105034890229052958512010283429459687714879084097494098542745605324460172680461006303552579466987732938596341830436505942616479890554056163452471835707573885837976471753073413505028206370632139586750855217201926605743452826397576584492732225029497982216694648573014796836126574081158869231364821712046050068243878660143909750030922147254462228826952501087389154612318844202411291844150163167021
N = 10222014062768125922601962004686361136447658578111413896046596746110249358112354000488449664371774177977274016313103826803116662735101208575040021998413602496525815373151213550295992813258424882626853824039678993334143891154760939712139640336395595628492284893024078520796288685014103193630287988814952604029
c = 4323184196594280140760873888779221921406692838206184372853784052006066772207175604399047711017170078453742445880600303200397632746051500194774569530024097959399922254605516672962219900174336028512116159752401576376530557036245218800162889461620882177398454137759956927838320086276276377067055171421259852996
</code></pre></div></div>

<p>The encryption script implements an unusual RSA-like scheme where:</p>

\[\large \phi(n) = (p^{4}-1)\cdot(q^{4}-1)\]

<h5 id="recovering-phi">Recovering phi</h5>

<p>We begin by expanding phi like so:</p>

\[\large \begin{align}
\nonumber \phi(n) &amp;= (p^{4}-1)\cdot(q^{4}-1) \\
\nonumber \phi(n) &amp;= N^{4}-(p^{4}+q^{4}) + 1
\end{align}\]

<p>We rewrite $p^{4}+q^{4}$:</p>

\[\large p^{4}+q^{4} = (p^{2}+q^{2})^{2}-2N^{2}\]

<p>Which means:</p>

\[\large \phi(n) = N^{4}-(p^{2}+q^{2})^{2} + 2N^{2} + 1\]

<p>We refer to $p^{2}+q^{2}$ as the variable $u$. With $\phi(n)$ expanded, we can look at the following equation from the code:</p>

\[\large
\begin{align}
\nonumber (\phi-d) \cdot e &amp;= 1 &amp;\mod \phi \\
\nonumber -d \cdot e &amp;= 1 &amp;\mod \phi \\ 
\nonumber d \cdot e &amp;= -1 &amp;\mod \phi  \\
\nonumber d \cdot e +1&amp;= 0 &amp;\mod \phi \\
\nonumber e \cdot d + 1&amp;= k\cdot \phi \\
\nonumber e \cdot d + 1 - k\cdot \phi &amp;= 0 \\
\nonumber 1 - k\cdot \phi &amp;= 0 &amp;\mod e  \\
\nonumber 1 - k\cdot (N^{4}-(p^{2}+q^{2})^{2} + 2N^{2} + 1) &amp;= 0 &amp;\mod e \\
\nonumber 1 - k\cdot (N^{4}-u^{2} + 2N^{2} + 1) &amp;= 0 &amp;\mod e
\end{align}\]

<p>With this polynomial, we can recover $k$ and $u$ using a bivariate coppersmith’s attack. We will have to know the bounds for both $k$ and $u$. 
Looking at $e \cdot d + 1 = k\cdot \phi$ again, we know $\phi$ and $e$ have around the same bit size, which means $d$ and $k$ will have around the same bit size. In the source code, we can see that:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">N_ss</span><span class="o">-</span><span class="mi">49</span><span class="o">*</span><span class="n">N_s</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">N</span><span class="o">+</span><span class="mi">170</span><span class="o">*</span><span class="n">N_s</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">round</span><span class="p">(</span><span class="n">sqrt</span><span class="p">(</span><span class="n">t</span><span class="p">))</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>so $k$ is bound by $t$. And since $u = (p^{2}+q^{2})$, we know $u$ is bounded by around $2N$. With all of this information, we can solve the bivariate polynomial in $k,u$ with coppersmith’s small roots:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">k</span><span class="p">,</span><span class="n">u</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="n">u</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">roots</span> <span class="o">=</span> <span class="n">small_roots</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">e</span><span class="p">)),</span> <span class="p">(</span><span class="n">isqrt</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="p">),</span> <span class="n">m</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"resultants"</span><span class="p">,</span> <span class="n">lattice_reduction</span><span class="o">=</span><span class="n">flatter</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">k</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<p>With $k$ and $u$, we recover $\phi = N^{4}-u^{2} + 2N^{2} + 1$ and $d$:</p>

\[\large d = \frac{k\cdot \phi-1}{e}\]

<p>And with the private key $d$ recovered, the encrypted flag $c$ can be decrypted:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">phi</span><span class="o">-</span><span class="n">d</span><span class="p">,</span> <span class="n">N</span><span class="p">)))</span>
<span class="c1"># L3AK{L0wK3y_Th1S_RSA_i5_kiNda_ScuFf3D_LmA0}
</span></code></pre></div></div>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/lbc/lattice-based-cryptanalysis/lbc_toolkit/problems/small_roots.sage'</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/lbc/lattice-based-cryptanalysis/lbc_toolkit/common/flatter.sage'</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/lbc/lattice-based-cryptanalysis/lbc_toolkit/common/systems_solvers.sage'</span><span class="p">)</span>

<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">inverse</span><span class="p">,</span> <span class="n">long_to_bytes</span>

<span class="n">e</span> <span class="o">=</span> <span class="mi">370641246943654763647982436393968410523035056803076571952063446221981054741105804986870907803130391736840420704227524827167178043545763070520011423497365360567040835216714988776285676818833967899487393611410406708467049153990487431775151667103817558875154145780446157545062795321820537740212495675608976163877567007753523774447008611976905578477758365862741282887079873779055623972564793977884741350325450634869927603664722967323341473363320613467433998603537242156610765948379449307405122629600556105209482040761323271134932553579828576227233549741862990693111061962892676568398083446001891012661453694340879845386900986024512140441823076068075531089610607812090402852586184229193699718454197060072575595570232588935191272416546819793045623275550409871218062357273309812154110783534714662063322116568964675372602159108306251453500390105034890229052958512010283429459687714879084097494098542745605324460172680461006303552579466987732938596341830436505942616479890554056163452471835707573885837976471753073413505028206370632139586750855217201926605743452826397576584492732225029497982216694648573014796836126574081158869231364821712046050068243878660143909750030922147254462228826952501087389154612318844202411291844150163167021</span>
<span class="n">N</span> <span class="o">=</span> <span class="mi">10222014062768125922601962004686361136447658578111413896046596746110249358112354000488449664371774177977274016313103826803116662735101208575040021998413602496525815373151213550295992813258424882626853824039678993334143891154760939712139640336395595628492284893024078520796288685014103193630287988814952604029</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">4323184196594280140760873888779221921406692838206184372853784052006066772207175604399047711017170078453742445880600303200397632746051500194774569530024097959399922254605516672962219900174336028512116159752401576376530557036245218800162889461620882177398454137759956927838320086276276377067055171421259852996</span>
<span class="n">R</span> <span class="o">=</span> <span class="n">RealField</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="n">N_s</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">N</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
<span class="n">N_ss</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="n">N</span><span class="o">**</span><span class="mi">4</span><span class="p">)</span>   
<span class="n">t</span> <span class="o">=</span> <span class="n">Integer</span><span class="p">((</span><span class="mi">2</span><span class="o">*</span><span class="n">N_ss</span><span class="o">-</span><span class="mi">49</span><span class="o">*</span><span class="n">N_s</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">N</span><span class="o">+</span><span class="mi">170</span><span class="o">*</span><span class="n">N_s</span><span class="p">))</span>

<span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">k</span><span class="p">,</span><span class="n">u</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="n">N</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="n">u</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">small_roots</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">e</span><span class="p">)),</span> <span class="p">(</span><span class="n">isqrt</span><span class="p">(</span><span class="n">t</span><span class="p">),</span> <span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="p">),</span> <span class="n">m</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"resultants"</span><span class="p">,</span> <span class="n">lattice_reduction</span><span class="o">=</span><span class="n">flatter</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">k</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">k</span><span class="p">,</span><span class="n">u</span> <span class="o">=</span> <span class="n">ZZ</span><span class="p">(</span><span class="n">k</span><span class="p">),</span><span class="n">ZZ</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
<span class="n">phi</span> <span class="o">=</span> <span class="n">N</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="n">u</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">N</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span>
<span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">k</span><span class="o">*</span><span class="n">phi</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="n">e</span>
<span class="k">assert</span> <span class="n">e</span><span class="o">*</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span> <span class="o">==</span> <span class="n">k</span><span class="o">*</span><span class="n">phi</span>

<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">phi</span><span class="o">-</span><span class="n">d</span><span class="p">,</span> <span class="n">N</span><span class="p">)))</span>
<span class="c1"># L3AK{L0wK3y_Th1S_RSA_i5_kiNda_ScuFf3D_LmA0}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Coppersmith small roots" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Secret^2 (L3AK 2025)</title><link href="http://localhost:4000/secret-squared/" rel="alternate" type="text/html" title="Secret^2 (L3AK 2025)" /><published>2025-07-11T12:00:00+02:00</published><updated>2025-07-11T12:00:00+02:00</updated><id>http://localhost:4000/secret-squared</id><content type="html" xml:base="http://localhost:4000/secret-squared/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span> <span class="k">as</span> <span class="n">b2l</span>

<span class="n">secret_1</span> <span class="o">=</span> <span class="n">Integer</span><span class="p">(</span><span class="n">b2l</span><span class="p">(</span><span class="sa">b</span><span class="s">'&lt;Redacted 1&gt;'</span><span class="p">))</span>
<span class="n">secret_2</span> <span class="o">=</span> <span class="n">Integer</span><span class="p">(</span><span class="n">b2l</span><span class="p">(</span><span class="sa">b</span><span class="s">'&lt;Redacted 2&gt;'</span><span class="p">))</span>

<span class="k">assert</span> <span class="n">secret_1</span><span class="p">.</span><span class="n">nbits</span><span class="p">()</span> <span class="o">==</span> <span class="mi">271</span>
<span class="k">assert</span> <span class="n">secret_2</span><span class="p">.</span><span class="n">nbits</span><span class="p">()</span> <span class="o">==</span> <span class="mi">247</span>

<span class="n">real_secret</span> <span class="o">=</span> <span class="n">Mod</span><span class="p">(</span><span class="n">secret_1</span><span class="p">,</span><span class="mi">2</span><span class="o">^</span><span class="mi">1337</span> <span class="o">+</span> <span class="mi">1337</span><span class="p">)</span><span class="o">/</span><span class="n">secret_2</span> <span class="o">+</span> <span class="mi">1337</span><span class="o">^</span><span class="mi">1337</span>
<span class="n">not_secret_anymore</span> <span class="o">=</span> <span class="nb">hex</span><span class="p">(</span><span class="n">real_secret</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">not_secret_anymore</span><span class="p">)</span>

<span class="c1"># assert flag  == b"L3AK{" + secret_1 + secret_2 + b"}"
# 0xaf67951fc756caf05e1cb834854880fa6b3919aa390a42a3f2cdcc1943b959192cebea290e4bbe41b517056b95903e9f6ec10d490fdde72cf17a7ab3e65d61fc9c0a750dc20d52626f78c7200744fb9bcc0e7b9f33dd5a83df5d05de7258404b5c56ced4b57e63ab0c7c4761ce76d789734d705e8e137a2000c678c5b90b1df6169499ef39184622d4f83a03985ba8038fdb05aae52d5f2c04f8b8f7a4ac2a54b3d0be67c71752
</span></code></pre></div></div>

<h5 id="setting-up-the-bivariate-polynomial">Setting up the bivariate polynomial</h5>

<p>The encryption script gives us:</p>

\[\large x \equiv \left( \frac{s_{1}}{s_{2}}+k \right)^{2} \mod n\]

<p>Where we define $k$ and $n$ as:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">1337</span> <span class="o">+</span> <span class="mi">1337</span>
<span class="n">k</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">1337</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
</code></pre></div></div>

<p>Expanding the square, we get:</p>

\[\large x \equiv \frac{s_{1}^{2}}{s_{2}^{2}} + 2 \cdot k\cdot \frac{s_{1}}{s_{2}} + k^{2} \mod n\]

<p>Multiplying both sides with $s_{2}^{2}$, we eliminate the fractions and rearrange to zero:</p>

\[\large \begin{align}
\nonumber x \equiv \frac{s_{1}^{2}}{s_{2}^{2}} + 2 \cdot k\cdot \frac{s_{1}}{s_{2}} + k^{2} \mod n \\
\nonumber x s_{2}^{2} \equiv s_{1}^{2} + 2 k s_{1} s_{2} + s_{2}^{2} k^{2} \mod n \\
\nonumber s_{1}^{2} + 2 k s_{1} s_{2} + s_{2}^{2} k^{2}- x s_{2}^{2} \equiv 0 \mod n \\
\nonumber s_{1}^{2} + 2 k s_{1} s_{2} + s_{2}^{2}(k^{2}- x) \equiv 0 \mod n
\end{align}\]

<p>This is a bivariate polynomial with small roots $s_{1}$ and $s_{2}$ which are bound by $2^{271}$ and $2^{247}$ respectively.</p>

<h5 id="solving-with-coppersmith">Solving with coppersmith</h5>

<p>This bivariate polynomial can easily be solved using coppersmith. To do this, I will use <code class="language-plaintext highlighter-rouge">cuso</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="n">s1</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">k</span><span class="o">*</span><span class="n">s1</span><span class="o">*</span><span class="n">s2</span> <span class="o">+</span> <span class="n">s2</span><span class="o">^</span><span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">k</span><span class="o">^</span><span class="mi">2</span><span class="o">-</span><span class="n">x</span><span class="p">)</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span><span class="o">=</span><span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span><span class="o">=</span> <span class="p">{</span>
	    <span class="n">s1</span><span class="p">:</span> <span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="mi">271</span><span class="p">),</span>
	    <span class="n">s2</span><span class="p">:</span> <span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="mi">247</span><span class="p">),</span>
	<span class="p">},</span>
    <span class="n">modulus</span><span class="o">=</span><span class="n">n</span>
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no roots found"</span>
<span class="n">s1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">s1</span><span class="p">])</span>
<span class="n">s2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">s2</span><span class="p">])</span>
</code></pre></div></div>

<p>with $s_{1}$ and $s_{1}$ recovered, we can easily decode the flag:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"L3AK{"</span> <span class="o">+</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">s1</span><span class="si">:</span><span class="n">x</span><span class="si">}{</span><span class="n">s2</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">').decode()</span><span class="si">}</span><span class="s">"</span> <span class="o">+</span> <span class="s">"}"</span><span class="p">)</span>
<span class="c1"># L3AK{Squ4R1ng_mY_s3cr3t_w4Snt_5m4rT_b1Vari4Te_p0lyN0MiaLs_4r3_s0Lvabl3}
</span></code></pre></div></div>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span>
<span class="kn">import</span> <span class="nn">cuso</span>

<span class="n">s1</span><span class="p">,</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">"s1 s2"</span><span class="p">)</span>

<span class="n">x</span> <span class="o">=</span> <span class="mh">0xaf67951fc756caf05e1cb834854880fa6b3919aa390a42a3f2cdcc1943b959192cebea290e4bbe41b517056b95903e9f6ec10d490fdde72cf17a7ab3e65d61fc9c0a750dc20d52626f78c7200744fb9bcc0e7b9f33dd5a83df5d05de7258404b5c56ced4b57e63ab0c7c4761ce76d789734d705e8e137a2000c678c5b90b1df6169499ef39184622d4f83a03985ba8038fdb05aae52d5f2c04f8b8f7a4ac2a54b3d0be67c71752</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">1337</span> <span class="o">+</span> <span class="mi">1337</span>
<span class="n">k</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">1337</span><span class="p">,</span><span class="mi">1337</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">s1</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">k</span><span class="o">*</span><span class="n">s1</span><span class="o">*</span><span class="n">s2</span> <span class="o">+</span> <span class="n">s2</span><span class="o">^</span><span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">k</span><span class="o">^</span><span class="mi">2</span><span class="o">-</span><span class="n">x</span><span class="p">)</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span><span class="o">=</span><span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span><span class="o">=</span> <span class="p">{</span>
	    <span class="n">s1</span><span class="p">:</span> <span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="mi">270</span><span class="p">,</span> <span class="mi">2</span><span class="o">^</span><span class="mi">271</span><span class="p">),</span>
	    <span class="n">s2</span><span class="p">:</span> <span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="mi">246</span><span class="p">,</span> <span class="mi">2</span><span class="o">^</span><span class="mi">247</span><span class="p">),</span>
	<span class="p">},</span>
    <span class="n">modulus</span><span class="o">=</span><span class="n">n</span>
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no roots found"</span>
<span class="n">s1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">s1</span><span class="p">])</span>
<span class="n">s2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">s2</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"L3AK{"</span> <span class="o">+</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">s1</span><span class="si">:</span><span class="n">x</span><span class="si">}{</span><span class="n">s2</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">').decode()</span><span class="si">}</span><span class="s">"</span> <span class="o">+</span> <span class="s">"}"</span><span class="p">)</span>
<span class="c1"># L3AK{Squ4R1ng_mY_s3cr3t_w4Snt_5m4rT_b1Vari4Te_p0lyN0MiaLs_4r3_s0Lvabl3}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Coppersmith small roots" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Curveware (HTB Business CTF 2025)</title><link href="http://localhost:4000/curveware/" rel="alternate" type="text/html" title="Curveware (HTB Business CTF 2025)" /><published>2025-05-26T13:00:00+02:00</published><updated>2025-05-26T13:00:00+02:00</updated><id>http://localhost:4000/curveware</id><content type="html" xml:base="http://localhost:4000/curveware/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given a set of encrypted files, and an elf binary:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── business-ctf-2025-dev
│   ├── crypto
│   │   ├── curveware
│   │   │   ├── flag.txt.vlny0742e9337a
│   │   │   ├── poc.py.vlnyc2b7865f66
│   │   │   ├── README.md.vlnya68395585b
│   │   │   └── task.txt.vlnyde7ca30df0
│   │   ├── early-bird
│   │   │   ├── flag.txt.vlny4a13aac40e
│   │   │   ├── README.md.vlny1d615936ca
│   │   │   └── task.txt.vlny152e012de7
│   │   ├── hidden-handshake
│   │   │   ├── flag.txt.vlny483931d01c
│   │   │   ├── README.md.vlnyda959133e7
│   │   │   └── task.txt.vlny37927847f9
│   │   ├── phoenix-zero-trust
│   │   │   ├── flag.txt.vlny42db696fd5
│   │   │   ├── README.md.vlnyd38f3522f4
│   │   │   └── task.txt.vlny383594e3ef
│   │   └── transcoded
│   │       ├── flag.txt.vlny048404e260
│   │       ├── README.md.vlnyd323bde76d
│   │       └── task.txt.vlnye5c611e15a
│   ├── README.md.vlny311cf84811
│   └── scenario.md.vlnycba760a47c
└── curveware

&gt; file curveware
curveware: PE32+ executable (console) x86-64, for MS Windows, 15 sections
</code></pre></div></div>

<p>This looks like a ransomware challenge. Based on the challenge title, it likely involves elliptic curves in some way. To find out what encryption has been used, and what cryptographic weakness can be used to decrypt the files, we have to reverse engineer the elf binary.</p>

<h5 id="reverse-engineering">Reverse engineering</h5>

<p>By disassembling the binary in Ghidra, we can get some insight into what encryption routine has been used on the files. The main function begins by calling the function <code class="language-plaintext highlighter-rouge">GetCurveParameters(local_9e8)</code></p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">GetCurveParameters</span><span class="p">(</span><span class="n">undefined8</span> <span class="n">param_1</span><span class="p">){</span>
  <span class="kt">int</span> <span class="n">iVar1</span><span class="p">;</span>
  <span class="n">longlong</span> <span class="n">local_10</span><span class="p">;</span>
  
  <span class="n">iVar1</span> <span class="o">=</span> <span class="n">ec_get_curve_params_by_type</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_10</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">local_10</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">iVar1</span> <span class="o">=</span> <span class="n">import_params</span><span class="p">(</span><span class="n">param_1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">iVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">exit</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The function essentially just calls <code class="language-plaintext highlighter-rouge">ec_get_curve_params_by_type(4,&amp;local_10)</code> with curve type 4 and then instantiates the curve params with <code class="language-plaintext highlighter-rouge">import_params(param_1)</code>. One approach may be to investigate which elliptic curve corresponds to type 4 in a lookup table, but inspecting <code class="language-plaintext highlighter-rouge">ec_get_curve_params_by_type</code> reveals the curve in question:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">undefined8</span> <span class="nf">ec_get_curve_params_by_type</span><span class="p">(</span><span class="kt">int</span> <span class="n">param_1</span><span class="p">,</span><span class="n">undefined8</span> <span class="o">*</span><span class="n">param_2</span><span class="p">){</span>
  <span class="n">undefined8</span> <span class="n">uVar1</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">local_c</span><span class="p">;</span>
  
  <span class="k">if</span> <span class="p">((</span><span class="n">param_1</span> <span class="o">==</span> <span class="mi">4</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">param_2</span> <span class="o">!=</span> <span class="p">(</span><span class="n">undefined8</span> <span class="o">*</span><span class="p">)</span><span class="mh">0x0</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">uVar1</span> <span class="o">=</span> <span class="n">local_strlen</span><span class="p">(</span><span class="s">"SECP256R1"</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_c</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">((</span><span class="kt">int</span><span class="p">)</span><span class="n">uVar1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">local_c</span> <span class="o">!=</span> <span class="mi">9</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mh">0xffffffff</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="o">*</span><span class="n">param_2</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">secp256r1_str_params</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">uVar1</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="mh">0xffffffff</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>So the program uses <code class="language-plaintext highlighter-rouge">secp256r1</code>, also known as <code class="language-plaintext highlighter-rouge">P-256</code>. We can retrieve the curve parameters from https://neuromancer.sk/std/secg/secp256r1 later. After loading the curve parameters, the main function generates a 32-byte random value <code class="language-plaintext highlighter-rouge">local_bc8</code> by calling <code class="language-plaintext highlighter-rouge">get_random(local_bc8,0x20)</code>. Afterwards, the program begins traversing the sub-directories and processes the files in <code class="language-plaintext highlighter-rouge">process_directory(pcVar5,lVar1,local_bc8,local_1578)</code>. Here, the 32-byte key <code class="language-plaintext highlighter-rouge">local_bc8</code> is passed as an argument. Also, the curve parameters <code class="language-plaintext highlighter-rouge">local_1578</code> are passed as well.</p>

<p><code class="language-plaintext highlighter-rouge">process_directory</code> is a recursive function which further traverses sub-directories, handling one directory at a time. The most notable parts of the function include:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">process_directory</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">param_1</span><span class="p">,</span><span class="kt">size_t</span> <span class="n">param_2</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_3</span><span class="p">,</span><span class="n">undefined8</span> <span class="o">*</span><span class="n">param_4</span><span class="p">){</span>
<span class="p">[...]</span>
	<span class="n">DVar3</span> <span class="o">=</span> <span class="n">GetFileSize</span><span class="p">(</span><span class="n">hFile</span><span class="p">,(</span><span class="n">LPDWORD</span><span class="p">)</span><span class="mh">0x0</span><span class="p">);</span>
	<span class="n">lpBuffer_00</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">((</span><span class="n">ulonglong</span><span class="p">)(</span><span class="n">DVar3</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">);</span>
	<span class="n">BVar4</span> <span class="o">=</span> <span class="n">ReadFile</span><span class="p">(</span><span class="n">hFile</span><span class="p">,</span><span class="n">lpBuffer_00</span><span class="p">,</span><span class="n">DVar3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1e4</span><span class="p">,(</span><span class="n">LPOVERLAPPED</span><span class="p">)</span><span class="mh">0x0</span><span class="p">);</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">BVar4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">exit</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="n">encrypt_data</span><span class="p">(</span><span class="n">lpBuffer_00</span><span class="p">,</span><span class="n">local_1e4</span><span class="p">,</span><span class="n">param_3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1d8</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1dc</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1d0</span><span class="p">);</span>
	<span class="n">lVar11</span> <span class="o">=</span> <span class="n">local_1d0</span><span class="p">;</span>
	<span class="n">lpBuffer</span> <span class="o">=</span> <span class="n">local_1d8</span><span class="p">;</span>
	<span class="n">DVar3</span> <span class="o">=</span> <span class="n">local_1dc</span><span class="p">;</span>
	<span class="n">sign_data</span><span class="p">(</span><span class="n">local_1c8</span><span class="p">,</span><span class="n">param_4</span><span class="p">,</span><span class="n">param_3</span><span class="p">,</span><span class="n">local_1d8</span><span class="p">,</span><span class="n">local_1dc</span><span class="p">,</span><span class="n">local_1d0</span><span class="p">);</span>
<span class="p">[...]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This section essentially reads in a file into the buffer <code class="language-plaintext highlighter-rouge">lpBuffer_00</code>, before calling the encryption routine <code class="language-plaintext highlighter-rouge">encrypt_data(lpBuffer_00,local_1e4,param_3,&amp;local_1d8,&amp;local_1dc,&amp;local_1d0)</code>. The variable <code class="language-plaintext highlighter-rouge">param_3</code> corresponds to the 32-byte key that was generated earlier. The encryption routine is as follows:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">encrypt_data</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">param_1</span><span class="p">,</span><span class="n">uint</span> <span class="n">param_2</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_3</span><span class="p">,</span><span class="n">longlong</span> <span class="o">*</span><span class="n">param_4</span><span class="p">,</span><span class="n">uint</span> <span class="o">*</span><span class="n">param_5</span><span class="p">,</span> <span class="n">undefined8</span> <span class="o">*</span><span class="n">param_6</span><span class="p">){</span>
<span class="p">[...]</span>
  <span class="n">sha256</span><span class="p">(</span><span class="n">param_1</span><span class="p">,</span><span class="n">param_2</span><span class="p">);</span>
  <span class="n">uVar5</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulonglong</span><span class="p">)</span><span class="n">param_2</span><span class="p">;</span>
  <span class="k">do</span> <span class="p">{</span>
    <span class="n">uVar4</span> <span class="o">=</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">uVar5</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
    <span class="o">*</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)(</span><span class="o">*</span><span class="n">param_4</span> <span class="o">+</span> <span class="n">uVar5</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">uVar6</span><span class="p">;</span>
    <span class="n">uVar5</span> <span class="o">=</span> <span class="p">(</span><span class="n">ulonglong</span><span class="p">)</span><span class="n">uVar4</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">uVar3</span> <span class="o">!=</span> <span class="n">uVar4</span><span class="p">);</span>
  <span class="n">get_random</span><span class="p">(</span><span class="o">&amp;</span><span class="n">local_158</span><span class="p">,</span><span class="mh">0x10</span><span class="p">);</span>
  <span class="n">AES_init_ctx_iv</span><span class="p">(</span><span class="n">local_148</span><span class="p">,</span><span class="n">param_3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_158</span><span class="p">);</span>
  <span class="n">AES_CBC_encrypt_buffer</span><span class="p">(</span><span class="n">local_148</span><span class="p">,</span><span class="o">*</span><span class="n">param_4</span><span class="p">,</span><span class="o">*</span><span class="n">param_5</span><span class="p">);</span>
<span class="p">[...]</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The plaintext <code class="language-plaintext highlighter-rouge">param_1</code> is hashed using SHA256. The hashed plaintext is saved into <code class="language-plaintext highlighter-rouge">param_6</code>. Then, a 16-byte random IV  is generated with <code class="language-plaintext highlighter-rouge">get_random(&amp;local_158,0x10)</code> and is passed to <code class="language-plaintext highlighter-rouge">AES_init_ctx_iv()</code> along with the 32-byte encryption key <code class="language-plaintext highlighter-rouge">param_3</code>. The plaintext is encrypted, and the IV is appended to the ciphertext before returning.</p>

<p>Back in the <code class="language-plaintext highlighter-rouge">process_directory</code> function, the ciphertext is signed with <code class="language-plaintext highlighter-rouge">sign_data(local_1c8,param_4,param_3,local_1d8,local_1dc,local_1d0)</code>. Crucially, the AES key <code class="language-plaintext highlighter-rouge">param_3</code> is passed to this function along with the ciphertext <code class="language-plaintext highlighter-rouge">local_1d8</code>, curve parameters <code class="language-plaintext highlighter-rouge">param_4</code> and plaintext hash <code class="language-plaintext highlighter-rouge">local_1d0</code>.</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">sign_data</span><span class="p">(</span><span class="n">longlong</span> <span class="n">param_1</span><span class="p">,</span><span class="n">longlong</span> <span class="n">param_2</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_3</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_4</span><span class="p">,</span> <span class="n">undefined4</span> <span class="n">param_5</span><span class="p">,</span><span class="n">undefined8</span> <span class="n">param_6</span><span class="p">){</span>
<span class="p">[...]</span>
  <span class="n">sha256</span><span class="p">(</span><span class="n">param_4</span><span class="p">,</span><span class="n">param_5</span><span class="p">,</span><span class="n">local_678</span><span class="p">);</span>
  <span class="n">nn_init_from_buf</span><span class="p">(</span><span class="n">local_428</span><span class="p">,</span><span class="n">local_678</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
  <span class="n">nn_init_from_buf</span><span class="p">(</span><span class="n">local_578</span><span class="p">,</span><span class="n">param_3</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
  <span class="n">nn_init_from_buf</span><span class="p">(</span><span class="n">local_5e8</span><span class="p">,</span><span class="n">param_6</span><span class="p">,</span><span class="mh">0x20</span><span class="p">);</span>
<span class="p">[...]</span>
  <span class="n">prj_pt_mul</span><span class="p">(</span><span class="n">local_1c8</span><span class="p">,</span><span class="n">local_5e8</span><span class="p">,</span><span class="n">param_2</span> <span class="o">+</span> <span class="mh">0x560</span><span class="p">);</span>
  <span class="n">prj_pt_to_aff</span><span class="p">(</span><span class="n">local_2d8</span><span class="p">,</span><span class="n">local_1c8</span><span class="p">);</span>
  <span class="n">nn_mod_sub</span><span class="p">(</span><span class="n">local_3b8</span><span class="p">,</span><span class="n">local_428</span><span class="p">,</span><span class="n">local_2d8</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_658</span><span class="p">);</span>
  <span class="n">nn_modinv_fermat</span><span class="p">(</span><span class="n">local_508</span><span class="p">,</span><span class="n">local_578</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_658</span><span class="p">);</span>
  <span class="n">nn_mod_sub</span><span class="p">(</span><span class="n">local_498</span><span class="p">,</span><span class="n">local_5e8</span><span class="p">,</span><span class="n">local_3b8</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_658</span><span class="p">);</span>
  <span class="n">nn_mod_mul</span><span class="p">(</span><span class="n">local_348</span><span class="p">,</span><span class="n">local_508</span><span class="p">,</span><span class="n">local_498</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_658</span><span class="p">);</span>
  <span class="n">nn_export_to_buf</span><span class="p">(</span><span class="n">param_1</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span><span class="n">local_3b8</span><span class="p">);</span>
  <span class="n">nn_export_to_buf</span><span class="p">(</span><span class="n">param_1</span> <span class="o">+</span> <span class="mh">0x20</span><span class="p">,</span><span class="mh">0x20</span><span class="p">,</span><span class="n">local_348</span><span class="p">);</span>
  <span class="k">return</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>This signing routine essentially performs a series of computations like follows:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">sha256(param_4,param_5,local_678)</code> is the SHA256 of the ciphertext</li>
  <li><code class="language-plaintext highlighter-rouge">nn_init_from_buf(local_428,local_678,0x20)</code> loads the ciphertext hash $z$ to <code class="language-plaintext highlighter-rouge">local_428</code></li>
  <li><code class="language-plaintext highlighter-rouge">nn_init_from_buf(local_578,param_3,0x20)</code> loads the AES key $d$ to <code class="language-plaintext highlighter-rouge">local_578</code></li>
  <li><code class="language-plaintext highlighter-rouge">nn_init_from_buf(local_5e8,param_6,0x20)</code> loads the nonce $k$ (plaintext hash) to <code class="language-plaintext highlighter-rouge">local_5e8</code></li>
  <li><code class="language-plaintext highlighter-rouge">prj_pt_mul(local_1c8,local_5e8,param_2 + 0x560)</code> calculates $R = k \cdot G$</li>
  <li><code class="language-plaintext highlighter-rouge">prj_pt_to_aff(local_2d8,local_1c8)</code> gets the affine coordinate $R.x$</li>
  <li><code class="language-plaintext highlighter-rouge">nn_mod_sub(local_3b8,local_428,local_2d8,&amp;local_658)</code> calculates $r = (z - R.x) \mod n$</li>
  <li><code class="language-plaintext highlighter-rouge">nn_modinv_fermat(local_508,local_578,&amp;local_658)</code> calculates $d^{-1} \mod n$</li>
  <li><code class="language-plaintext highlighter-rouge">nn_mod_sub(local_498,local_5e8,local_3b8,&amp;local_658)</code> calculates $k - r \mod n$</li>
  <li><code class="language-plaintext highlighter-rouge">nn_mod_mul(local_348,local_508,local_498,&amp;local_658)</code> calculates $s = (k-r)\cdot d^{-1} \mod n$</li>
</ul>

<p>Where $n$ is the curve order of <code class="language-plaintext highlighter-rouge">secp256r1</code>. The signature, consisting of values $(r,s)$, are returned by the function. The signing process looks similar to ECDSA, but it is not the same. We have $k = r+sd$ while ECDSA uses $k = s^{-1}(z+rd)$</p>

<p>Returning to <code class="language-plaintext highlighter-rouge">process_directory</code>, the function does some final crucial steps:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">*</span><span class="n">_Memory</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)(</span><span class="n">lVar11</span> <span class="o">+</span> <span class="mh">0x1b</span><span class="p">);</span>
<span class="o">*</span><span class="p">(</span><span class="n">undefined1</span> <span class="o">*</span><span class="p">)(</span><span class="n">_Memory</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">undefined1</span> <span class="o">*</span><span class="p">)(</span><span class="n">lVar11</span> <span class="o">+</span> <span class="mh">0x1f</span><span class="p">);</span>
<span class="n">_Source</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="mh">0xb</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">puVar12</span> <span class="o">=</span> <span class="n">_Memory</span><span class="p">;</span>
<span class="n">pcVar10</span> <span class="o">=</span> <span class="n">_Source</span><span class="p">;</span>
<span class="k">do</span> <span class="p">{</span>
	<span class="n">uVar1</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">undefined1</span> <span class="o">*</span><span class="p">)</span><span class="n">puVar12</span><span class="p">;</span>
	<span class="n">pcVar15</span> <span class="o">=</span> <span class="n">pcVar10</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
	<span class="n">puVar12</span> <span class="o">=</span> <span class="p">(</span><span class="n">undefined4</span> <span class="o">*</span><span class="p">)((</span><span class="n">longlong</span><span class="p">)</span><span class="n">puVar12</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
	<span class="n">__mingw_snprintf</span><span class="p">(</span><span class="n">pcVar10</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="o">&amp;</span><span class="p">.</span><span class="n">rdata</span><span class="p">,</span><span class="n">uVar1</span><span class="p">);</span>
	<span class="n">pcVar10</span> <span class="o">=</span> <span class="n">pcVar15</span><span class="p">;</span>
<span class="p">}</span> <span class="k">while</span> <span class="p">(</span><span class="n">pcVar15</span> <span class="o">!=</span> <span class="n">_Source</span> <span class="o">+</span> <span class="mi">10</span><span class="p">);</span>
<span class="n">DVar5</span> <span class="o">=</span> <span class="n">SetFilePointer</span><span class="p">(</span><span class="n">hFile</span><span class="p">,</span><span class="mi">0</span><span class="p">,(</span><span class="n">PLONG</span><span class="p">)</span><span class="mh">0x0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
<span class="n">BVar4</span> <span class="o">=</span> <span class="n">WriteFile</span><span class="p">(</span><span class="n">hFile</span><span class="p">,</span><span class="n">local_1c8</span><span class="p">,</span><span class="mh">0x40</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1e0</span><span class="p">,(</span><span class="n">LPOVERLAPPED</span><span class="p">)</span><span class="mh">0x0</span><span class="p">);</span>
<span class="n">BVar4</span> <span class="o">=</span> <span class="n">WriteFile</span><span class="p">(</span><span class="n">hFile</span><span class="p">,</span><span class="n">lpBuffer</span><span class="p">,</span><span class="n">DVar3</span><span class="p">,</span><span class="o">&amp;</span><span class="n">local_1e0</span><span class="p">,(</span><span class="n">LPOVERLAPPED</span><span class="p">)</span><span class="mh">0x0</span><span class="p">);</span>
<span class="n">CloseHandle</span><span class="p">(</span><span class="n">hFile</span><span class="p">);</span>
<span class="n">pcVar10</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">calloc</span><span class="p">(</span><span class="n">lVar8</span> <span class="o">+</span> <span class="mh">0x11</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
<span class="n">strncpy</span><span class="p">(</span><span class="n">pcVar10</span><span class="p">,</span><span class="n">pcVar7</span><span class="p">,</span><span class="n">lVar8</span> <span class="o">+</span> <span class="mi">1U</span><span class="p">);</span>
<span class="n">sVar6</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">pcVar10</span><span class="p">);</span>
<span class="n">builtin_strncpy</span><span class="p">(</span><span class="n">pcVar10</span> <span class="o">+</span> <span class="n">sVar6</span><span class="p">,</span><span class="s">".vlny"</span><span class="p">,</span><span class="mi">6</span><span class="p">);</span>
<span class="n">strncat</span><span class="p">(</span><span class="n">pcVar10</span><span class="p">,</span><span class="n">_Source</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span>
<span class="n">BVar4</span> <span class="o">=</span> <span class="n">MoveFileA</span><span class="p">(</span><span class="n">pcVar7</span><span class="p">,</span><span class="n">pcVar10</span><span class="p">);</span> 
</code></pre></div></div>

<p>This part essentially appends the suffix <code class="language-plaintext highlighter-rouge">.vlny</code> to the encrypted file’s filename, followed by 10 hex digits (5 bytes) of the plaintext hash. This is a critical part, as the plaintext hash is used as the nonce during the signing process, meaning we have a partial nonce leak for every signature. The 5 bytes correspond to the 40 least significant bits. This final part also writes the encrypted file contents, consisting of the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>signing variable s (32 bytes)
signing variable r (32 bytes)
ciphertext 
IV (16 bytes)
</code></pre></div></div>

<h5 id="decrypting-files">Decrypting files</h5>

<p>With a solid overview over the encryption process, signing process, and the file structure, the cryptographic vulnerability becomes quite apparent. 40/256 bits are leaked for all 18 signatures, allowing for the recovery of the private key $d$ by setting up and solving a hidden number problem instance. Since the private key $d$ is used for both signing and AES encryption, recovering the original plaintext file contents becomes trivial.</p>

<p>Like mentioned earlier, the custom signing algorithm uses the equation:</p>

\[\large k = r + s\cdot d\]

<p>Since we have a partial leak of the nonce, we can rewrite to:</p>

\[\large \begin{align}
\nonumber leak + 2^{40} \cdot x &amp;\equiv r + s \cdot d \mod n\\
\nonumber s \cdot d - 2^{40}\cdot x &amp;\equiv leak - r \mod n \\
\nonumber 2^{40^{-1}} \cdot s \cdot d - x &amp;\equiv 2^{40^{-1}}(leak - r) \mod n \\
\nonumber x - 2^{40^{-1}}\cdot s\cdot d+2^{40^{-1}}(leak-r) &amp;\equiv 0 \mod n
\end{align}\]

<p>Which is precisely a hidden number problem instance: $\beta_{i} - t_{i} \cdot \alpha + a_{i} \equiv 0 \mod p$ with $t = 2^{40^{-1}}\cdot s$ and $a = 2^{40^{-1}}(leak-r)$</p>

<p>The private key $d$ can be recovered by running LLL on the following lattice:</p>

\[\large B' = \begin{bmatrix}
n &amp;  &amp;  &amp;  &amp;  &amp; \\
 &amp; n &amp;  &amp;  &amp;  &amp; \\
 &amp;  &amp; \ddots &amp;  &amp;  &amp; \\
 &amp;  &amp;  &amp; n &amp;  &amp; \\
t_{1} &amp; t_{2} &amp; \dots &amp; t_{m} &amp; 2^{40}/n  \\
a_{1} &amp; a_{2} &amp; \dots &amp; a_{m} &amp;  &amp; 2^{40}
\end{bmatrix}\]

<p>With short vector $\large u’ = (x_{1},\dots,x_{m},2^{40}d/n,-2^{40})$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">M</span> <span class="o">=</span> <span class="n">identity_matrix</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span><span class="o">*</span><span class="n">n</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">vector</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">vector</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">vector</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">m</span> <span class="o">+</span> <span class="p">[</span><span class="n">B</span><span class="o">/</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">]))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">vector</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">m</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span>   <span class="n">B</span><span class="p">]))</span>

<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">M</span><span class="p">.</span><span class="n">LLL</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="n">B</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="n">n</span><span class="o">/</span><span class="n">B</span> <span class="o">%</span> <span class="n">n</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"d = </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">break</span>
<span class="c1"># d = 0xc5120eda0305ce74a125b5bd727e4fee5a24457ab376b69578c179f8440881e0
</span></code></pre></div></div>

<p>With the private key recovered, the <code class="language-plaintext highlighter-rouge">flag.txt.vlny0742e9337a</code> file can be decrypted, giving us our flag!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTB{m4lw4r3_d3v3l0p3rs_sh0uld_sTuDy_m0r3_crypt0}
</code></pre></div></div>

<h5 id="solvesage">solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">unpad</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">long_to_bytes</span>

<span class="n">n</span> <span class="o">=</span> <span class="mh">0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551</span>
<span class="n">B</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">40</span>     
<span class="n">Binv</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>                   

<span class="n">root</span>  <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="s">'business-ctf-2025-dev'</span><span class="p">)</span>
<span class="n">files</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">root</span><span class="p">.</span><span class="n">rglob</span><span class="p">(</span><span class="s">'*.vlny*'</span><span class="p">))</span>

<span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">leak</span> <span class="o">=</span> <span class="p">[],</span> <span class="p">[],</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
    <span class="n">blob</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read_bytes</span><span class="p">()</span>
    <span class="n">r</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">blob</span><span class="p">[</span>  <span class="p">:</span><span class="mi">32</span><span class="p">]))</span>
    <span class="n">s</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">blob</span><span class="p">[</span><span class="mi">32</span><span class="p">:</span><span class="mi">64</span><span class="p">]))</span>
    <span class="n">leak</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">suffix</span><span class="p">[</span><span class="mi">5</span><span class="p">:],</span> <span class="mi">16</span><span class="p">))</span>

<span class="n">m</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">t</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">ri</span><span class="p">,</span> <span class="n">si</span><span class="p">,</span> <span class="n">li</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">leak</span><span class="p">):</span>
    <span class="n">t</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">Binv</span> <span class="o">*</span> <span class="n">si</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
    <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="o">-</span><span class="n">Binv</span> <span class="o">*</span> <span class="p">(</span><span class="n">li</span> <span class="o">-</span> <span class="n">ri</span><span class="p">))</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>

<span class="n">M</span> <span class="o">=</span> <span class="n">identity_matrix</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span><span class="o">*</span><span class="n">n</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">vector</span><span class="p">(</span><span class="n">t</span><span class="p">))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">vector</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">vector</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">m</span> <span class="o">+</span> <span class="p">[</span><span class="n">B</span><span class="o">/</span><span class="n">n</span><span class="p">,</span> <span class="mi">0</span><span class="p">]))</span>
<span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">vector</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">m</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span>   <span class="n">B</span><span class="p">]))</span>

<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">M</span><span class="p">.</span><span class="n">LLL</span><span class="p">():</span>
    <span class="k">if</span> <span class="nb">abs</span><span class="p">(</span><span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="n">B</span><span class="p">:</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="n">n</span><span class="o">/</span><span class="n">B</span> <span class="o">%</span> <span class="n">n</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"d = </span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="k">break</span>

<span class="n">key</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">files</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="c1"># curvewave flagfile
</span><span class="n">blob</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read_bytes</span><span class="p">()</span>
<span class="n">ct</span>  <span class="o">=</span> <span class="n">blob</span><span class="p">[</span><span class="mi">64</span><span class="p">:]</span>          
<span class="n">iv</span>  <span class="o">=</span> <span class="n">ct</span><span class="p">[</span><span class="o">-</span><span class="mi">16</span><span class="p">:]</span>
<span class="n">aes</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
<span class="n">pt</span>  <span class="o">=</span> <span class="n">unpad</span><span class="p">(</span><span class="n">aes</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ct</span><span class="p">[:</span><span class="o">-</span><span class="mi">16</span><span class="p">]),</span> <span class="mi">16</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>   
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Elliptic Curve" /><category term="Hidden Number Problem" /><category term="Ransomware" /><category term="Reverse Engineering" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Dried Up Crypto (ictf Round 56)</title><link href="http://localhost:4000/dried-up-crypto/" rel="alternate" type="text/html" title="Dried Up Crypto (ictf Round 56)" /><published>2025-05-01T10:00:00+02:00</published><updated>2025-05-01T10:00:00+02:00</updated><id>http://localhost:4000/dried-up-crypto</id><content type="html" xml:base="http://localhost:4000/dried-up-crypto/"><![CDATA[<h5 id="challenge-overview">Challenge Overview</h5>

<p>In this CTF challenge, we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getPrime</span><span class="p">,</span> <span class="n">bytes_to_long</span>
<span class="kn">from</span> <span class="nn">secrets</span> <span class="kn">import</span> <span class="n">randbits</span>

<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'ictf{REDACTED}'</span>

<span class="n">p</span><span class="p">,</span><span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">),</span><span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="k">assert</span><span class="p">((</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">e</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
<span class="k">assert</span><span class="p">((</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="n">e</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>

<span class="n">M1</span><span class="p">,</span><span class="n">M2</span> <span class="o">=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="o">|</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="p">,</span><span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="o">|</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>

<span class="n">P</span><span class="p">,</span><span class="n">Q</span> <span class="o">=</span> <span class="n">p</span> <span class="o">&amp;</span> <span class="n">M1</span><span class="p">,</span> <span class="n">q</span> <span class="o">&amp;</span> <span class="n">M2</span>

<span class="n">n</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">),</span><span class="n">e</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"c = </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"n = </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"M1 = </span><span class="si">{</span><span class="n">M1</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"M2 = </span><span class="si">{</span><span class="n">M2</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"P = </span><span class="si">{</span><span class="n">P</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Q = </span><span class="si">{</span><span class="n">Q</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c = 8727199524595926705764225400506509289328151131514216250729515468155056218121221736963201841068215034487098098953821401326608386786346273720157155314820322698467429532461275463492599870550737132469369170204135115917482423036582822051988921146256688643845978757358407310854847663288337574501668030413804655286776436934536537698538527143491308805754764317305745181888684722727299988112034122487006667085647945475968191154669980943257738894146053667458797138697522920065140999462467096217712503505631649242142240435841977317598886490888750486215707059341912936564463860839090693276780817194811851886409356689470673107532
n = 10644244264245763932368979306576292154978169307980875431845848585515469979129741395711953185867051023317557615618234242176875251628599522772285258093327797679006324429376013569137018200577185349745003553221219229088693373960547344593762243714560234819514388391843307341206257538676824211613659149855441367734883320000869003833119510179206721701295702803923970241717612194010327944659540526556778579813186112749725822081690619963415418470255547473934066594150396804785237389851791915432015775405773476289374397136777722281258153565989398760008739331917818507905928387120867159103459386796293552147742130942785387667101
M1 = 88914640319156584554519907036301003224288784208184838268121846462159927955700945270283676500515406136279062455494762039147468454696771001133686799200482356740310590971170822957938953133862391626427210893445970048978263432949487046574710938280744537191675594575399501647648365744088495505838716001393025318711
M2 = 80710645955732183961498834296041390466353463350909365967073721088344234170831463482355150027971590908133797348848447302046512581471517653450640672441875363390417692734403220383748851502073357434012901646484453882427070643197703826675885986584075167513954328971199897226577585871016371987052379150617824721747
P = 1454713629297571001528363141111343262783446611248718929759592692372410193692959981391616314247878825643517231716578815166717528906295323061858760318849863325461174191466111073232730195560930748935209775742509843564017912569158094461170983358891473208999861629367188907727554105902252420135214355007297361937
Q = 23026771663186153673881188958499640470803688134356820454731962008947492131018559717122163720894546472163872899425608926369661262023609393522302590736445675570962275851657015555698875694838166833166542306554507099577746272183034587942732263335474963112075217970257365953713038351465989425740093838238205086529
</code></pre></div></div>

<p>This is a classic RSA setup. We are given some partial information of the prime factors $p$ and $q$.</p>

<h5 id="recovering-the-prime-factors">Recovering the prime factors</h5>

<p>The encryption script generates two bit-masks $M_{1}$ and $M_{2}$. The bit-masks are generated by OR-ing two series of random bits:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">M1</span> <span class="o">=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="o">|</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">M2</span> <span class="o">=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span> <span class="o">|</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</code></pre></div></div>

<p>Our hints are then generated by AND-ing the prime factors with the bit-masks:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span> <span class="o">=</span> <span class="n">p</span> <span class="o">&amp;</span> <span class="n">M1</span>
<span class="n">Q</span> <span class="o">=</span> <span class="n">q</span> <span class="o">&amp;</span> <span class="n">M2</span>
</code></pre></div></div>

<p>Because $M_{1}$ and $M_{2}$ are generated using OR, around 75% of the prime factors’ bits are leaked. The prime factors can be recovered using a branch-and-prune method. For this, we can utilize the implementation of the good old reliable https://github.com/jvdsn/crypto-attacks/.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p_part</span> <span class="o">=</span> <span class="n">PartialInteger</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">M1</span><span class="p">,</span> <span class="n">bitlen</span><span class="p">)</span>
<span class="n">q_part</span> <span class="o">=</span> <span class="n">PartialInteger</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">M2</span><span class="p">,</span> <span class="n">bitlen</span><span class="p">)</span>
<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">factorize_pq</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">p_part</span><span class="p">,</span> <span class="n">q_part</span><span class="p">)</span>
</code></pre></div></div>

<p>After recovering the prime factors, decryption is trivial.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ictf{4_p4r714l_1nf0rm4710n_r54_w17h0u7_l4771c35}
</code></pre></div></div>

<h5 id="solvesage">solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">PartialInteger</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">bits</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">v</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">m</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">bit_length</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">),</span> <span class="nb">int</span><span class="p">(</span><span class="n">mask</span><span class="p">),</span> <span class="n">bits</span>
    <span class="k">def</span> <span class="nf">to_bits_le</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="nb">str</span><span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span> <span class="k">else</span> <span class="s">'?'</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">bit_length</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">_branch_and_prune_pq</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">p_</span><span class="p">,</span> <span class="n">q_</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">p</span><span class="p">):</span>     
        <span class="k">yield</span> <span class="n">p_</span><span class="p">,</span> <span class="n">q_</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">c1</span> <span class="o">=</span> <span class="p">((</span><span class="n">N</span> <span class="o">-</span> <span class="n">p_</span> <span class="o">*</span> <span class="n">q_</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span>
        <span class="n">p_prev</span><span class="p">,</span> <span class="n">q_prev</span> <span class="o">=</span> <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">for</span> <span class="n">p_bit</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">p_prev</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="p">(</span><span class="n">p_prev</span><span class="p">,):</span>
            <span class="k">for</span> <span class="n">q_bit</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">q_prev</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="p">(</span><span class="n">q_prev</span><span class="p">,):</span>
                <span class="k">if</span> <span class="n">p_bit</span> <span class="o">^^</span> <span class="n">q_bit</span> <span class="o">==</span> <span class="n">c1</span><span class="p">:</span>
                    <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_bit</span><span class="p">,</span> <span class="n">q_bit</span>
                    <span class="k">yield</span> <span class="k">from</span> <span class="n">_branch_and_prune_pq</span><span class="p">(</span>
                        <span class="n">N</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span>
                        <span class="n">p_</span> <span class="o">|</span> <span class="p">(</span><span class="n">p_bit</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">),</span>
                        <span class="n">q_</span> <span class="o">|</span> <span class="p">(</span><span class="n">q_bit</span> <span class="o">&lt;&lt;</span> <span class="n">i</span><span class="p">),</span>
                        <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">p</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">p_prev</span><span class="p">,</span> <span class="n">q_prev</span> 

<span class="k">def</span> <span class="nf">factorize_pq</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">p_part</span><span class="p">,</span> <span class="n">q_part</span><span class="p">):</span>
    <span class="n">p_bits</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span> <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="s">'?'</span> <span class="k">else</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">p_part</span><span class="p">.</span><span class="n">to_bits_le</span><span class="p">()]</span>
    <span class="n">q_bits</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span> <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="s">'?'</span> <span class="k">else</span> <span class="nb">int</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">q_part</span><span class="p">.</span><span class="n">to_bits_le</span><span class="p">()]</span>
    <span class="k">for</span> <span class="n">p_val</span><span class="p">,</span> <span class="n">q_val</span> <span class="ow">in</span> <span class="n">_branch_and_prune_pq</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">p_bits</span><span class="p">,</span> <span class="n">q_bits</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">p_val</span> <span class="o">*</span> <span class="n">q_val</span> <span class="o">==</span> <span class="n">N</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">p_val</span><span class="p">,</span> <span class="n">q_val</span>

<span class="n">e</span>  <span class="o">=</span> <span class="mh">0x10001</span>
<span class="n">c</span>  <span class="o">=</span> <span class="mi">8727199524595926705764225400506509289328151131514216250729515468155056218121221736963201841068215034487098098953821401326608386786346273720157155314820322698467429532461275463492599870550737132469369170204135115917482423036582822051988921146256688643845978757358407310854847663288337574501668030413804655286776436934536537698538527143491308805754764317305745181888684722727299988112034122487006667085647945475968191154669980943257738894146053667458797138697522920065140999462467096217712503505631649242142240435841977317598886490888750486215707059341912936564463860839090693276780817194811851886409356689470673107532</span>
<span class="n">n</span>  <span class="o">=</span> <span class="mi">10644244264245763932368979306576292154978169307980875431845848585515469979129741395711953185867051023317557615618234242176875251628599522772285258093327797679006324429376013569137018200577185349745003553221219229088693373960547344593762243714560234819514388391843307341206257538676824211613659149855441367734883320000869003833119510179206721701295702803923970241717612194010327944659540526556778579813186112749725822081690619963415418470255547473934066594150396804785237389851791915432015775405773476289374397136777722281258153565989398760008739331917818507905928387120867159103459386796293552147742130942785387667101</span>
<span class="n">M1</span> <span class="o">=</span> <span class="mi">88914640319156584554519907036301003224288784208184838268121846462159927955700945270283676500515406136279062455494762039147468454696771001133686799200482356740310590971170822957938953133862391626427210893445970048978263432949487046574710938280744537191675594575399501647648365744088495505838716001393025318711</span>
<span class="n">M2</span> <span class="o">=</span> <span class="mi">80710645955732183961498834296041390466353463350909365967073721088344234170831463482355150027971590908133797348848447302046512581471517653450640672441875363390417692734403220383748851502073357434012901646484453882427070643197703826675885986584075167513954328971199897226577585871016371987052379150617824721747</span>
<span class="n">P</span>  <span class="o">=</span> <span class="mi">1454713629297571001528363141111343262783446611248718929759592692372410193692959981391616314247878825643517231716578815166717528906295323061858760318849863325461174191466111073232730195560930748935209775742509843564017912569158094461170983358891473208999861629367188907727554105902252420135214355007297361937</span>
<span class="n">Q</span>  <span class="o">=</span> <span class="mi">23026771663186153673881188958499640470803688134356820454731962008947492131018559717122163720894546472163872899425608926369661262023609393522302590736445675570962275851657015555698875694838166833166542306554507099577746272183034587942732263335474963112075217970257365953713038351465989425740093838238205086529</span>

<span class="n">bitlen</span> <span class="o">=</span> <span class="mi">1024</span>   
<span class="n">p_part</span> <span class="o">=</span> <span class="n">PartialInteger</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">M1</span><span class="p">,</span> <span class="n">bitlen</span><span class="p">)</span>
<span class="n">q_part</span> <span class="o">=</span> <span class="n">PartialInteger</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">M2</span><span class="p">,</span> <span class="n">bitlen</span><span class="p">)</span>
<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">factorize_pq</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">p_part</span><span class="p">,</span> <span class="n">q_part</span><span class="p">)</span>

<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># ictf{4_p4r714l_1nf0rm4710n_r54_w17h0u7_l4771c35}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Branch and prune" /><summary type="html"><![CDATA[Challenge Overview]]></summary></entry><entry><title type="html">Decision (ictf Round 53)</title><link href="http://localhost:4000/decision/" rel="alternate" type="text/html" title="Decision (ictf Round 53)" /><published>2025-04-30T13:00:00+02:00</published><updated>2025-04-30T13:00:00+02:00</updated><id>http://localhost:4000/decision</id><content type="html" xml:base="http://localhost:4000/decision/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span> 
<span class="kn">from</span> <span class="nn">secrets</span> <span class="kn">import</span> <span class="n">randbits</span>
<span class="k">def</span> <span class="nf">getRandSum</span><span class="p">():</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">randbits</span><span class="p">(</span><span class="mi">256</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">res</span>
    
<span class="k">def</span> <span class="nf">getPrimeSum</span><span class="p">(</span><span class="n">Primes</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">Primes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">res</span>


<span class="n">flag</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">().</span><span class="n">strip</span><span class="p">()</span>
<span class="n">m</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">))[</span><span class="mi">2</span><span class="p">:]</span>
<span class="n">Primes</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
    <span class="n">Primes</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">getPrime</span><span class="p">(</span><span class="mi">256</span><span class="p">))</span>
<span class="n">out</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">m</span><span class="p">:</span>
    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="s">"0"</span><span class="p">:</span>
        <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">getRandSum</span><span class="p">())</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">out</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">getPrimeSum</span><span class="p">(</span><span class="n">Primes</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">Primes</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">out</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>As well as the lists <code class="language-plaintext highlighter-rouge">primes</code> and <code class="language-plaintext highlighter-rouge">out</code> in output.txt</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[72631919237287927717402325207066133372227433253296739177918376436148037178709, 113353610291242016590065192873217709952603000986249688822443880798128343484243, 61233066689578933084047067233486334593864627770848707460125612953653435525433, 77978495575166025609783168685853318929929985120608382285997233070243753385193, 80417172361794527546157297403719656639313353810617700273168888986350803004203, 93800524062346599265231876057535203946903026875666516269890416900099617168269, 97119169071341082676466697825381644482201126912248293435182129435216726548277, 90832133440133156989159367279306176825998079966947793083692222518066327714289, 111156153696251933778615089796986226303676502808517311473776412932401230476889, 96876329906549730024451384329729713704506332533562500650498800553860101511563, 86286584634698122955683719925475582532115192185246692159668723874434524279659, 65903466048748173224590166091273334517945429553166084561141664315404238203907, 80257644525014402296950785012990048502725806405293146360109821535239650852907, 58373867077613198457078300893876782065732447821855506855323213372595523275789, 70307897209099281479027830823136514151063615523489003132414884551468231257349, 111433863257040047657057024064485609580701784312490549902307306283243603655901, 88549800795939126019069388048803588676552691797977376332734685232332072164611, 86476382757716587211956370701024351863110631836242977802213434730486621965127, 82148112346979254967951647310613710507093341929507534256164313491746002586951, 106206517690710852498098306083737354679143918661360147773439327973136200544311, 68502501866658798329225146058538660769659746373219280578608307065801979206749, 60672358951835789704908924536327269229608581722109307581332432233259563717309, 70488882148348465045675146058646614599668994423589427829886289191979266309117, 64185058633455168148710182741821325813221678857870192808147347568058420273539, 91724253020456850774223452039983162340908864012274266250017725349818456783109, 71618237842953542929146771617756902175854017308219041983516624045533290148671, 75197023276518530624655228580159958392853075363846419358432337879052466834339, 93456081017428039908487992063415745064639093391962404368815742573133865752437, 79035499415501060554217818757856129296904865755428035853024745565351157316251, 59805093199483411592634594659959433594218194158384486422971106353915012766411, 111919408600330285952702240192537220923756596627204818717634835189071000322683, 75262644644049693251845454083264477166054642560145713740591274195595930738857, 63107291444793410808481539494468138648438940305354720490618782409929413465861, 100744061032607556872054413723197117826172064576093844455427086156246778889609, 69944098927494206498383429919111314297649499702904660445522561403747921262421, 113346972396001245314933795479549184611487155362285473220811161155716839719327, 74218688380879993148756363091257639519963552776768614571709238172311300379603, 62830315819802766439595083912661717804465372324778782249424277268108619546433, 103264161057748215037613232072468966385010093608920012110892839613159235177147, 111745284062876886448826120017412504536248941666698326600263722937179667853781, 102714811226433002942383499624250583152662882905940125612155350448548464659233, 70611222487436709133983543636965319174743496572075436130858190029811590943047, 99496810066970068259786437030853049423281070820256977962618890794465017825307, 71897979109619597470537943896799947425548512082291096317243737612115174228909, 104187436607185844120347890155645701189598399837540491971438994225658781627931, 62626312997351703501975166956924773510053238259969168260649056012070009346129, 113589663301872140232122306385311526651909749000264118788303971823137568335927, 61024064022365023006890119146557953676560021212017134989942000718839066371191, 67026055890389695260806295983401484022484207056900797118789120807500773539953, 86815148471309876492491436734517739148151702571685443764968941852499867942769, 71271715405688825890556685001974607477934703744599035510306362314132173537477, 99601448482842965306181001731134137098858054201123395666516878215267767241199, 113333426140866487376554632761477764435792220853166221631449357955587299983789, 72828024963517400487779049720080074711403344159975411686009397463831059644137, 95860312447047952148765088986164717003567500104677736410327958593198109354407, 80253883455538900223099283453614543220661664473671073544320428968033889527471, 103875607752185714512846589096341482991367292949192208298733200829187258671351, 62561055349714801292067442755895194201721853024266377169040217309869576245841, 73521338255369954464887173385770028245451155962437070627520638378004981137099, 62515182894498950668092010345264549688065719192878104686749339401615027858943, 75835218084739868375808444485023469969077788504144911291940699066842732630177, 59459793441768929943273834094267805463472005475964506059806584926516896170787, 105671365703942819551817230317199973226465615061686381878212933469608213104791, 78371883059256395153567659973332888704799612827628137474389521102815015551753]
[2819156815559098608935907144572220067802239722477811081781526014230815206143508, 2445222963144912170178987069682029265091235658826949940106147055263923553533629, 1903920232368917874988192424627324450235235658985487184886880478410683087792453, 2813221616898999319078173561719808991996933181529211199247718014749471761929473, 2415317622707046015771404986131301659380189613747377882523905789358464245805261, 2348523668852265507160083343621769660315154058706123058500525154384194150702687, 2507695532453621805796926889796960598878592310480558358405686855827420862837893, 1907141158421921299837854094999465484306927424258825549221658114723429318131800, 2996584876130431493975535586331439098020486704416414144352617491038777966622026, 2841914974487872424057865893430216860909258234230655793947295714954938560858141, 2117193585089230557096034014862868497434663348391069775085361601423465450067018, 1618663543487567888006759147344706501846991096986990711044152446484281789092728, 2051102508394283286598498094689699993985391855870591140003037895002327443967078, 2669090149346309750541187701674005414846285203668431896934154038082184277619487, 2821099205382051817689533851435604893781741191048584470901901981584399503252461, 1865954045962192539436077393382831106338177626620667766785969091756695991376972, 2834906719283370643135074456045826212415690516444993198590544038983805430549716, 3058345091889641880414874285391801133784878450057729860963845535706661712766583, 2653042015966370288730193574681974757937960717309316465953319052871479994033878, 1788584754515047633120809432697937475480742012061242716418696450961540809452374, 2778277203488613589832969148165909575833274521043706044098629995730733708920929, 2224400384415239578333692162811620743296388325332026485724809120569740438120124, 1972940461789417047227766171894128324311970620153289908353435148885058189880133, 1939948360526548190060387013721468591297090070359598090670159708826556568545839, 2818991601490249808138281165356864885716943957945691816617065879361927463800526, 2413553262118714460433349452670472062344099074014288014307335920153767804918120, 2413408800394460311364369792044980960839523519084508082211467486837363000827481, 1758845426962602600761866862339677239161642023927162827960263751844389125896820, 3233495076000044704300506440819729106639319294573782017725443419307932794713315, 2708355596539216171690103715674029628340788100952569621670228934102283487612686, 1536652946359811468561318815856138090872457809794218679329504600452203252121629, 2327165482735512477249691747760690742878483734660461193688694660880638031420606, 2550687440844783131751933234767946237202902423067833745512891069590063347516760, 2481177146135062825829716208896765976351123371323909570126219611506346709136544, 2976906326202019421699257927192517202347665946583804579082838347322272835955292, 2909029092339889063676233410972251606598736781501969698497611221586863427582444, 1798168243495600724582836684300392122016253713231480820900737994151692535621603, 2664817016106873773717597564360502202007571267185845325419923202388752047491200, 2546620205597503490932601602466124914531025221973697650652600774749315385983563, 1804691119541549731083265041619037469167936079860917628791885523586484670389517, 2993720664170395904909588354135052455143402349099705390593820631482848174273290, 2824574876463230873723626432904311683584749415106379741312890350093471390708956, 2178703956912849180607179809502047743725546451796949709962564121093430758925487, 2015984983682985181359500837085489870066576772548483853603306753416391570995652, 2825886744264603050250570710182276613361768413096941638852875242334626590323394, 1842366850389524393863483299415974342118431714168940010525357278313698104545686, 1890692228347751845977588240213788310482016364994323180433181094057080388377341, 1859570245693698000930635066477255198791798456916690502550935397773277654892786, 2125075140724245092030270985636432641827993478574472770023332164359192925667914, 2676755446455257799105999866711022387760341685507440939934907661068577868325690, 2127492815150892523930677422663426899493881960036299948563967902858352278756381, 2214414669786315022585169610350112451053743209985881827547493375134440269841335, 3287270883919895663649415935008492686272583218112557495688303747999607127347485, 1464885862912061941360124921607846166739201296269644683550488862315316621168915, 2509523466354990323289405019390879993989971624147206461818727132356459058566874, 1908179787903012986073536362508511663101907793909103292522128933290356486740831, 2756805796292724316578649442951105668045760292153123880799123727624430139834784, 2535051048687395125596454929207466830174234064994395507994578679918815348311204, 1803956415800944523172461231393963076071547374162301111338088773341404180366095, 1581427673457587965377040867880744385708196297129034872673417280313414009367552, 2210767855216344078808268682929389681422344682528936968055695504737022629851880, 2550877767452648921597688620286108961639250879503878114842193772033576204495050, 2756447633884757327126748105695942994431200035562027053510977246623093748665864, 1964779505858686501383673184089092976925707496895287157463367011777877630214817, 1711601297301999862146389758002427112641271299995210895971794979535949846981662, 2603372280135481877885014637230736101699219758925563658302680157251609514729763, 2667368415669419620483366371882587489517753424105473575306644788864390049717122, 2375381791051675212713652990248979670250212118711539078479113604716354841854844, 2493019084337584580000577145137347950270131374601477024044058401572003131171703, 2510272034609038717473097414524000178497639528965708166872787898622112571433878, 3376645650205558777740641900007720202740974970958294476802138375965090427473755, 1675454950441201753341148918023526478031944115873936771857166782930709781514176, 2295573600228045311698664671032537593950444762263429917312199003345978643927531, 2989232564205545757256184449992766612296977264754661974992606639914166850018847, 1868488082029996620995659067458996737428518781510041614792233972151493754021593, 1892797289282204998558656233944707165344792878835655367911040680710800217026842, 2387274259011256581212632921041457702119262115024449666940614377355894562863869, 1983881332955491024985326286718581476273785076433829348701324483746422111982812, 2062767935119595318038310126927517801164698007835687279422680554697212705483997, 1813426760548272486587501966021027363576238607043680794995756040734812014712643, 1562722510157661651420650013368819014831598048375840600129656685790447905077365, 2503673291651808329507024991940471465924677096391781913465384267653316557369694, 3062166182385308323163803924577776096950506098179031933671983253622594360543831, 1587591727372004646650383007276778974486973795582795614543330273924194355879822, 2124191961778288686577724783613312141001752051971190691410871783736806888118043, 2807161639821718296747775878877393924108396927585322529661889069690379681631831, 2733246030913567509280676058184785395993901538144190159673188530100162954586757, 2095734027587628478963707980384021314089446286378559071426863977096549124105443, 2988941018164239592895981954356834130422828926400913046430556106893050888967261, 1808937486427315645718998608467510156824996634701840345775870478636993074414998, 2703685611351166699001869484070817849345096649407749301012107683124291961022814, 3102613448307372159580295514146090155031564221004892924292098653939442448602987, 2177101615271107571142318136385894289129856690017106068932561385040022673438923, 2937151057349964713327739484700778587301119004787857337542161351225777024384191, 3284853954926625174312940587880762860995369578650383285440565102632766263047228, 1445263692951995462669671350436071269459804664046732803232667890225299584565948, 3098676865357167767681695819580978584292551422560325551761761261030493576490054, 2785990764438332102573798945869163846058964169046667905446760842139596358710096, 2286672499975498339110837294171463889505598069964900735273552787076262216195906, 2391874898075608542385911568726340514438277750074914316438113074664500269203548, 2605723731444632182682979422507162229453344556769061654841867236618061760791325, 1704836746065631894082906921469595231141025078554131926066714879810005676323751, 2268547330405383390451485215576699310201492241110811312277295403794298328525318, 2257279690119315586453943222353936242022588071540577167031856674546385664274173, 2872612890312518257758936879530195946285789167890762413291543959195362374746469, 2782503101773215051391891616156069531578324959687740312811009067332251738718639, 2138140684559184701106744969820800303534456927075159680357462604985136618973448, 3095278460762504782170722834315395471811818415470674607477221955419939863412688, 1918147505022892323887450400533906049794530447772075631502966582700819074987318, 1707010156387988967567351309817287890962086105434244078370980148566691847226989, 2314881420429035304174113419210131391725806719440675908882594861083902503989894, 1747310534609110545360894267130302582086449810852064052514438793880321649681103, 3080886800074193535767113381895308001287890199225312650567732780605043357281585, 1703302394447278966593359250968585558627874162942204836180727596194447436704731, 2669959616748655909038072864148442141347343478193254233924937012286825458693418, 2678347981660125571899295349441122811861081559641451673761407195954761042620360, 2991379536309166201033224610863206913612841270474721698767515583673314564634450, 2523223616403538242735730838547058862626362247959528229773500469162355596137501, 2642334249408957788795981926934456200612035825182578292078882855617370677855476, 1569264447503315408491941272069637567187075617506995254256292388264423968802988, 2882151918273286344356356582994818011404936455027402382189340156913800330427975, 2158967947928376114000914445674913628201764160381348927457320635619197102958046, 2051737874569931765249515775461268812640666956809870235551742670881277489362727, 1763323742103061035663123542430905313899541445815905288785170098209590602129239, 2713986379520959678928522767197552952345350348987283755564726696384571034845768, 2537378599555526856829858853624086645778822512223537633689220391093349190349778, 1559241246373570128428798700624771661010342250781098062213106558536948558050766, 2279150628340411933639371451926359538099865357708465543071800823000587477815011, 2898997193141068749321572525457620525323957690056983345387036999017795349699409, 2522226015585642028656627937913370376228450166094635794231237529375655653354731, 1976905875820155215040299709744110576065821433679615259775310771962543694656698, 3146904959601041464677308813467361006584585805682305551431275878689319837940924, 2693972707687221507896250578017189021477213697938899249523534331595305491495324, 1624327598106729094885115301581437685380703813627081789404977021142280698320107, 1953514564966249010069920346168045652870850335033365089388414276370477434371002, 1626888973038960042489813971944630122654048243552668114260339025510208408311822, 1691170441751836250949367136389943978609695857804909953940716207113664903533044, 2872352457635317352383489529000387930132790666173838033868080090425309904205463, 2863893510770920872155566640788223513715980556898590207492297802804734220666273, 1664325124883579998946067059421408604232610753151100601467802141679596987515744, 3241231581569478941168907165945341550977831562153048119560311010399685701948601, 1361807005173976916825978829400623371016110290335271142789044365351489158265785, 1406627349406527471168668282696809465701018718681981074249372097245594123964851, 1971525597164878946966277125289812240116013457995908459722202952295120967951958, 2786911678726247421699703800762265831545443241798747206478605511107149362330097, 2439508492564866839705294296041842112712325553837677868579211795105087869136093, 2059191048467669923967691687228577391906624742849738642011719916045439079304823, 1570106312941323008471547510823923094983111141481917147880596218618909287869316, 2122987705390617331128483361876664852958813888207310728315947431193637092615610, 2801489830287263060085120056123289367371498556308329538059159707855810575200325, 2603504643744222599357535179213179516289477923306029799301160287585889511538186, 1579559950022451616002666575318998221718261186164798108063013638204271323515426, 2946959687392272154774154223307645704738122794108855599681623985844195753004336, 1692770221755889837201538695387588277166659470005431078018491728102054788606405, 2659449088987888852195471961116502165033707350474142851843714185859896260654058, 3505646321172760059446810399769341926141272269356767693575285534015133195241233, 2530481419181774953758830811170792749065265404043551952628317101074384012856365, 2712291448546463050414385318858256938602633632117389382231541762951484136569160, 2771788380581020235551999360102117509781311204513808674596945948863545438935552, 1955826919431026980944761018180907821649592615023066213634119373120418173949204, 2233584311947835760483846096048038712598649182856770677618031551939193923070629, 3394595068511229452615822692260046682896960654048194476745024879264499379417364, 2712573898841928347986369197314358548875252769951810734215760791710091814581815, 1748981602423073911431838108063086650192315739500168302252222265177547421664563, 2918701578242467135076226389338480065735119480562687109522929797564227072493184, 2164542802657835484124827216032688263572786614573372525249065148400873809020470, 1135304887972847560145538866404958097776596359071002711002875129077851779982891, 2205584540603634087173783390627256443719846063793628767797341432227402910992158, 2690352932777477095639383802001157556275154650146494280789592444767406723210088, 2303944374984763927616623281091903699148030217974972202655946341959198480366990, 1826879964307133264320563754533689815425723980821932135389272772715666899003374, 2411535830583065044709148037012533536301300387611929837028371177053977732254183, 3102248701716368945194959238072315916896617832833372561718927136392499451559578, 2659059708824611624428432407423533442925665544505963263289772494964288235307875, 2122091574300829544940359499145373746146266675687307129711907050808965471122010, 1700916444187293837558906660368523799466101955714678788331652720755325956184538, 2567718060732115690755878753641406930783934887601526519050886636729753186426791, 1952081132214229966862614041338565988918704651475436080348360529823670476859620, 1660215762591901715725992379790262398087569715838733505603236713521769589358820, 1719279125595280317066033690110562638515279430979107832569413806636508635211996, 3150257746796819704620980918552950504464974368953784237516693028734092071089047, 1533483464980797817093734747462583125027126533889191512411074224355529845622071, 2488961034310705334758521978741509630299502434569628208806014299768156795682257, 1949296862369855738672364903506625258331673226248095354317656816116053344797835, 3314180997278886324171475580120649860821510669127198863042562159001687994942122, 1835912431730828052486567697931843664151353173587570710495449691984382497927315, 2490573473773652707889662396932059726458725983603386101684045752109912066544351, 2034391449976822309453187815141830984379516892947671482205865823880790979367955, 2904021828859719234045989645729651328223671397095849600652399072239977584752185, 2898092590337486358630458611863555173232553156056707848156576249041471235470768, 3020050896501407718070202328514173978695297814931297739049640810470505425773745, 1162913829573891584933621423487787462781528876246539914934653605693493109367743, 2411509537509594942434869563398255803405247485496687541554728239521209563719728, 3240460093945381326170175021314548622274008446302186694162254988437882522956789, 2042576958259566656441090421986717161687799145769915833228519921746477531448760, 2553411758242921025239995694953337401215433895789864555503864382953439429213802, 2820514264957484223884788232888402572082052875947845405781652420449215392785603, 2641370591795997642215472507781953866796675755685964449326951672513035331652719, 2823035270072193806363721364627815545328685374442891399776824815269510767922152, 1989373778720753497822506435334497629024665265080539577357802530369873476548739, 1862386424241098951111754027338499846132635633222316642962968740112589660520830, 2976767130013568871382359613949325813684341929036309541118080812240632837951917, 2032079799183763407608429385442348826534633217836159747315522261005324747502541, 2708285103915655469463038547427063010568545575090977468837676375353975489314033, 1763806042471114758817803518721264989399707893537069108192481105750144308762714, 1937326669619940914067700437225091575824756751300418686192482170396808556973038, 2435703549632943593049899499355898299013949956078689678733600487087852297494155, 1564269996471702815616616340843697420448380748563779822431189073561802077443811, 2456980081971515876372636881680154805873081926372199873790185654198943312487861, 2114228222599900470093715633907929439859036580370529231708091911394217318192346, 2412504259980354806049559188591922758532822094151137644379211660889448844429578, 2635073202673673572264139459896284480350454830352313451411706615748140392229736, 2725320685400498493268546434049721871475577064325227566368156917361595597089351, 3037867883571431356133279924916838430904119854900038874159214526715272191199734, 2824971163661740859800864424701755168512099695296428827528594616947609789856313, 1719312755020161540743541987056216628179475180251054784014251838005404915359190, 3012080368518302834546286001958441602695677482755944367912995252821821409322630, 2595410720707289052259292382365869693173486839668185767458178220761996549540776, 1730386135469589080821808335571789810133070354002257675548380927002483585203525, 2183488429559972081266293580805381776596408303103494625441288200546469064198052, 1586663745637750938560919751995751853774793809756290411350824056092900626767581, 2633560016633693373820917408699356704371120444974417409768038767304741258416882, 1588266791029338678483285861004896440056893325470901832575017393368494381844313, 2062140763508547310649316830659374267702516490495399524838782204228464817557303, 2210631662045486660045329182773925615869393461089725622733280699922614662573188, 2459357704199420786919294385229487410232263583838342283632925369162881135458784, 2613643032209168797222243130152765007369922353402246208144392804402308111491213, 1710948753142088971871638997633063611816787381413888582644218262719506545790814, 2370888885585089451526475579030868634013098608165933127887831074072488486211027, 1874802131193521153356429186932124966125006368474096875577533362925609490873675, 2257490811907741146287835975463592107772672753660997437720973452168570067018183, 2027396376118176181554556587461857799175262388659116515495331190904871780900168, 2629203400695349534340609904454384114924188013467883308551455289883598277506576, 2890142848965203803657678020364632618710915881162439911156088498054480848444284, 2219081521671625674270988735444011710759687035389885997488568461190702712665391, 2380376764714634310626713438415734647767006799419143228948264493667246616324693, 2814638103849795047350222194926779177051843856327710877892295181020329663696490, 2047838076416771508199337081863868486021562878681029339974246205098649513457324, 1784932180402383121530422581359653305472252436816341976330551492781428029261514, 1941527319325036462639722135771653972446143884927214478817515634545849137431669, 2907563421094345848181477200768863573314924396229466732653561249857033838608028, 3000337261597585046467954498628106745718605542524330400603607525806097908557040, 2786351435794517058372407045515681838202163268432832568806234013222378647734555, 1836092084933347325356728587763659299616726483980078801819666587432774417206073, 1574796707547605480163763402663498447991988000366600032231056878314794495735406, 2353612553114861608109605098910218987289338082728729053511317177449593301899294, 2248699009001439455571494271407476531250809026878799237531708891383695128771122, 2417476639863872938259290255198814812522944882305274702168279778861529389946164, 2971783285485191513675004761256201878142447913010923130203347305001342064598990, 2142943014519370915558067112669312116295755777127417301618377823907694765946338, 2661527100047693021718564373867938790031132276013799786506265512546563727003637, 2789161914059543582404778858005723463894421641256844424769515176678453044603337, 3040014096172959690905204596262839182154829748346494437618210463868135852399494, 2635917392114338296279286936931727170162216403550460752678274156631579609014634, 2739029817120645069226715038276509821027853672448467093767065178330079288792182, 1484738110125237820910555901588888998435780560979615982696803082959376104709161, 2372999157870072620027636129336264510265625974962517451119668258432432453459291, 2455687222461827602660206191412397063350581337238480459622011027481646403606246, 1876432865628323024983726722907298656929294958135555012103492960934104600220219, 1307841776873030596697898086313556358231717270837313632583014388160388520957206, 1930461711710915408769618026875738822780815121368520129692337068401427296313373, 3325280034101518748159577481976984799447956248994089550885201924665697013425938, 2141730641878301259755102172773233369139906794041664225968362000101121750584861, 1375656209370479485060378259057252116555118144818855052445166926233837043706214, 2977769163020142792135228863060463623818385890145164352689707153311169566103001, 2002834314014321054187636141249638087852858776899333125132657509142700920915899, 2851322935231676704267708179361053286697597203152531856687447152874802460360864, 2992147055296731103287336167512602309601875655087942903948613982271058288601610, 1726152188820994697022282207330085869001951550140404285145456533691648598100569, 1888604908855715245619198652572645357831264155960901438791523139267142437922964, 2352448954998759084316420067380678866770050286925503771493227478020356378487607, 2048308642686539346926409497753971725904482476842642143130646956853793335448162, 2501794434297131030946196089001233568215948580707283625912119735439908255378216, 1903581457860725006292290733111833468722059955064722300000621986075260984730890, 3091137366193643814130757614246951323703457976373978819948176036606067628695033, 2320974233653240015647239860333344772512164840786841438935137525814103134556389, 2685814581994945080754008326997111441187184408176728102326696887317673828436881, 2000735932503291577967925242471844116928558854574240520790749980890194978580328, 2420029456477865293042005101867311660978152293635853664008446797812937597305509, 2129555161426105317333875952515114347501476208979636012506937915200909157703983, 2582947141522611573263255922392440642592155092034175475551805098992649126512502, 2007387202205259405202080331409071622936010454228446167685562218123845168427194, 1555346362119608126365015153381797593304002606210833679794143799398649488008709, 2627310074157008615051031552873690677995763263775766597112117219178356232254138, 2614870511241382676735961019792996302007146563530003061044256637662310198888354, 1835517951630184004031358550557037074114640173264557591588255546633305636557964, 2191360283419900545159044662092406127521650045451596375234153785353085173024074, 1633587445499810699103350031108401299972286118612069333913054471891868634481981, 2244506220430518115591858883493205895321869570070556445420237854928896037980916, 1701933270297668456594030101250077900332487913784571880972700238355040675454480, 2073349787428363296079890283770992319911798913918743690389931150271611080940175, 2554199147351498854198124357914578384080971977075570829246726644622890103967478, 2869859353109108769884032621260179038333321889811803968916073817470951304600426, 2163535859846850182293040680340377227423216011265031881108965948829531859829146, 2127374883010589876012860539719535092731861273867713812127079127126859754504360, 1938864159337265849599773369625058562249980220372090673684508081397701999600056, 2757117073936544413482459237210873364734485018520440516659943461070434895539784, 2173928418091053227417706702891687012126191118333695997916756600408543226601665, 1231466375392538328694612130964071690021805034621412520944511481512279507297777, 2349648477640756485993251301906725341047132183382215279465438497793389660839109, 3099111297578477135779886526345743640311475435758824993734579420700333420488649, 1690664359964097576800556030074459924192324269317618913545738475596847587203311, 2054265318601641370989870371763207271922774837760458400854115401387162521953106, 1455042222594995300357946948940506176079473202745755539315170165422919837214987, 2737703901230648620119729675184516215498340228498747075833558529322741550448515, 1847489593766622016816587362489572976735325020357364005648973154291576153981323, 2920110538280520314747827961178189014514998204549518095761788407950255153847540, 2958268500396601269761423235959825847393704227293222157799335793319669060622825, 2345985542180934042839128223629154919627988311400089812717130377891745822434700, 2241014203060338070745691577758044738147586031133732693491353306115564095153519, 2870347637439131502185386213581689360274632975558359807782293631067782158330598, 1852634989733999093426874218169458195422557079581034231098762933704435006044887, 1862388256084067824430383892323053894335290341611286789184625594484340897283766, 2840894927901654909141739161619191856732681195736147467945179479863663606830039, 2402361678063385966682160132501003561188266731404508880379614200749592715079467, 1909915635563467518852047815113709884418039180699302428128451374644140267941130, 1658926823813195282852604374649678095399363082284848840092112243331543914063209, 3246219477051766010472120322020803795950363636590298249520227420314197051320180, 1917533171125817291632511547114825642767636167947706046118285318907308481349834, 1732529573776954215396883824592109278461465616296113719187362257221124050421297, 2814263652577009321513917897615787457764472311899563306422689175146400874504093, 2324993916740169682393708336019975558244948129067453744986371404324519261398643, 1503532043620487999925454219611892452064871526670005017321304231576559050996563, 1699050200327606267818057665406833317372501004260777756764072516881987595376191, 1472586941034140862204493262409660776093862810910579498650970236100393355808389, 2029713505933905447328187739983632511774919013593902578922419593584096403736957, 3225171083287582817199300358232903389164407358944150878502408641001476881116329, 2002739705085819696773726906427925703939222313302954137977322923239129980777347, 2977185366949025183951676661737118397967970692854945619333644262933483104988303, 2947173195366661114129705192992773919565837049152232827162046911232264006182254, 1754887252759358888503156014386972306424663301077620313505515454966154084372388, 1907405965907142420721338795834817757376940109196779186347981266665613826233212, 2015330364408646879738783215328681821738282240814572865785393505480211039640066, 2727893473289569333590201710166502128438404920873958155705550313677854946255891, 2285909249720592854317361245045521549583079701492605951982463479972983290870664, 1845999854724343976570027772639141428826241063271141835304228421100708367103569, 2363672791141786231097409217383362655763662840519306763732391294439966071060443, 2806936541429868513549845833892240163395528940507540978740415968116778710515102, 2697219364136050209859748029002897741198163283378001317797626490633055309788843, 2247184701442480681779249398438744369415499975031480815364948207694623966199387, 3231086019038147296220763915450735650568111238173220866389065299438632440751237, 1832276392976999556129354128814768583897218865356710089662798671135934832729329, 1917342661910522861149489645623396859753824081005762371765834098322307654497381, 1568017253990396537784321601698015449451817832281251660296025502053520561811812, 2941616922582905030134617392243899143088159369106475594003645096550740211691295, 2683368351117012950411179150631678778651588063084420106900764888746387687168222, 1778420058969534218383812868489034592227993121385588230014110347522765607535946, 1923764582860656292136186495617159929691221984386016458167256338158112818097098, 2656631653745695250048441951987799766681703378345466605375664608750138267094490, 1691142612544234157420807122078777197042131796182931240632840532974741207366554, 2507486372683720823405119393792056270780488181696931417677286972451364222324898, 2447484598394060182059875442220084043147995607049408859564736403691102277754703, 2595545091473159386760353940687413026143395465208155790570429164011691489970522, 2202408778718364092229680334582879965674953387559013630876726207304442759100950, 1434044264080765552621476110745390069274931289997241169288539930228352180841157, 1730963110434177443493191358945360130890936890712807539961534419929496768666853, 1814514698770987074692007368337406747271432147111293957177097586796743335366864, 2019810504329770248199484256164192365539847161241402784488318370955221358775583, 1956536334521214519139005513274352058427551797660335556789649011126122469394621, 1694989916853171959536869648489026282016518865526156952107205253569208427588802, 1770954866648012756428357246696467696128773908163230225537396522364937343241454, 2802996166579840936213980653413335387241497268210450195945009691876958816391301, 2644513999224447293556676912891272387168542381412380571251701553565002974065160, 2463113107479271232731543030008511295698209596496337911158126811719994524730804, 1334261391981801071990435527914252759589346447377833542541150596820934615355804, 2279003943573323534404267206493585478080811684601838324835345540797019580209881, 2120333317125642116907729078091221616419400615377299883141448350668604241449740, 1756076625856166082841036230119144332034421616895963015504269044505034917059399, 2207615431411605687205294013132826939107597873984017330939473488301182073661283, 3402307618965454186510075915629520371557316035524100232971772642879541133866581, 2257357821930382005896155137026800185487154395207884048113343615729127921819640, 1551825494936649699327478596078225912177508474254549041414169792254557027355217, 1365732972487952087912201569843410874792402112231916794732119488395781020203311, 1807495973197443225501042200464935032992636693133827521190080032536875399246452, 3066548428950611112157801870665061157137219961909600957576183226324708978020683, 1827692464083287200286079376258081926585195439691129818155557308275829855008347, 2177950758759980504779021451412567471817907630921840590750050627364220415245388, 2500408490068677256675931862459954402673338550184480122429756334963949542806122, 2134138149727797607166351547030249872845232722149691714081305131457344525454827, 2332811982231893523373224098520580507465485470638866226523073135090091836623660, 2230040524682264142564447094948233324847290581046122443235354731861026477584174, 2331535816974572878114135820359512753886735587931098018590107412165934055193524, 2865092118462007871887135714513386199315743927247622435497167687480635403743332]
</code></pre></div></div>

<p>The encryption script converts the flag into bits, and depending on whether the bit is 1 or 0, generates sums of different numbers.
To get the flag, we must somehow differentiate between the two types of sums.</p>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>The encryption script defines a list of 64 prime numbers in the list <code class="language-plaintext highlighter-rouge">Primes</code>. If the flag bit is 1, then the sum is calculated using these primes like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">getPrimeSum</span><span class="p">(</span><span class="n">Primes</span><span class="p">):</span>
    <span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">64</span><span class="p">):</span>
        <span class="n">res</span> <span class="o">+=</span> <span class="n">randbits</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="n">Primes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<p>The sum will consist of around half of the primes at random. This is a low density subset problem. Given the primes, and the result <code class="language-plaintext highlighter-rouge">res</code>, we can find out exactly which primes were used in the sum. To do this, we can utilize the CJLOSS solver from https://github.com/hyunsikjeong/LLL/tree/master/low-density-attack. The solver will find the list of random bits $b \in{0,1}$ and subsequently the prime numbers used in the sum. If the solver is not able to recover the list of bits, then <code class="language-plaintext highlighter-rouge">res</code> was generated with random bits instead of <code class="language-plaintext highlighter-rouge">Primes</code>.</p>

<p>So, by iterating over every element in the list <code class="language-plaintext highlighter-rouge">out</code>, we can attempt to solve the low density subset problem and determine whether the bit was 0 or 1, thus recovering the flag!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bitstring</span> <span class="o">=</span> <span class="s">""</span>

<span class="k">for</span> <span class="n">T</span> <span class="ow">in</span> <span class="n">output</span><span class="p">:</span>
    <span class="n">attack</span> <span class="o">=</span> <span class="n">CJLOSSAttack</span><span class="p">(</span><span class="n">primes</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
    <span class="n">subset</span> <span class="o">=</span> <span class="n">attack</span><span class="p">.</span><span class="n">solve</span><span class="p">()</span>               <span class="c1"># returns None or a list
</span>
    <span class="n">bitstring</span> <span class="o">+=</span> <span class="s">"1"</span> <span class="k">if</span> <span class="n">subset</span> <span class="k">else</span> <span class="s">"0"</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Iteration </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">bitstring</span><span class="p">)</span><span class="si">}</span><span class="s"> / </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="n">bitstring</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>And we get our flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ictf{dec1d3_my_fl4g_4nd_m9_b1ts_by_LLL_3ac4ed91}
</code></pre></div></div>

<h5 id="solvepy">Solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">HighDensityException</span><span class="p">(</span><span class="nb">Exception</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="c1"># https://github.com/hyunsikjeong/LLL/tree/master/low-density-attack
</span><span class="k">class</span> <span class="nc">CJLOSSAttack</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">array</span><span class="p">,</span> <span class="n">target_sum</span><span class="p">,</span> <span class="n">try_on_high_density</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">array</span> <span class="o">=</span> <span class="n">array</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">array</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">target_sum</span> <span class="o">=</span> <span class="n">target_sum</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">density</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">_calc_density</span><span class="p">()</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">try_on_high_density</span> <span class="o">=</span> <span class="n">try_on_high_density</span>

    <span class="k">def</span> <span class="nf">_calc_density</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">/</span> <span class="n">log</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">array</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_check_ans</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ans</span><span class="p">):</span>
        <span class="n">calc_sum</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="nb">zip</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">array</span><span class="p">,</span> <span class="n">ans</span><span class="p">)))</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">target_sum</span> <span class="o">==</span> <span class="n">calc_sum</span>

    <span class="k">def</span> <span class="nf">solve</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">density</span> <span class="o">&gt;=</span> <span class="mf">0.9408</span> <span class="ow">and</span> <span class="ow">not</span> <span class="bp">self</span><span class="p">.</span><span class="n">try_on_high_density</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">HighDensityException</span><span class="p">()</span>

        <span class="c1"># 1. Initialize Lattice
</span>        <span class="n">L</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">ZZ</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">N</span> <span class="o">=</span> <span class="n">ceil</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">^</span> <span class="mf">0.5</span> <span class="o">/</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
                <span class="k">if</span> <span class="n">j</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">N</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="k">elif</span> <span class="n">j</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">N</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">target_sum</span>
                <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="n">j</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2</span>
                <span class="k">elif</span> <span class="n">i</span> <span class="o">==</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

        <span class="c1"># 2. LLL!
</span>        <span class="n">B</span> <span class="o">=</span> <span class="n">L</span><span class="p">.</span><span class="n">LLL</span><span class="p">()</span>

        <span class="c1"># 3. Find answer
</span>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">continue</span>

            <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="n">v</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="ow">or</span> <span class="n">v</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">][:</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">]):</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="p">[</span> <span class="p">(</span><span class="o">-</span><span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">n</span><span class="p">)]</span>
                <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">_check_ans</span><span class="p">(</span><span class="n">ans</span><span class="p">):</span>
                    <span class="k">return</span> <span class="n">ans</span>

        <span class="c1"># Failed to find answer
</span>        <span class="k">return</span> <span class="bp">None</span>

<span class="n">primes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">72631919237287927717402325207066133372227433253296739177918376436148037178709</span><span class="p">,</span> <span class="mi">113353610291242016590065192873217709952603000986249688822443880798128343484243</span><span class="p">,</span> <span class="mi">61233066689578933084047067233486334593864627770848707460125612953653435525433</span><span class="p">,</span> <span class="mi">77978495575166025609783168685853318929929985120608382285997233070243753385193</span><span class="p">,</span> <span class="mi">80417172361794527546157297403719656639313353810617700273168888986350803004203</span><span class="p">,</span> <span class="mi">93800524062346599265231876057535203946903026875666516269890416900099617168269</span><span class="p">,</span> <span class="mi">97119169071341082676466697825381644482201126912248293435182129435216726548277</span><span class="p">,</span> <span class="mi">90832133440133156989159367279306176825998079966947793083692222518066327714289</span><span class="p">,</span> <span class="mi">111156153696251933778615089796986226303676502808517311473776412932401230476889</span><span class="p">,</span> <span class="mi">96876329906549730024451384329729713704506332533562500650498800553860101511563</span><span class="p">,</span> <span class="mi">86286584634698122955683719925475582532115192185246692159668723874434524279659</span><span class="p">,</span> <span class="mi">65903466048748173224590166091273334517945429553166084561141664315404238203907</span><span class="p">,</span> <span class="mi">80257644525014402296950785012990048502725806405293146360109821535239650852907</span><span class="p">,</span> <span class="mi">58373867077613198457078300893876782065732447821855506855323213372595523275789</span><span class="p">,</span> <span class="mi">70307897209099281479027830823136514151063615523489003132414884551468231257349</span><span class="p">,</span> <span class="mi">111433863257040047657057024064485609580701784312490549902307306283243603655901</span><span class="p">,</span> <span class="mi">88549800795939126019069388048803588676552691797977376332734685232332072164611</span><span class="p">,</span> <span class="mi">86476382757716587211956370701024351863110631836242977802213434730486621965127</span><span class="p">,</span> <span class="mi">82148112346979254967951647310613710507093341929507534256164313491746002586951</span><span class="p">,</span> <span class="mi">106206517690710852498098306083737354679143918661360147773439327973136200544311</span><span class="p">,</span> <span class="mi">68502501866658798329225146058538660769659746373219280578608307065801979206749</span><span class="p">,</span> <span class="mi">60672358951835789704908924536327269229608581722109307581332432233259563717309</span><span class="p">,</span> <span class="mi">70488882148348465045675146058646614599668994423589427829886289191979266309117</span><span class="p">,</span> <span class="mi">64185058633455168148710182741821325813221678857870192808147347568058420273539</span><span class="p">,</span> <span class="mi">91724253020456850774223452039983162340908864012274266250017725349818456783109</span><span class="p">,</span> <span class="mi">71618237842953542929146771617756902175854017308219041983516624045533290148671</span><span class="p">,</span> <span class="mi">75197023276518530624655228580159958392853075363846419358432337879052466834339</span><span class="p">,</span> <span class="mi">93456081017428039908487992063415745064639093391962404368815742573133865752437</span><span class="p">,</span> <span class="mi">79035499415501060554217818757856129296904865755428035853024745565351157316251</span><span class="p">,</span> <span class="mi">59805093199483411592634594659959433594218194158384486422971106353915012766411</span><span class="p">,</span> <span class="mi">111919408600330285952702240192537220923756596627204818717634835189071000322683</span><span class="p">,</span> <span class="mi">75262644644049693251845454083264477166054642560145713740591274195595930738857</span><span class="p">,</span> <span class="mi">63107291444793410808481539494468138648438940305354720490618782409929413465861</span><span class="p">,</span> <span class="mi">100744061032607556872054413723197117826172064576093844455427086156246778889609</span><span class="p">,</span> <span class="mi">69944098927494206498383429919111314297649499702904660445522561403747921262421</span><span class="p">,</span> <span class="mi">113346972396001245314933795479549184611487155362285473220811161155716839719327</span><span class="p">,</span> <span class="mi">74218688380879993148756363091257639519963552776768614571709238172311300379603</span><span class="p">,</span> <span class="mi">62830315819802766439595083912661717804465372324778782249424277268108619546433</span><span class="p">,</span> <span class="mi">103264161057748215037613232072468966385010093608920012110892839613159235177147</span><span class="p">,</span> <span class="mi">111745284062876886448826120017412504536248941666698326600263722937179667853781</span><span class="p">,</span> <span class="mi">102714811226433002942383499624250583152662882905940125612155350448548464659233</span><span class="p">,</span> <span class="mi">70611222487436709133983543636965319174743496572075436130858190029811590943047</span><span class="p">,</span> <span class="mi">99496810066970068259786437030853049423281070820256977962618890794465017825307</span><span class="p">,</span> <span class="mi">71897979109619597470537943896799947425548512082291096317243737612115174228909</span><span class="p">,</span> <span class="mi">104187436607185844120347890155645701189598399837540491971438994225658781627931</span><span class="p">,</span> <span class="mi">62626312997351703501975166956924773510053238259969168260649056012070009346129</span><span class="p">,</span> <span class="mi">113589663301872140232122306385311526651909749000264118788303971823137568335927</span><span class="p">,</span> <span class="mi">61024064022365023006890119146557953676560021212017134989942000718839066371191</span><span class="p">,</span> <span class="mi">67026055890389695260806295983401484022484207056900797118789120807500773539953</span><span class="p">,</span> <span class="mi">86815148471309876492491436734517739148151702571685443764968941852499867942769</span><span class="p">,</span> <span class="mi">71271715405688825890556685001974607477934703744599035510306362314132173537477</span><span class="p">,</span> <span class="mi">99601448482842965306181001731134137098858054201123395666516878215267767241199</span><span class="p">,</span> <span class="mi">113333426140866487376554632761477764435792220853166221631449357955587299983789</span><span class="p">,</span> <span class="mi">72828024963517400487779049720080074711403344159975411686009397463831059644137</span><span class="p">,</span> <span class="mi">95860312447047952148765088986164717003567500104677736410327958593198109354407</span><span class="p">,</span> <span class="mi">80253883455538900223099283453614543220661664473671073544320428968033889527471</span><span class="p">,</span> <span class="mi">103875607752185714512846589096341482991367292949192208298733200829187258671351</span><span class="p">,</span> <span class="mi">62561055349714801292067442755895194201721853024266377169040217309869576245841</span><span class="p">,</span> <span class="mi">73521338255369954464887173385770028245451155962437070627520638378004981137099</span><span class="p">,</span> <span class="mi">62515182894498950668092010345264549688065719192878104686749339401615027858943</span><span class="p">,</span> <span class="mi">75835218084739868375808444485023469969077788504144911291940699066842732630177</span><span class="p">,</span> <span class="mi">59459793441768929943273834094267805463472005475964506059806584926516896170787</span><span class="p">,</span> <span class="mi">105671365703942819551817230317199973226465615061686381878212933469608213104791</span><span class="p">,</span> <span class="mi">78371883059256395153567659973332888704799612827628137474389521102815015551753</span><span class="p">]</span>
<span class="n">output</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2819156815559098608935907144572220067802239722477811081781526014230815206143508</span><span class="p">,</span> <span class="mi">2445222963144912170178987069682029265091235658826949940106147055263923553533629</span><span class="p">,</span> <span class="mi">1903920232368917874988192424627324450235235658985487184886880478410683087792453</span><span class="p">,</span> <span class="mi">2813221616898999319078173561719808991996933181529211199247718014749471761929473</span><span class="p">,</span> <span class="mi">2415317622707046015771404986131301659380189613747377882523905789358464245805261</span><span class="p">,</span> <span class="mi">2348523668852265507160083343621769660315154058706123058500525154384194150702687</span><span class="p">,</span> <span class="mi">2507695532453621805796926889796960598878592310480558358405686855827420862837893</span><span class="p">,</span> <span class="mi">1907141158421921299837854094999465484306927424258825549221658114723429318131800</span><span class="p">,</span> <span class="mi">2996584876130431493975535586331439098020486704416414144352617491038777966622026</span><span class="p">,</span> <span class="mi">2841914974487872424057865893430216860909258234230655793947295714954938560858141</span><span class="p">,</span> <span class="mi">2117193585089230557096034014862868497434663348391069775085361601423465450067018</span><span class="p">,</span> <span class="mi">1618663543487567888006759147344706501846991096986990711044152446484281789092728</span><span class="p">,</span> <span class="mi">2051102508394283286598498094689699993985391855870591140003037895002327443967078</span><span class="p">,</span> <span class="mi">2669090149346309750541187701674005414846285203668431896934154038082184277619487</span><span class="p">,</span> <span class="mi">2821099205382051817689533851435604893781741191048584470901901981584399503252461</span><span class="p">,</span> <span class="mi">1865954045962192539436077393382831106338177626620667766785969091756695991376972</span><span class="p">,</span> <span class="mi">2834906719283370643135074456045826212415690516444993198590544038983805430549716</span><span class="p">,</span> <span class="mi">3058345091889641880414874285391801133784878450057729860963845535706661712766583</span><span class="p">,</span> <span class="mi">2653042015966370288730193574681974757937960717309316465953319052871479994033878</span><span class="p">,</span> <span class="mi">1788584754515047633120809432697937475480742012061242716418696450961540809452374</span><span class="p">,</span> <span class="mi">2778277203488613589832969148165909575833274521043706044098629995730733708920929</span><span class="p">,</span> <span class="mi">2224400384415239578333692162811620743296388325332026485724809120569740438120124</span><span class="p">,</span> <span class="mi">1972940461789417047227766171894128324311970620153289908353435148885058189880133</span><span class="p">,</span> <span class="mi">1939948360526548190060387013721468591297090070359598090670159708826556568545839</span><span class="p">,</span> <span class="mi">2818991601490249808138281165356864885716943957945691816617065879361927463800526</span><span class="p">,</span> <span class="mi">2413553262118714460433349452670472062344099074014288014307335920153767804918120</span><span class="p">,</span> <span class="mi">2413408800394460311364369792044980960839523519084508082211467486837363000827481</span><span class="p">,</span> <span class="mi">1758845426962602600761866862339677239161642023927162827960263751844389125896820</span><span class="p">,</span> <span class="mi">3233495076000044704300506440819729106639319294573782017725443419307932794713315</span><span class="p">,</span> <span class="mi">2708355596539216171690103715674029628340788100952569621670228934102283487612686</span><span class="p">,</span> <span class="mi">1536652946359811468561318815856138090872457809794218679329504600452203252121629</span><span class="p">,</span> <span class="mi">2327165482735512477249691747760690742878483734660461193688694660880638031420606</span><span class="p">,</span> <span class="mi">2550687440844783131751933234767946237202902423067833745512891069590063347516760</span><span class="p">,</span> <span class="mi">2481177146135062825829716208896765976351123371323909570126219611506346709136544</span><span class="p">,</span> <span class="mi">2976906326202019421699257927192517202347665946583804579082838347322272835955292</span><span class="p">,</span> <span class="mi">2909029092339889063676233410972251606598736781501969698497611221586863427582444</span><span class="p">,</span> <span class="mi">1798168243495600724582836684300392122016253713231480820900737994151692535621603</span><span class="p">,</span> <span class="mi">2664817016106873773717597564360502202007571267185845325419923202388752047491200</span><span class="p">,</span> <span class="mi">2546620205597503490932601602466124914531025221973697650652600774749315385983563</span><span class="p">,</span> <span class="mi">1804691119541549731083265041619037469167936079860917628791885523586484670389517</span><span class="p">,</span> <span class="mi">2993720664170395904909588354135052455143402349099705390593820631482848174273290</span><span class="p">,</span> <span class="mi">2824574876463230873723626432904311683584749415106379741312890350093471390708956</span><span class="p">,</span> <span class="mi">2178703956912849180607179809502047743725546451796949709962564121093430758925487</span><span class="p">,</span> <span class="mi">2015984983682985181359500837085489870066576772548483853603306753416391570995652</span><span class="p">,</span> <span class="mi">2825886744264603050250570710182276613361768413096941638852875242334626590323394</span><span class="p">,</span> <span class="mi">1842366850389524393863483299415974342118431714168940010525357278313698104545686</span><span class="p">,</span> <span class="mi">1890692228347751845977588240213788310482016364994323180433181094057080388377341</span><span class="p">,</span> <span class="mi">1859570245693698000930635066477255198791798456916690502550935397773277654892786</span><span class="p">,</span> <span class="mi">2125075140724245092030270985636432641827993478574472770023332164359192925667914</span><span class="p">,</span> <span class="mi">2676755446455257799105999866711022387760341685507440939934907661068577868325690</span><span class="p">,</span> <span class="mi">2127492815150892523930677422663426899493881960036299948563967902858352278756381</span><span class="p">,</span> <span class="mi">2214414669786315022585169610350112451053743209985881827547493375134440269841335</span><span class="p">,</span> <span class="mi">3287270883919895663649415935008492686272583218112557495688303747999607127347485</span><span class="p">,</span> <span class="mi">1464885862912061941360124921607846166739201296269644683550488862315316621168915</span><span class="p">,</span> <span class="mi">2509523466354990323289405019390879993989971624147206461818727132356459058566874</span><span class="p">,</span> <span class="mi">1908179787903012986073536362508511663101907793909103292522128933290356486740831</span><span class="p">,</span> <span class="mi">2756805796292724316578649442951105668045760292153123880799123727624430139834784</span><span class="p">,</span> <span class="mi">2535051048687395125596454929207466830174234064994395507994578679918815348311204</span><span class="p">,</span> <span class="mi">1803956415800944523172461231393963076071547374162301111338088773341404180366095</span><span class="p">,</span> <span class="mi">1581427673457587965377040867880744385708196297129034872673417280313414009367552</span><span class="p">,</span> <span class="mi">2210767855216344078808268682929389681422344682528936968055695504737022629851880</span><span class="p">,</span> <span class="mi">2550877767452648921597688620286108961639250879503878114842193772033576204495050</span><span class="p">,</span> <span class="mi">2756447633884757327126748105695942994431200035562027053510977246623093748665864</span><span class="p">,</span> <span class="mi">1964779505858686501383673184089092976925707496895287157463367011777877630214817</span><span class="p">,</span> <span class="mi">1711601297301999862146389758002427112641271299995210895971794979535949846981662</span><span class="p">,</span> <span class="mi">2603372280135481877885014637230736101699219758925563658302680157251609514729763</span><span class="p">,</span> <span class="mi">2667368415669419620483366371882587489517753424105473575306644788864390049717122</span><span class="p">,</span> <span class="mi">2375381791051675212713652990248979670250212118711539078479113604716354841854844</span><span class="p">,</span> <span class="mi">2493019084337584580000577145137347950270131374601477024044058401572003131171703</span><span class="p">,</span> <span class="mi">2510272034609038717473097414524000178497639528965708166872787898622112571433878</span><span class="p">,</span> <span class="mi">3376645650205558777740641900007720202740974970958294476802138375965090427473755</span><span class="p">,</span> <span class="mi">1675454950441201753341148918023526478031944115873936771857166782930709781514176</span><span class="p">,</span> <span class="mi">2295573600228045311698664671032537593950444762263429917312199003345978643927531</span><span class="p">,</span> <span class="mi">2989232564205545757256184449992766612296977264754661974992606639914166850018847</span><span class="p">,</span> <span class="mi">1868488082029996620995659067458996737428518781510041614792233972151493754021593</span><span class="p">,</span> <span class="mi">1892797289282204998558656233944707165344792878835655367911040680710800217026842</span><span class="p">,</span> <span class="mi">2387274259011256581212632921041457702119262115024449666940614377355894562863869</span><span class="p">,</span> <span class="mi">1983881332955491024985326286718581476273785076433829348701324483746422111982812</span><span class="p">,</span> <span class="mi">2062767935119595318038310126927517801164698007835687279422680554697212705483997</span><span class="p">,</span> <span class="mi">1813426760548272486587501966021027363576238607043680794995756040734812014712643</span><span class="p">,</span> <span class="mi">1562722510157661651420650013368819014831598048375840600129656685790447905077365</span><span class="p">,</span> <span class="mi">2503673291651808329507024991940471465924677096391781913465384267653316557369694</span><span class="p">,</span> <span class="mi">3062166182385308323163803924577776096950506098179031933671983253622594360543831</span><span class="p">,</span> <span class="mi">1587591727372004646650383007276778974486973795582795614543330273924194355879822</span><span class="p">,</span> <span class="mi">2124191961778288686577724783613312141001752051971190691410871783736806888118043</span><span class="p">,</span> <span class="mi">2807161639821718296747775878877393924108396927585322529661889069690379681631831</span><span class="p">,</span> <span class="mi">2733246030913567509280676058184785395993901538144190159673188530100162954586757</span><span class="p">,</span> <span class="mi">2095734027587628478963707980384021314089446286378559071426863977096549124105443</span><span class="p">,</span> <span class="mi">2988941018164239592895981954356834130422828926400913046430556106893050888967261</span><span class="p">,</span> <span class="mi">1808937486427315645718998608467510156824996634701840345775870478636993074414998</span><span class="p">,</span> <span class="mi">2703685611351166699001869484070817849345096649407749301012107683124291961022814</span><span class="p">,</span> <span class="mi">3102613448307372159580295514146090155031564221004892924292098653939442448602987</span><span class="p">,</span> <span class="mi">2177101615271107571142318136385894289129856690017106068932561385040022673438923</span><span class="p">,</span> <span class="mi">2937151057349964713327739484700778587301119004787857337542161351225777024384191</span><span class="p">,</span> <span class="mi">3284853954926625174312940587880762860995369578650383285440565102632766263047228</span><span class="p">,</span> <span class="mi">1445263692951995462669671350436071269459804664046732803232667890225299584565948</span><span class="p">,</span> <span class="mi">3098676865357167767681695819580978584292551422560325551761761261030493576490054</span><span class="p">,</span> <span class="mi">2785990764438332102573798945869163846058964169046667905446760842139596358710096</span><span class="p">,</span> <span class="mi">2286672499975498339110837294171463889505598069964900735273552787076262216195906</span><span class="p">,</span> <span class="mi">2391874898075608542385911568726340514438277750074914316438113074664500269203548</span><span class="p">,</span> <span class="mi">2605723731444632182682979422507162229453344556769061654841867236618061760791325</span><span class="p">,</span> <span class="mi">1704836746065631894082906921469595231141025078554131926066714879810005676323751</span><span class="p">,</span> <span class="mi">2268547330405383390451485215576699310201492241110811312277295403794298328525318</span><span class="p">,</span> <span class="mi">2257279690119315586453943222353936242022588071540577167031856674546385664274173</span><span class="p">,</span> <span class="mi">2872612890312518257758936879530195946285789167890762413291543959195362374746469</span><span class="p">,</span> <span class="mi">2782503101773215051391891616156069531578324959687740312811009067332251738718639</span><span class="p">,</span> <span class="mi">2138140684559184701106744969820800303534456927075159680357462604985136618973448</span><span class="p">,</span> <span class="mi">3095278460762504782170722834315395471811818415470674607477221955419939863412688</span><span class="p">,</span> <span class="mi">1918147505022892323887450400533906049794530447772075631502966582700819074987318</span><span class="p">,</span> <span class="mi">1707010156387988967567351309817287890962086105434244078370980148566691847226989</span><span class="p">,</span> <span class="mi">2314881420429035304174113419210131391725806719440675908882594861083902503989894</span><span class="p">,</span> <span class="mi">1747310534609110545360894267130302582086449810852064052514438793880321649681103</span><span class="p">,</span> <span class="mi">3080886800074193535767113381895308001287890199225312650567732780605043357281585</span><span class="p">,</span> <span class="mi">1703302394447278966593359250968585558627874162942204836180727596194447436704731</span><span class="p">,</span> <span class="mi">2669959616748655909038072864148442141347343478193254233924937012286825458693418</span><span class="p">,</span> <span class="mi">2678347981660125571899295349441122811861081559641451673761407195954761042620360</span><span class="p">,</span> <span class="mi">2991379536309166201033224610863206913612841270474721698767515583673314564634450</span><span class="p">,</span> <span class="mi">2523223616403538242735730838547058862626362247959528229773500469162355596137501</span><span class="p">,</span> <span class="mi">2642334249408957788795981926934456200612035825182578292078882855617370677855476</span><span class="p">,</span> <span class="mi">1569264447503315408491941272069637567187075617506995254256292388264423968802988</span><span class="p">,</span> <span class="mi">2882151918273286344356356582994818011404936455027402382189340156913800330427975</span><span class="p">,</span> <span class="mi">2158967947928376114000914445674913628201764160381348927457320635619197102958046</span><span class="p">,</span> <span class="mi">2051737874569931765249515775461268812640666956809870235551742670881277489362727</span><span class="p">,</span> <span class="mi">1763323742103061035663123542430905313899541445815905288785170098209590602129239</span><span class="p">,</span> <span class="mi">2713986379520959678928522767197552952345350348987283755564726696384571034845768</span><span class="p">,</span> <span class="mi">2537378599555526856829858853624086645778822512223537633689220391093349190349778</span><span class="p">,</span> <span class="mi">1559241246373570128428798700624771661010342250781098062213106558536948558050766</span><span class="p">,</span> <span class="mi">2279150628340411933639371451926359538099865357708465543071800823000587477815011</span><span class="p">,</span> <span class="mi">2898997193141068749321572525457620525323957690056983345387036999017795349699409</span><span class="p">,</span> <span class="mi">2522226015585642028656627937913370376228450166094635794231237529375655653354731</span><span class="p">,</span> <span class="mi">1976905875820155215040299709744110576065821433679615259775310771962543694656698</span><span class="p">,</span> <span class="mi">3146904959601041464677308813467361006584585805682305551431275878689319837940924</span><span class="p">,</span> <span class="mi">2693972707687221507896250578017189021477213697938899249523534331595305491495324</span><span class="p">,</span> <span class="mi">1624327598106729094885115301581437685380703813627081789404977021142280698320107</span><span class="p">,</span> <span class="mi">1953514564966249010069920346168045652870850335033365089388414276370477434371002</span><span class="p">,</span> <span class="mi">1626888973038960042489813971944630122654048243552668114260339025510208408311822</span><span class="p">,</span> <span class="mi">1691170441751836250949367136389943978609695857804909953940716207113664903533044</span><span class="p">,</span> <span class="mi">2872352457635317352383489529000387930132790666173838033868080090425309904205463</span><span class="p">,</span> <span class="mi">2863893510770920872155566640788223513715980556898590207492297802804734220666273</span><span class="p">,</span> <span class="mi">1664325124883579998946067059421408604232610753151100601467802141679596987515744</span><span class="p">,</span> <span class="mi">3241231581569478941168907165945341550977831562153048119560311010399685701948601</span><span class="p">,</span> <span class="mi">1361807005173976916825978829400623371016110290335271142789044365351489158265785</span><span class="p">,</span> <span class="mi">1406627349406527471168668282696809465701018718681981074249372097245594123964851</span><span class="p">,</span> <span class="mi">1971525597164878946966277125289812240116013457995908459722202952295120967951958</span><span class="p">,</span> <span class="mi">2786911678726247421699703800762265831545443241798747206478605511107149362330097</span><span class="p">,</span> <span class="mi">2439508492564866839705294296041842112712325553837677868579211795105087869136093</span><span class="p">,</span> <span class="mi">2059191048467669923967691687228577391906624742849738642011719916045439079304823</span><span class="p">,</span> <span class="mi">1570106312941323008471547510823923094983111141481917147880596218618909287869316</span><span class="p">,</span> <span class="mi">2122987705390617331128483361876664852958813888207310728315947431193637092615610</span><span class="p">,</span> <span class="mi">2801489830287263060085120056123289367371498556308329538059159707855810575200325</span><span class="p">,</span> <span class="mi">2603504643744222599357535179213179516289477923306029799301160287585889511538186</span><span class="p">,</span> <span class="mi">1579559950022451616002666575318998221718261186164798108063013638204271323515426</span><span class="p">,</span> <span class="mi">2946959687392272154774154223307645704738122794108855599681623985844195753004336</span><span class="p">,</span> <span class="mi">1692770221755889837201538695387588277166659470005431078018491728102054788606405</span><span class="p">,</span> <span class="mi">2659449088987888852195471961116502165033707350474142851843714185859896260654058</span><span class="p">,</span> <span class="mi">3505646321172760059446810399769341926141272269356767693575285534015133195241233</span><span class="p">,</span> <span class="mi">2530481419181774953758830811170792749065265404043551952628317101074384012856365</span><span class="p">,</span> <span class="mi">2712291448546463050414385318858256938602633632117389382231541762951484136569160</span><span class="p">,</span> <span class="mi">2771788380581020235551999360102117509781311204513808674596945948863545438935552</span><span class="p">,</span> <span class="mi">1955826919431026980944761018180907821649592615023066213634119373120418173949204</span><span class="p">,</span> <span class="mi">2233584311947835760483846096048038712598649182856770677618031551939193923070629</span><span class="p">,</span> <span class="mi">3394595068511229452615822692260046682896960654048194476745024879264499379417364</span><span class="p">,</span> <span class="mi">2712573898841928347986369197314358548875252769951810734215760791710091814581815</span><span class="p">,</span> <span class="mi">1748981602423073911431838108063086650192315739500168302252222265177547421664563</span><span class="p">,</span> <span class="mi">2918701578242467135076226389338480065735119480562687109522929797564227072493184</span><span class="p">,</span> <span class="mi">2164542802657835484124827216032688263572786614573372525249065148400873809020470</span><span class="p">,</span> <span class="mi">1135304887972847560145538866404958097776596359071002711002875129077851779982891</span><span class="p">,</span> <span class="mi">2205584540603634087173783390627256443719846063793628767797341432227402910992158</span><span class="p">,</span> <span class="mi">2690352932777477095639383802001157556275154650146494280789592444767406723210088</span><span class="p">,</span> <span class="mi">2303944374984763927616623281091903699148030217974972202655946341959198480366990</span><span class="p">,</span> <span class="mi">1826879964307133264320563754533689815425723980821932135389272772715666899003374</span><span class="p">,</span> <span class="mi">2411535830583065044709148037012533536301300387611929837028371177053977732254183</span><span class="p">,</span> <span class="mi">3102248701716368945194959238072315916896617832833372561718927136392499451559578</span><span class="p">,</span> <span class="mi">2659059708824611624428432407423533442925665544505963263289772494964288235307875</span><span class="p">,</span> <span class="mi">2122091574300829544940359499145373746146266675687307129711907050808965471122010</span><span class="p">,</span> <span class="mi">1700916444187293837558906660368523799466101955714678788331652720755325956184538</span><span class="p">,</span> <span class="mi">2567718060732115690755878753641406930783934887601526519050886636729753186426791</span><span class="p">,</span> <span class="mi">1952081132214229966862614041338565988918704651475436080348360529823670476859620</span><span class="p">,</span> <span class="mi">1660215762591901715725992379790262398087569715838733505603236713521769589358820</span><span class="p">,</span> <span class="mi">1719279125595280317066033690110562638515279430979107832569413806636508635211996</span><span class="p">,</span> <span class="mi">3150257746796819704620980918552950504464974368953784237516693028734092071089047</span><span class="p">,</span> <span class="mi">1533483464980797817093734747462583125027126533889191512411074224355529845622071</span><span class="p">,</span> <span class="mi">2488961034310705334758521978741509630299502434569628208806014299768156795682257</span><span class="p">,</span> <span class="mi">1949296862369855738672364903506625258331673226248095354317656816116053344797835</span><span class="p">,</span> <span class="mi">3314180997278886324171475580120649860821510669127198863042562159001687994942122</span><span class="p">,</span> <span class="mi">1835912431730828052486567697931843664151353173587570710495449691984382497927315</span><span class="p">,</span> <span class="mi">2490573473773652707889662396932059726458725983603386101684045752109912066544351</span><span class="p">,</span> <span class="mi">2034391449976822309453187815141830984379516892947671482205865823880790979367955</span><span class="p">,</span> <span class="mi">2904021828859719234045989645729651328223671397095849600652399072239977584752185</span><span class="p">,</span> <span class="mi">2898092590337486358630458611863555173232553156056707848156576249041471235470768</span><span class="p">,</span> <span class="mi">3020050896501407718070202328514173978695297814931297739049640810470505425773745</span><span class="p">,</span> <span class="mi">1162913829573891584933621423487787462781528876246539914934653605693493109367743</span><span class="p">,</span> <span class="mi">2411509537509594942434869563398255803405247485496687541554728239521209563719728</span><span class="p">,</span> <span class="mi">3240460093945381326170175021314548622274008446302186694162254988437882522956789</span><span class="p">,</span> <span class="mi">2042576958259566656441090421986717161687799145769915833228519921746477531448760</span><span class="p">,</span> <span class="mi">2553411758242921025239995694953337401215433895789864555503864382953439429213802</span><span class="p">,</span> <span class="mi">2820514264957484223884788232888402572082052875947845405781652420449215392785603</span><span class="p">,</span> <span class="mi">2641370591795997642215472507781953866796675755685964449326951672513035331652719</span><span class="p">,</span> <span class="mi">2823035270072193806363721364627815545328685374442891399776824815269510767922152</span><span class="p">,</span> <span class="mi">1989373778720753497822506435334497629024665265080539577357802530369873476548739</span><span class="p">,</span> <span class="mi">1862386424241098951111754027338499846132635633222316642962968740112589660520830</span><span class="p">,</span> <span class="mi">2976767130013568871382359613949325813684341929036309541118080812240632837951917</span><span class="p">,</span> <span class="mi">2032079799183763407608429385442348826534633217836159747315522261005324747502541</span><span class="p">,</span> <span class="mi">2708285103915655469463038547427063010568545575090977468837676375353975489314033</span><span class="p">,</span> <span class="mi">1763806042471114758817803518721264989399707893537069108192481105750144308762714</span><span class="p">,</span> <span class="mi">1937326669619940914067700437225091575824756751300418686192482170396808556973038</span><span class="p">,</span> <span class="mi">2435703549632943593049899499355898299013949956078689678733600487087852297494155</span><span class="p">,</span> <span class="mi">1564269996471702815616616340843697420448380748563779822431189073561802077443811</span><span class="p">,</span> <span class="mi">2456980081971515876372636881680154805873081926372199873790185654198943312487861</span><span class="p">,</span> <span class="mi">2114228222599900470093715633907929439859036580370529231708091911394217318192346</span><span class="p">,</span> <span class="mi">2412504259980354806049559188591922758532822094151137644379211660889448844429578</span><span class="p">,</span> <span class="mi">2635073202673673572264139459896284480350454830352313451411706615748140392229736</span><span class="p">,</span> <span class="mi">2725320685400498493268546434049721871475577064325227566368156917361595597089351</span><span class="p">,</span> <span class="mi">3037867883571431356133279924916838430904119854900038874159214526715272191199734</span><span class="p">,</span> <span class="mi">2824971163661740859800864424701755168512099695296428827528594616947609789856313</span><span class="p">,</span> <span class="mi">1719312755020161540743541987056216628179475180251054784014251838005404915359190</span><span class="p">,</span> <span class="mi">3012080368518302834546286001958441602695677482755944367912995252821821409322630</span><span class="p">,</span> <span class="mi">2595410720707289052259292382365869693173486839668185767458178220761996549540776</span><span class="p">,</span> <span class="mi">1730386135469589080821808335571789810133070354002257675548380927002483585203525</span><span class="p">,</span> <span class="mi">2183488429559972081266293580805381776596408303103494625441288200546469064198052</span><span class="p">,</span> <span class="mi">1586663745637750938560919751995751853774793809756290411350824056092900626767581</span><span class="p">,</span> <span class="mi">2633560016633693373820917408699356704371120444974417409768038767304741258416882</span><span class="p">,</span> <span class="mi">1588266791029338678483285861004896440056893325470901832575017393368494381844313</span><span class="p">,</span> <span class="mi">2062140763508547310649316830659374267702516490495399524838782204228464817557303</span><span class="p">,</span> <span class="mi">2210631662045486660045329182773925615869393461089725622733280699922614662573188</span><span class="p">,</span> <span class="mi">2459357704199420786919294385229487410232263583838342283632925369162881135458784</span><span class="p">,</span> <span class="mi">2613643032209168797222243130152765007369922353402246208144392804402308111491213</span><span class="p">,</span> <span class="mi">1710948753142088971871638997633063611816787381413888582644218262719506545790814</span><span class="p">,</span> <span class="mi">2370888885585089451526475579030868634013098608165933127887831074072488486211027</span><span class="p">,</span> <span class="mi">1874802131193521153356429186932124966125006368474096875577533362925609490873675</span><span class="p">,</span> <span class="mi">2257490811907741146287835975463592107772672753660997437720973452168570067018183</span><span class="p">,</span> <span class="mi">2027396376118176181554556587461857799175262388659116515495331190904871780900168</span><span class="p">,</span> <span class="mi">2629203400695349534340609904454384114924188013467883308551455289883598277506576</span><span class="p">,</span> <span class="mi">2890142848965203803657678020364632618710915881162439911156088498054480848444284</span><span class="p">,</span> <span class="mi">2219081521671625674270988735444011710759687035389885997488568461190702712665391</span><span class="p">,</span> <span class="mi">2380376764714634310626713438415734647767006799419143228948264493667246616324693</span><span class="p">,</span> <span class="mi">2814638103849795047350222194926779177051843856327710877892295181020329663696490</span><span class="p">,</span> <span class="mi">2047838076416771508199337081863868486021562878681029339974246205098649513457324</span><span class="p">,</span> <span class="mi">1784932180402383121530422581359653305472252436816341976330551492781428029261514</span><span class="p">,</span> <span class="mi">1941527319325036462639722135771653972446143884927214478817515634545849137431669</span><span class="p">,</span> <span class="mi">2907563421094345848181477200768863573314924396229466732653561249857033838608028</span><span class="p">,</span> <span class="mi">3000337261597585046467954498628106745718605542524330400603607525806097908557040</span><span class="p">,</span> <span class="mi">2786351435794517058372407045515681838202163268432832568806234013222378647734555</span><span class="p">,</span> <span class="mi">1836092084933347325356728587763659299616726483980078801819666587432774417206073</span><span class="p">,</span> <span class="mi">1574796707547605480163763402663498447991988000366600032231056878314794495735406</span><span class="p">,</span> <span class="mi">2353612553114861608109605098910218987289338082728729053511317177449593301899294</span><span class="p">,</span> <span class="mi">2248699009001439455571494271407476531250809026878799237531708891383695128771122</span><span class="p">,</span> <span class="mi">2417476639863872938259290255198814812522944882305274702168279778861529389946164</span><span class="p">,</span> <span class="mi">2971783285485191513675004761256201878142447913010923130203347305001342064598990</span><span class="p">,</span> <span class="mi">2142943014519370915558067112669312116295755777127417301618377823907694765946338</span><span class="p">,</span> <span class="mi">2661527100047693021718564373867938790031132276013799786506265512546563727003637</span><span class="p">,</span> <span class="mi">2789161914059543582404778858005723463894421641256844424769515176678453044603337</span><span class="p">,</span> <span class="mi">3040014096172959690905204596262839182154829748346494437618210463868135852399494</span><span class="p">,</span> <span class="mi">2635917392114338296279286936931727170162216403550460752678274156631579609014634</span><span class="p">,</span> <span class="mi">2739029817120645069226715038276509821027853672448467093767065178330079288792182</span><span class="p">,</span> <span class="mi">1484738110125237820910555901588888998435780560979615982696803082959376104709161</span><span class="p">,</span> <span class="mi">2372999157870072620027636129336264510265625974962517451119668258432432453459291</span><span class="p">,</span> <span class="mi">2455687222461827602660206191412397063350581337238480459622011027481646403606246</span><span class="p">,</span> <span class="mi">1876432865628323024983726722907298656929294958135555012103492960934104600220219</span><span class="p">,</span> <span class="mi">1307841776873030596697898086313556358231717270837313632583014388160388520957206</span><span class="p">,</span> <span class="mi">1930461711710915408769618026875738822780815121368520129692337068401427296313373</span><span class="p">,</span> <span class="mi">3325280034101518748159577481976984799447956248994089550885201924665697013425938</span><span class="p">,</span> <span class="mi">2141730641878301259755102172773233369139906794041664225968362000101121750584861</span><span class="p">,</span> <span class="mi">1375656209370479485060378259057252116555118144818855052445166926233837043706214</span><span class="p">,</span> <span class="mi">2977769163020142792135228863060463623818385890145164352689707153311169566103001</span><span class="p">,</span> <span class="mi">2002834314014321054187636141249638087852858776899333125132657509142700920915899</span><span class="p">,</span> <span class="mi">2851322935231676704267708179361053286697597203152531856687447152874802460360864</span><span class="p">,</span> <span class="mi">2992147055296731103287336167512602309601875655087942903948613982271058288601610</span><span class="p">,</span> <span class="mi">1726152188820994697022282207330085869001951550140404285145456533691648598100569</span><span class="p">,</span> <span class="mi">1888604908855715245619198652572645357831264155960901438791523139267142437922964</span><span class="p">,</span> <span class="mi">2352448954998759084316420067380678866770050286925503771493227478020356378487607</span><span class="p">,</span> <span class="mi">2048308642686539346926409497753971725904482476842642143130646956853793335448162</span><span class="p">,</span> <span class="mi">2501794434297131030946196089001233568215948580707283625912119735439908255378216</span><span class="p">,</span> <span class="mi">1903581457860725006292290733111833468722059955064722300000621986075260984730890</span><span class="p">,</span> <span class="mi">3091137366193643814130757614246951323703457976373978819948176036606067628695033</span><span class="p">,</span> <span class="mi">2320974233653240015647239860333344772512164840786841438935137525814103134556389</span><span class="p">,</span> <span class="mi">2685814581994945080754008326997111441187184408176728102326696887317673828436881</span><span class="p">,</span> <span class="mi">2000735932503291577967925242471844116928558854574240520790749980890194978580328</span><span class="p">,</span> <span class="mi">2420029456477865293042005101867311660978152293635853664008446797812937597305509</span><span class="p">,</span> <span class="mi">2129555161426105317333875952515114347501476208979636012506937915200909157703983</span><span class="p">,</span> <span class="mi">2582947141522611573263255922392440642592155092034175475551805098992649126512502</span><span class="p">,</span> <span class="mi">2007387202205259405202080331409071622936010454228446167685562218123845168427194</span><span class="p">,</span> <span class="mi">1555346362119608126365015153381797593304002606210833679794143799398649488008709</span><span class="p">,</span> <span class="mi">2627310074157008615051031552873690677995763263775766597112117219178356232254138</span><span class="p">,</span> <span class="mi">2614870511241382676735961019792996302007146563530003061044256637662310198888354</span><span class="p">,</span> <span class="mi">1835517951630184004031358550557037074114640173264557591588255546633305636557964</span><span class="p">,</span> <span class="mi">2191360283419900545159044662092406127521650045451596375234153785353085173024074</span><span class="p">,</span> <span class="mi">1633587445499810699103350031108401299972286118612069333913054471891868634481981</span><span class="p">,</span> <span class="mi">2244506220430518115591858883493205895321869570070556445420237854928896037980916</span><span class="p">,</span> <span class="mi">1701933270297668456594030101250077900332487913784571880972700238355040675454480</span><span class="p">,</span> <span class="mi">2073349787428363296079890283770992319911798913918743690389931150271611080940175</span><span class="p">,</span> <span class="mi">2554199147351498854198124357914578384080971977075570829246726644622890103967478</span><span class="p">,</span> <span class="mi">2869859353109108769884032621260179038333321889811803968916073817470951304600426</span><span class="p">,</span> <span class="mi">2163535859846850182293040680340377227423216011265031881108965948829531859829146</span><span class="p">,</span> <span class="mi">2127374883010589876012860539719535092731861273867713812127079127126859754504360</span><span class="p">,</span> <span class="mi">1938864159337265849599773369625058562249980220372090673684508081397701999600056</span><span class="p">,</span> <span class="mi">2757117073936544413482459237210873364734485018520440516659943461070434895539784</span><span class="p">,</span> <span class="mi">2173928418091053227417706702891687012126191118333695997916756600408543226601665</span><span class="p">,</span> <span class="mi">1231466375392538328694612130964071690021805034621412520944511481512279507297777</span><span class="p">,</span> <span class="mi">2349648477640756485993251301906725341047132183382215279465438497793389660839109</span><span class="p">,</span> <span class="mi">3099111297578477135779886526345743640311475435758824993734579420700333420488649</span><span class="p">,</span> <span class="mi">1690664359964097576800556030074459924192324269317618913545738475596847587203311</span><span class="p">,</span> <span class="mi">2054265318601641370989870371763207271922774837760458400854115401387162521953106</span><span class="p">,</span> <span class="mi">1455042222594995300357946948940506176079473202745755539315170165422919837214987</span><span class="p">,</span> <span class="mi">2737703901230648620119729675184516215498340228498747075833558529322741550448515</span><span class="p">,</span> <span class="mi">1847489593766622016816587362489572976735325020357364005648973154291576153981323</span><span class="p">,</span> <span class="mi">2920110538280520314747827961178189014514998204549518095761788407950255153847540</span><span class="p">,</span> <span class="mi">2958268500396601269761423235959825847393704227293222157799335793319669060622825</span><span class="p">,</span> <span class="mi">2345985542180934042839128223629154919627988311400089812717130377891745822434700</span><span class="p">,</span> <span class="mi">2241014203060338070745691577758044738147586031133732693491353306115564095153519</span><span class="p">,</span> <span class="mi">2870347637439131502185386213581689360274632975558359807782293631067782158330598</span><span class="p">,</span> <span class="mi">1852634989733999093426874218169458195422557079581034231098762933704435006044887</span><span class="p">,</span> <span class="mi">1862388256084067824430383892323053894335290341611286789184625594484340897283766</span><span class="p">,</span> <span class="mi">2840894927901654909141739161619191856732681195736147467945179479863663606830039</span><span class="p">,</span> <span class="mi">2402361678063385966682160132501003561188266731404508880379614200749592715079467</span><span class="p">,</span> <span class="mi">1909915635563467518852047815113709884418039180699302428128451374644140267941130</span><span class="p">,</span> <span class="mi">1658926823813195282852604374649678095399363082284848840092112243331543914063209</span><span class="p">,</span> <span class="mi">3246219477051766010472120322020803795950363636590298249520227420314197051320180</span><span class="p">,</span> <span class="mi">1917533171125817291632511547114825642767636167947706046118285318907308481349834</span><span class="p">,</span> <span class="mi">1732529573776954215396883824592109278461465616296113719187362257221124050421297</span><span class="p">,</span> <span class="mi">2814263652577009321513917897615787457764472311899563306422689175146400874504093</span><span class="p">,</span> <span class="mi">2324993916740169682393708336019975558244948129067453744986371404324519261398643</span><span class="p">,</span> <span class="mi">1503532043620487999925454219611892452064871526670005017321304231576559050996563</span><span class="p">,</span> <span class="mi">1699050200327606267818057665406833317372501004260777756764072516881987595376191</span><span class="p">,</span> <span class="mi">1472586941034140862204493262409660776093862810910579498650970236100393355808389</span><span class="p">,</span> <span class="mi">2029713505933905447328187739983632511774919013593902578922419593584096403736957</span><span class="p">,</span> <span class="mi">3225171083287582817199300358232903389164407358944150878502408641001476881116329</span><span class="p">,</span> <span class="mi">2002739705085819696773726906427925703939222313302954137977322923239129980777347</span><span class="p">,</span> <span class="mi">2977185366949025183951676661737118397967970692854945619333644262933483104988303</span><span class="p">,</span> <span class="mi">2947173195366661114129705192992773919565837049152232827162046911232264006182254</span><span class="p">,</span> <span class="mi">1754887252759358888503156014386972306424663301077620313505515454966154084372388</span><span class="p">,</span> <span class="mi">1907405965907142420721338795834817757376940109196779186347981266665613826233212</span><span class="p">,</span> <span class="mi">2015330364408646879738783215328681821738282240814572865785393505480211039640066</span><span class="p">,</span> <span class="mi">2727893473289569333590201710166502128438404920873958155705550313677854946255891</span><span class="p">,</span> <span class="mi">2285909249720592854317361245045521549583079701492605951982463479972983290870664</span><span class="p">,</span> <span class="mi">1845999854724343976570027772639141428826241063271141835304228421100708367103569</span><span class="p">,</span> <span class="mi">2363672791141786231097409217383362655763662840519306763732391294439966071060443</span><span class="p">,</span> <span class="mi">2806936541429868513549845833892240163395528940507540978740415968116778710515102</span><span class="p">,</span> <span class="mi">2697219364136050209859748029002897741198163283378001317797626490633055309788843</span><span class="p">,</span> <span class="mi">2247184701442480681779249398438744369415499975031480815364948207694623966199387</span><span class="p">,</span> <span class="mi">3231086019038147296220763915450735650568111238173220866389065299438632440751237</span><span class="p">,</span> <span class="mi">1832276392976999556129354128814768583897218865356710089662798671135934832729329</span><span class="p">,</span> <span class="mi">1917342661910522861149489645623396859753824081005762371765834098322307654497381</span><span class="p">,</span> <span class="mi">1568017253990396537784321601698015449451817832281251660296025502053520561811812</span><span class="p">,</span> <span class="mi">2941616922582905030134617392243899143088159369106475594003645096550740211691295</span><span class="p">,</span> <span class="mi">2683368351117012950411179150631678778651588063084420106900764888746387687168222</span><span class="p">,</span> <span class="mi">1778420058969534218383812868489034592227993121385588230014110347522765607535946</span><span class="p">,</span> <span class="mi">1923764582860656292136186495617159929691221984386016458167256338158112818097098</span><span class="p">,</span> <span class="mi">2656631653745695250048441951987799766681703378345466605375664608750138267094490</span><span class="p">,</span> <span class="mi">1691142612544234157420807122078777197042131796182931240632840532974741207366554</span><span class="p">,</span> <span class="mi">2507486372683720823405119393792056270780488181696931417677286972451364222324898</span><span class="p">,</span> <span class="mi">2447484598394060182059875442220084043147995607049408859564736403691102277754703</span><span class="p">,</span> <span class="mi">2595545091473159386760353940687413026143395465208155790570429164011691489970522</span><span class="p">,</span> <span class="mi">2202408778718364092229680334582879965674953387559013630876726207304442759100950</span><span class="p">,</span> <span class="mi">1434044264080765552621476110745390069274931289997241169288539930228352180841157</span><span class="p">,</span> <span class="mi">1730963110434177443493191358945360130890936890712807539961534419929496768666853</span><span class="p">,</span> <span class="mi">1814514698770987074692007368337406747271432147111293957177097586796743335366864</span><span class="p">,</span> <span class="mi">2019810504329770248199484256164192365539847161241402784488318370955221358775583</span><span class="p">,</span> <span class="mi">1956536334521214519139005513274352058427551797660335556789649011126122469394621</span><span class="p">,</span> <span class="mi">1694989916853171959536869648489026282016518865526156952107205253569208427588802</span><span class="p">,</span> <span class="mi">1770954866648012756428357246696467696128773908163230225537396522364937343241454</span><span class="p">,</span> <span class="mi">2802996166579840936213980653413335387241497268210450195945009691876958816391301</span><span class="p">,</span> <span class="mi">2644513999224447293556676912891272387168542381412380571251701553565002974065160</span><span class="p">,</span> <span class="mi">2463113107479271232731543030008511295698209596496337911158126811719994524730804</span><span class="p">,</span> <span class="mi">1334261391981801071990435527914252759589346447377833542541150596820934615355804</span><span class="p">,</span> <span class="mi">2279003943573323534404267206493585478080811684601838324835345540797019580209881</span><span class="p">,</span> <span class="mi">2120333317125642116907729078091221616419400615377299883141448350668604241449740</span><span class="p">,</span> <span class="mi">1756076625856166082841036230119144332034421616895963015504269044505034917059399</span><span class="p">,</span> <span class="mi">2207615431411605687205294013132826939107597873984017330939473488301182073661283</span><span class="p">,</span> <span class="mi">3402307618965454186510075915629520371557316035524100232971772642879541133866581</span><span class="p">,</span> <span class="mi">2257357821930382005896155137026800185487154395207884048113343615729127921819640</span><span class="p">,</span> <span class="mi">1551825494936649699327478596078225912177508474254549041414169792254557027355217</span><span class="p">,</span> <span class="mi">1365732972487952087912201569843410874792402112231916794732119488395781020203311</span><span class="p">,</span> <span class="mi">1807495973197443225501042200464935032992636693133827521190080032536875399246452</span><span class="p">,</span> <span class="mi">3066548428950611112157801870665061157137219961909600957576183226324708978020683</span><span class="p">,</span> <span class="mi">1827692464083287200286079376258081926585195439691129818155557308275829855008347</span><span class="p">,</span> <span class="mi">2177950758759980504779021451412567471817907630921840590750050627364220415245388</span><span class="p">,</span> <span class="mi">2500408490068677256675931862459954402673338550184480122429756334963949542806122</span><span class="p">,</span> <span class="mi">2134138149727797607166351547030249872845232722149691714081305131457344525454827</span><span class="p">,</span> <span class="mi">2332811982231893523373224098520580507465485470638866226523073135090091836623660</span><span class="p">,</span> <span class="mi">2230040524682264142564447094948233324847290581046122443235354731861026477584174</span><span class="p">,</span> <span class="mi">2331535816974572878114135820359512753886735587931098018590107412165934055193524</span><span class="p">,</span> <span class="mi">2865092118462007871887135714513386199315743927247622435497167687480635403743332</span><span class="p">]</span>

<span class="n">bitstring</span> <span class="o">=</span> <span class="s">""</span>

<span class="k">for</span> <span class="n">T</span> <span class="ow">in</span> <span class="n">output</span><span class="p">:</span>
    <span class="n">attack</span> <span class="o">=</span> <span class="n">CJLOSSAttack</span><span class="p">(</span><span class="n">primes</span><span class="p">,</span> <span class="n">T</span><span class="p">)</span>
    <span class="n">subset</span> <span class="o">=</span> <span class="n">attack</span><span class="p">.</span><span class="n">solve</span><span class="p">()</span>               <span class="c1"># returns None or a list
</span>
    <span class="n">bitstring</span> <span class="o">+=</span> <span class="s">"1"</span> <span class="k">if</span> <span class="n">subset</span> <span class="k">else</span> <span class="s">"0"</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Iteration </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">bitstring</span><span class="p">)</span><span class="si">}</span><span class="s"> / </span><span class="si">{</span><span class="nb">len</span><span class="p">(</span><span class="n">output</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="n">bitstring</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># ictf{dec1d3_my_fl4g_4nd_m9_b1ts_by_LLL_3ac4ed91}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Knapsack" /><category term="Low density subset problem" /><category term="LLL" /><category term="Decisional" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Bivariate (ictf Round 54)</title><link href="http://localhost:4000/bivariate/" rel="alternate" type="text/html" title="Bivariate (ictf Round 54)" /><published>2025-04-30T12:00:00+02:00</published><updated>2025-04-30T12:00:00+02:00</updated><id>http://localhost:4000/bivariate</id><content type="html" xml:base="http://localhost:4000/bivariate/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getPrime</span><span class="p">,</span> <span class="n">bytes_to_long</span>
<span class="kn">from</span> <span class="nn">secret</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>

<span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>

<span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">gens</span><span class="p">()</span>

<span class="n">terms</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">):</span>
    <span class="n">terms</span> <span class="o">+=</span> <span class="p">[(</span><span class="n">x</span><span class="o">**</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">y</span><span class="o">**</span><span class="n">j</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="o">-</span><span class="n">i</span><span class="p">)]</span>

<span class="n">T</span> <span class="o">=</span> <span class="n">RealDistribution</span><span class="p">(</span><span class="s">'gaussian'</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">coefs</span> <span class="o">=</span> <span class="p">[</span><span class="nb">round</span><span class="p">(</span><span class="n">T</span><span class="p">.</span><span class="n">get_random_element</span><span class="p">())</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">terms</span><span class="p">))]</span>

<span class="n">f</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span><span class="n">term</span><span class="o">*</span><span class="n">coef</span> <span class="k">for</span> <span class="n">term</span><span class="p">,</span><span class="n">coef</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">terms</span><span class="p">,</span><span class="n">coefs</span><span class="p">)])</span>
<span class="n">w</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">f</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">),</span><span class="n">n</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'out.txt'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">n</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">e</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">c</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">f</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="nb">file</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">w</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n = 98488948227534213135365379684862624429673068552821962383206603053375602239567322517902539151497074614991106864222481349938278930598229083057490442318255136829928469581554377192371866029487604479323565889518717446151982565992066276503827461143275322745847799672825450812329543611683563104108219738025321562523
e = 65537
c = 33689078336368731933599049868377598889513853827091255415228112692581639226201157033763841134090287166200344255205518269253856257850799105681895141225429744730522910522719711967250214161994104603730456295060918937791062152710510634082416634814375504799932491459723391812528758183583260665132261524658305233101
f = x^14*y + x^13*y^2 - x^12*y^3 - 3*x^10*y^5 - x^8*y^7 - x^6*y^9 + x^5*y^10 + x^4*y^11 - x^2*y^13 - 2*x*y^14 + y^15 - x^14 + 3*x^13*y + x^12*y^2 + 2*x^11*y^3 - x^9*y^5 + x^8*y^6 + x^7*y^7 - x^6*y^8 + x^5*y^9 - x^4*y^10 - 2*x^3*y^11 + 2*x^2*y^12 - 2*x*y^13 + x^11*y^2 - 3*x^10*y^3 - x^7*y^6 - x^6*y^7 + x^5*y^8 + 3*x^4*y^9 + 4*x^3*y^10 + 2*x^2*y^11 - 2*x*y^12 + y^13 + 2*x^12 + 2*x^11*y - 5*x^9*y^3 - 3*x^8*y^4 + 4*x^7*y^5 - 2*x^6*y^6 - x^5*y^7 - x^3*y^9 - x^2*y^10 + x*y^11 - y^12 - x^11 - x^10*y + 3*x^9*y^2 + 3*x^8*y^3 - 2*x^7*y^4 - 2*x^6*y^5 + 2*x^3*y^8 - 3*x^2*y^9 + y^11 + x^10 + x^8*y^2 - x^7*y^3 + 3*x^6*y^4 - 5*x^5*y^5 - x^4*y^6 + x^3*y^7 - x^2*y^8 - 2*y^10 - x^8*y - x^7*y^2 - x^5*y^4 - x^4*y^5 - x^2*y^7 - x*y^8 - 4*x^8 + 4*x^7*y - 2*x^6*y^2 - x^5*y^3 - 2*x^4*y^4 - x^3*y^5 - 3*x^2*y^6 + x*y^7 - 3*y^8 + 4*x^6*y + x^5*y^2 - 2*x^3*y^4 - 5*x^2*y^5 + x*y^6 + x^5*y + 2*x^4*y^2 - x^2*y^4 - x*y^5 - 2*y^6 + 3*x^5 + 4*x^4*y + 2*x^3*y^2 - y^5 - x^4 - 3*x^3*y - 3*x^2*y^2 + x*y^3 + 2*x^3 + x*y^2 + y^3 + x^2 - 4*x*y + y^2 + 2*x + y
w = 15989670860487110440149242708963326378222417402274922693109917884050744558426262015391394948248787707275063436118071762352120567031556081355002123446258001515700442370180130234425828020876205206138411646169530066935290884923582522784445410472996067725745321733529202293253140485085104533833013732203780391490
</code></pre></div></div>

<p>The encryption script uses RSA to encrypt the flag. However, we are given some hints about the prime factors $p$ and $q$.</p>

\[\large w = 2^{f(p,q)} \mod n\]

<h5 id="recovering-p">Recovering p</h5>

<p>This approach will be quite similar to the approach in the previous univariate challenge, meaning it will involve fermat’s little theorem and gcd. However, we must make some preparations first.
For $f(p,q)$, the terms $x^{i}y^{j}$ become $p^{i} q^{j}$. However, if we instead do $f(1,n)$, the terms become $1\cdot p^{j}q^{j}$. If we have:</p>

\[\large p^{i}q^{j} \quad \text{and} \quad p^{j}q^{j}\]

<p>We can rewrite $p^{i}$ as:</p>

\[\large \begin{align}
\nonumber p^{i} = p^{i} \cdot p^{j} \cdot p^{-j} \\
\nonumber p^{i} = p^{j} \cdot p^{i-j}
\end{align}\]

<p>By doing this, the terms are quite similar:</p>

\[\large p^{j}q^{j}p^{i-j} \quad \text{and} \quad p^{j}q^{j}\]

<p>Their difference, will thus equal:</p>

\[\large p^{j}q^{j} - p^{j}q^{j} \cdot p^{i-j}= p^{j}q^{j}(1-p^{i-j})\]

<p>This difference $p^{j}q^{j}(1-p^{i-j})$ contains a term $1-p^{k}$ for some value $k = i-j$, which can be rewritten as $-(p^{k}-1)$. Any multiple of $p^{k}-1$ is always divisible by $p-1$.</p>

<p>The result of this is that $f(1,n) - f(p,q)$ is divisible by $p-1$. We can now utilize fermat’s little theorem:</p>

\[\large
\begin{align}
\nonumber 2^{f(1,n)-f(p,q)} &amp;\equiv 1 \mod p \\
\nonumber \frac{2^{f(1,n)}}{2^{f(p,q)} } &amp;\equiv 1 \mod p \\
\nonumber 2^{f(1,n)} &amp;\equiv 2^{f(p,q)}  \mod p \\
\nonumber 2^{f(1,n)} &amp;\equiv w  \mod p \\
\nonumber 2^{f(1,n)} - w &amp;\equiv 0  \mod p
\end{align}\]

<p>Since this term is congruent to $0 \mod p$, we can use $gcd$ with $N$ to recover the prime factors:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">),</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="n">w</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span>
</code></pre></div></div>

<p>And from here, decryption is easy:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">phi</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">))</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
<span class="c1"># b'ictf{symmetry_of_bivariate_polynomials_is_zany}'
</span></code></pre></div></div>

<h5 id="solvepy">Solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">gens</span><span class="p">()</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">98488948227534213135365379684862624429673068552821962383206603053375602239567322517902539151497074614991106864222481349938278930598229083057490442318255136829928469581554377192371866029487604479323565889518717446151982565992066276503827461143275322745847799672825450812329543611683563104108219738025321562523</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">33689078336368731933599049868377598889513853827091255415228112692581639226201157033763841134090287166200344255205518269253856257850799105681895141225429744730522910522719711967250214161994104603730456295060918937791062152710510634082416634814375504799932491459723391812528758183583260665132261524658305233101</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">14</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">13</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">12</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">10</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">13</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">14</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">15</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">14</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">13</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">12</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">11</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">9</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">12</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">13</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">11</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">10</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">12</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">13</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">12</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">11</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">9</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">-</span> <span class="n">y</span><span class="o">^</span><span class="mi">12</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">11</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">10</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">9</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">9</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">11</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">10</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">10</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">8</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">7</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">7</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">8</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">6</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">5</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">5</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">6</span> <span class="o">+</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">5</span> <span class="o">+</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">y</span><span class="o">^</span><span class="mi">5</span> <span class="o">-</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="o">*</span><span class="n">y</span> <span class="o">-</span> <span class="mi">3</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="n">x</span><span class="o">*</span><span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="mi">4</span><span class="o">*</span><span class="n">x</span><span class="o">*</span><span class="n">y</span> <span class="o">+</span> <span class="n">y</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
<span class="n">w</span> <span class="o">=</span> <span class="mi">15989670860487110440149242708963326378222417402274922693109917884050744558426262015391394948248787707275063436118071762352120567031556081355002123446258001515700442370180130234425828020876205206138411646169530066935290884923582522784445410472996067725745321733529202293253140485085104533833013732203780391490</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">gcd</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="n">f</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">),</span><span class="n">n</span><span class="p">)</span><span class="o">-</span><span class="n">w</span><span class="p">,</span><span class="n">n</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">phi</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">))</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Fermats Little Theorem" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry></feed>