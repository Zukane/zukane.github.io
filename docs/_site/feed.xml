<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-03-20T21:27:24+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zukane CTF</title><subtitle>CTF Writeups, mostly focused on crypto</subtitle><author><name>Zukane</name></author><entry><title type="html">QRSA (Cyberlandslaget 2024)</title><link href="http://localhost:4000/QRSA/" rel="alternate" type="text/html" title="QRSA (Cyberlandslaget 2024)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/QRSA</id><content type="html" xml:base="http://localhost:4000/QRSA/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the following source code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">getPrime</span>
<span class="kn">from</span> <span class="nn">sage.all</span> <span class="kn">import</span> <span class="n">QuaternionAlgebra</span><span class="p">,</span> <span class="n">Zmod</span>
<span class="kn">from</span> <span class="nn">secret</span> <span class="kn">import</span> <span class="n">FLAG</span><span class="p">,</span> <span class="n">gen_hint</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">NBITS</span> <span class="o">=</span> <span class="mi">1024</span>

<span class="k">def</span> <span class="nf">gen_primes</span><span class="p">(</span><span class="n">coeffs</span><span class="p">,</span> <span class="n">nbits</span><span class="o">=</span><span class="mi">512</span><span class="p">):</span>
    <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">coeffs</span>
    <span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="n">nbits</span><span class="p">),</span> <span class="n">getPrime</span><span class="p">(</span><span class="n">nbits</span><span class="p">)</span>
    <span class="k">while</span> <span class="nb">pow</span><span class="p">(</span><span class="n">b</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">c</span><span class="o">**</span><span class="mi">2</span> <span class="o">-</span> <span class="n">d</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="n">nbits</span><span class="p">)</span>
    <span class="k">while</span> <span class="nb">pow</span><span class="p">(</span><span class="n">b</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">c</span><span class="o">**</span><span class="mi">2</span> <span class="o">-</span> <span class="n">d</span><span class="o">**</span><span class="mi">2</span><span class="p">,</span> <span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="n">nbits</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span>


<span class="n">a</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">FLAG</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="n">NBITS</span> <span class="o">//</span> <span class="mi">8</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">FLAG</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
<span class="k">assert</span> <span class="n">NBITS</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">&lt;</span> <span class="n">a</span><span class="p">.</span><span class="n">bit_length</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">NBITS</span>

<span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="p">[</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="n">NBITS</span> <span class="o">//</span> <span class="mi">8</span><span class="p">))</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>

<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">gen_primes</span><span class="p">((</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">),</span> <span class="n">NBITS</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>

<span class="c1"># Quaternion algebra over the ring of integers modulo n, i^2 = 1 and j^2 = 1
</span><span class="n">Q</span> <span class="o">=</span> <span class="n">QuaternionAlgebra</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">gens</span><span class="p">()</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="n">c</span><span class="o">*</span><span class="n">j</span> <span class="o">+</span> <span class="n">d</span><span class="o">*</span><span class="n">k</span>
<span class="n">ct</span> <span class="o">=</span> <span class="n">m</span><span class="o">**</span><span class="n">e</span>

<span class="n">A1</span><span class="p">,</span> <span class="n">B1</span><span class="p">,</span> <span class="n">C1</span><span class="p">,</span> <span class="n">A2</span><span class="p">,</span> <span class="n">B2</span><span class="p">,</span> <span class="n">C2</span> <span class="o">=</span> <span class="n">gen_hint</span><span class="p">(</span><span class="n">ct</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">A1</span> <span class="o">*</span> <span class="n">B1</span> <span class="o">*</span> <span class="n">C1</span> <span class="o">==</span> <span class="n">A2</span> <span class="o">*</span> <span class="n">B2</span> <span class="o">*</span> <span class="n">C2</span> <span class="o">==</span> <span class="n">ct</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"output.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fout</span><span class="p">:</span>
    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">n</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">e</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">ct</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">A1</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">B1</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">C1</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">A2</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">B2</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">C2</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>And the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n = 79161869544747204783874822054833014320323556832416066584560128636372874663065398425734864730985749653368890376759830367592761979721670941495548898960644396124185466172811136671454154337973972344555362632207904852487665177621475296531057751990913972848863646094468698407041332170700052004768608534042667579121
e = 65537
ct = 45013481087071289721928068628449018125817382958036906384269554149473250372891897535608779938932260322890392299845097077149671299774570636846177433935014408755904011404921701159815757973749348461162094435344024920644842122226585439985801109536760546309420180302452390040296838617424879008033909490679827654476 + 9636778951092026544619680376283645017091864144765215100182792073900889455722431141350824102930042194215545271639741781474956534156028982115096761310259817797880256030535184725458691827842359229205634251600103222660818429492661230352467934735238831060489640927936324633663429097757450709372828417472948228655*i + 42090734601248398467652772944955203031292955060140266685368647521924599121778893886195972800382868410948198836032034804885666359881580106576361714902084329571927989997266986168680004601984090297892893669953053934753173607514702551338186889553996223165625949213170645532229800226654389222790682585308293478211*j + 37699481126666114686462332601768590025034297697056201317434979282540644109720249050363861699136261356898583435103943623192844437959908510088918677203091364226265634529874781462000421643873894197699723017160643170280032485819045136926491711428105967074739475257303917915410119714035780689908122501991259337454*k

A1 = 19727958696358899567551325193694979539894477527861381827404887901335278557117631424903954804827886032261713035975409749872365574368520068437173585631619102947142514993179551407372198727752200352482750928036660247001298894220341281088704979761103978991864910617612193389349395907569524278104742011421485970132 + 59433910848388305216323496861138034780429079304554684757155240735037596105947767000830909926157863621107177340784420617720396405353150873058375313329025293177042951179631585264081955610221771992072611704171244605486366283401134015442352772229809993856998735476856505017691936263130527726663866522621181608990*i + 58107182368102627107777418802525673205878197559852120959065806434496156974251338753096583280662844781884364902930830836113414476554101670045795482773476333201679481447476558436998646999024267638361372457524619117408406037001929636682942806495150503215441463709446189870289027119236269287972168921622751038610*j + 21054687176644577676097403252307341114445359272563945625494322201876717688814059672638281450322904871484525473828999531479347503167569271449753416187168062922505984725334578234455507338949704706193990174683285735079259140619545659848114945495763469633422182385022508536752305051463782716796439612419916540512*k
B1 = 45013481087071289721928068628449018125817382958036906384269554149473250372891897535608779938932260322890392299845097077149671299774570636846177433935014408755904011404921701159815757973749348461162094435344024920644842122226585439985801109536760546309420180302452390040296838617424879008033909490679827654476 + 20285870704186706976213976458439571881006193336387937289849925595201347891376652949248311145360615081470562529188045384875849052770228036462985742433468183628504175998029630865030332309190296171707992065830643884033059264132942270541699779783779676204125698956659169015081249141843645287582920651372517427133*i
C1 = 40573134738540497978912648728273361922102901871861471947076530407737963022296085033111093233900911401164870436155725444036143477985120655827394906518088663532845375713047497411004025135472917095865047307742614582096073754451695348697138094647455515762042505202442917511787202040413692645774080851335298350919 + 49420017049785019367083436811546306734668536671090330475680327960782544182048682173597669784207483770406186515260697164175677372585862582823730811548096072756502494147222745554115462340566650054158383951226280091543180675098181656696520905267988010459726719053402707154451458878186503429021676409786192854445*i + 78169669578580309196899584353976159558382433376762627929763662546821348972302012605491203862577713078888465128984020107352999491597385756415928441922877930653432823546169207596177206371488041420967996640569242696635424011980517596099448533338915443511252963939260130098774796215636385361378831949728703017763*j + 9839082277411416975146025784129799574506758254882297183400263642596106850515982960730237418714608943721741326880781980379296382725027112075956362067773874694409761060817177218388385171579663881880702635122327665299348086287444008430992029272531024035294896006168357950930792792836477426637372142764859064884*k

A2 = 75228514911858956091573282833709149476152526237198103123800704497201068128053650948032490319100201363570809341152574861265272013626522258520222632415326011788756141735071360617157173800956887586623402451250157977805796114656461913690801907561498891658477974484607821151321470689448689229947847660917338160920 + 3933354632888248692301539221123864844171030595217963460759424139171806535011747477702374411885548289798081035607255506327489966095148682975326266545318384335429324437739776054296980537017084757931960180957746874681869062965013382840255844429415081190385671609860877255719861481251362774820760873125329418202*i + 2606626152602570583755461162511503269620148850515399662669989838630367403315319229968047766390529450575268597753665724720508037296099479962746435989769424360065854705584749227213671925819580404220720934311121386603908816565809004080845878694755590548828399842450562108316952337357104336129063272126898847822*j + 76555243392144634200119360892321511050703407981900666921890138797742507259750079195766816964595220202793621779006164642872253942425571461532802462970874971764119611467226387444240482412154391940334641697896783465883756361055666292450211873296158382300035246252018136298724379833342947668639545261915768731300*k
B2 = 45013481087071289721928068628449018125817382958036906384269554149473250372891897535608779938932260322890392299845097077149671299774570636846177433935014408755904011404921701159815757973749348461162094435344024920644842122226585439985801109536760546309420180302452390040296838617424879008033909490679827654476 + 61317860696350089996867727902537386127493727472431368853751635762640996293273155055126410425941200572873225898284972582348511106794933063186039400216982820063635462762582134056709351097477943811646227501194481290789099091604897240355391738423962314529008371932976291007376200907047634818231210990184186773068*i
C2 = 48394829056691483612880956564445780692656042650604611995215780083643003641361580627019663126592175056843994085593183765801496440539137724422209333194631391495765413418970424428520519094524187454104312998926481220858125121146332193512464140630762686803208879408204968548433677149309796721705692612301423367563 + 56532740347958427597358234728060882968014904139293847982764978463732873929149666698956003332717751268228861485142060861803071540630097462753627742648901617209133856227529612124031833332228024133995362645443116679805808569582758092915960143760104034276016416779117695522299068433563891369359822808355215659597*i + 70347975260429323562931276517803740787829292598019487881624412870916308353236517011582633969886449423209341479546561785587646529043368687821114015246335202690512785840246280578660712412436771062728730949385376057873372645285880751284122487355608272470086589733498079062128321106740281285447220188762578001119*j + 16951805575584825205420823700644375807853125723085814690484914145546436597616967486088570967224876441544416296762145678006690550769261992005853293168579419147041123141124043788304756163241037961717681329339164253561975980772020444650431267764647047851584593731883346318778402348213865366975518541333881870036*k
</code></pre></div></div>

<p>This is an RSA-like setup, but using quaternion algebra. We are given some hints $A_{1},B_{1},C_{1},A_{2},B_{2},C_{2}$ but we don’t know how they are generated.</p>

<h5 id="challenge-solution">Challenge solution</h5>

<p>A quaternion $q$ is a four-dimension imaginary number:</p>

\[\large q = a + bi + cj + dk\]

<p>A quaternion can be represented as a $2 \times 2$ complex matrix:</p>

\[\large M_{q} = \begin{bmatrix}
\;\; a+bi &amp; c+di \\
  -c+di &amp; a-bi
\end{bmatrix}\]

<p>Looking at our hints, we can notice that some quaternions will be converted to diagonalized matrices (because $c$ and $d$ are $0$):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>B1 = 45013481087071289721928068628449018125817382958036906384269554149473250372891897535608779938932260322890392299845097077149671299774570636846177433935014408755904011404921701159815757973749348461162094435344024920644842122226585439985801109536760546309420180302452390040296838617424879008033909490679827654476 + 20285870704186706976213976458439571881006193336387937289849925595201347891376652949248311145360615081470562529188045384875849052770228036462985742433468183628504175998029630865030332309190296171707992065830643884033059264132942270541699779783779676204125698956659169015081249141843645287582920651372517427133*i
B2 = 45013481087071289721928068628449018125817382958036906384269554149473250372891897535608779938932260322890392299845097077149671299774570636846177433935014408755904011404921701159815757973749348461162094435344024920644842122226585439985801109536760546309420180302452390040296838617424879008033909490679827654476 + 61317860696350089996867727902537386127493727472431368853751635762640996293273155055126410425941200572873225898284972582348511106794933063186039400216982820063635462762582134056709351097477943811646227501194481290789099091604897240355391738423962314529008371932976291007376200907047634818231210990184186773068*i
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">q_to_matrix</span><span class="p">(</span><span class="n">q</span><span class="p">):</span>
    <span class="n">R</span> <span class="o">=</span> <span class="n">q</span><span class="p">.</span><span class="n">parent</span><span class="p">().</span><span class="n">base_ring</span><span class="p">()</span>
    <span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">c</span><span class="p">,</span><span class="n">d</span> <span class="o">=</span> <span class="n">q</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">R</span><span class="p">,</span> <span class="p">[[</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="o">+</span> <span class="n">d</span><span class="p">],</span>
                   <span class="p">[</span><span class="o">-</span><span class="n">c</span> <span class="o">+</span> <span class="n">d</span><span class="p">,</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="p">]])</span>
    <span class="k">return</span> <span class="n">M</span>

<span class="n">D1</span> <span class="o">=</span> <span class="n">q_to_matrix</span><span class="p">(</span><span class="n">B1</span><span class="p">)</span>
<span class="n">D2</span> <span class="o">=</span> <span class="n">q_to_matrix</span><span class="p">(</span><span class="n">B2</span><span class="p">)</span>
<span class="c1"># [65299351791257996698142045086888590006823576294424843674119479744674598264268550484857091084292875404360954829033142462025520352544798673309163176368482592384408187402951332024846090282939644632870086501174668804677901386359527710527500889320540222513545879259111559055378087759268524295616830142052345081609 0] 
# [0 24727610382884582745714092170009446244811189621648969094419628554271902481515244586360468793571645241419829770657051692273822247004342600383191691501546225127399835406892070294785425664559052289454102369513381036611782858093643169444101329752980870105294481345793221025215589475581233720450988839307310227343]
</span>
<span class="c1"># [27169472238674174934920974476153389932987553598052208653461061275741372003099654165000325633887711242394727821370239291905420426847832758536667935191352832695354007994692698545070954733253319928252959304330601358946276036210007383810135095969808887989564906140959982640631707353772461821496511946821346848423 0]
# [0 62857489935468404508935162780744646318647212318021604115078047023205128742684140906217234243976809403386056778319954862393922172701308515155686932678675984816454014815150703774560561214245376994071229566357448482343408208243163496161467123103712204629275454463944797439961969881077296194571307034538308460529]
</span></code></pre></div></div>

<p>Quaternions $B_{1}$ and $B_{2}$ also share the same coefficient $a$.</p>

\[\large D_{1} = \begin{bmatrix}
a+b_{1} &amp; 0 \\
0 &amp; a-b_{1}
\end{bmatrix}
, \quad \quad
 D_{2} =\begin{bmatrix}
a+b_{2} &amp; 0 \\
0 &amp; a-b_{2}
\end{bmatrix}\]

<p>Since these matrices are diagonalized, they contain their own eigenvalues:</p>

\[\large D_{n} = \begin{bmatrix}
\lambda_{n1} &amp; 0 \\
0 &amp; \lambda_{n2}
\end{bmatrix}\]

<p>Normally, eigenvalues are found by solving the characteristic polynomial:</p>

\[\large \det(M(q) - \lambda I) = 0\]

<p>In our case with quaternions, this determinant is:</p>

\[\large \begin{align}
\nonumber (a+b-\lambda)(a-b-\lambda)-(c+d)(c-d) \equiv 0 &amp;\mod n\\
\nonumber (a-\lambda)^{2}-b^{2}-(c^{2}-d^{2}) \equiv 0 &amp;\mod n\\
\nonumber (a-\lambda)^{2} \equiv b^{2}+c^{2}-d^{2} &amp;\mod n\\
\end{align}\]

<p>we can denote $b^{2}+c^{2}-d^{2}$ as a value $u$. Based on how prime factors $p$ and $q$ are created, $u$ will be a quadratic residue modulo $n$.</p>

\[\large (a-\lambda)^{2} \equiv u \mod n\]

<p>Because quaternions $B_{1}$ and $B_{2}$ share the same coefficient $a$, we can subtract one expression from the other:</p>

\[\large \begin{gather}
\nonumber (a-\lambda_{B_{1}}) ^{2} - (a-\lambda_{B_{2}})^{2} \equiv u - u &amp;\mod n \\
\nonumber (a - (a+b_{B_{1}}))^{2} - (a - (a+b_{B_{2}}))^{2} \equiv 0 &amp;\mod n \\
\nonumber (-b_{B_{1}})^{2} - (-b_{B_{2}})^{2} \equiv 0 &amp;\mod n \\
\nonumber b_{B_{1}}^{2} - b_{B_{2}}^{2} \equiv 0 &amp;\mod n \\
\nonumber (b_{B_{1}}+b_{B_{2}})(b_{B_{1}}-b_{B_{2}}) \equiv 0 &amp;\mod n
\end{gather}\]

<p>Since this is congruent to $0$ modulus $n$, it must mean that $(b_{B_{1}}+b_{B_{2}})(b_{B_{1}}-b_{B_{2}})$ shares a factor with $n$. We can find the factors by performing GCD:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">p</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">gcd</span><span class="p">(</span><span class="n">B1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">B2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">n</span><span class="p">))</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">q</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">gcd</span><span class="p">(</span><span class="n">B1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">B2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">n</span><span class="p">))</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
<span class="mi">79161869544747204783874822054833014320323556832416066584560128636372874663065398425734864730985749653368890376759830367592761979721670941495548898960644396124185466172811136671454154337973972344555362632207904852487665177621475296531057751990913972848863646094468698407041332170700052004768608534042667579121</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">n</span>
<span class="mi">79161869544747204783874822054833014320323556832416066584560128636372874663065398425734864730985749653368890376759830367592761979721670941495548898960644396124185466172811136671454154337973972344555362632207904852487665177621475296531057751990913972848863646094468698407041332170700052004768608534042667579121</span>
</code></pre></div></div>

<p>With prime factors $p$ and $q$ recovered, we can continue with the basic RSA decryption. The flag is encoded in the coefficient $a$ in the plaintext quaternion, and $ct = pt^{e}$. We can recover the plaintext by doing $pt = ct^{d}$, thus recovering the flag:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="mi">79161869544747204783874822054833014320323556832416066584560128636372874663065398425734864730985749653368890376759830367592761979721670941495548898960644396124185466172811136671454154337973972344555362632207904852487665177621475296531057751990913972848863646094468698407041332170700052004768608534042667579121</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>

<span class="n">Q</span> <span class="o">=</span> <span class="n">QuaternionAlgebra</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">Q</span><span class="p">.</span><span class="n">gens</span><span class="p">()</span>

<span class="n">ct</span> <span class="o">=</span> <span class="mi">45013481087071289721928068628449018125817382958036906384269554149473250372891897535608779938932260322890392299845097077149671299774570636846177433935014408755904011404921701159815757973749348461162094435344024920644842122226585439985801109536760546309420180302452390040296838617424879008033909490679827654476</span> <span class="o">+</span> <span class="mi">9636778951092026544619680376283645017091864144765215100182792073900889455722431141350824102930042194215545271639741781474956534156028982115096761310259817797880256030535184725458691827842359229205634251600103222660818429492661230352467934735238831060489640927936324633663429097757450709372828417472948228655</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="mi">42090734601248398467652772944955203031292955060140266685368647521924599121778893886195972800382868410948198836032034804885666359881580106576361714902084329571927989997266986168680004601984090297892893669953053934753173607514702551338186889553996223165625949213170645532229800226654389222790682585308293478211</span><span class="o">*</span><span class="n">j</span> <span class="o">+</span> <span class="mi">37699481126666114686462332601768590025034297697056201317434979282540644109720249050363861699136261356898583435103943623192844437959908510088918677203091364226265634529874781462000421643873894197699723017160643170280032485819045136926491711428105967074739475257303917915410119714035780689908122501991259337454</span><span class="o">*</span><span class="n">k</span>
<span class="n">B1</span> <span class="o">=</span> <span class="mi">45013481087071289721928068628449018125817382958036906384269554149473250372891897535608779938932260322890392299845097077149671299774570636846177433935014408755904011404921701159815757973749348461162094435344024920644842122226585439985801109536760546309420180302452390040296838617424879008033909490679827654476</span> <span class="o">+</span> <span class="mi">20285870704186706976213976458439571881006193336387937289849925595201347891376652949248311145360615081470562529188045384875849052770228036462985742433468183628504175998029630865030332309190296171707992065830643884033059264132942270541699779783779676204125698956659169015081249141843645287582920651372517427133</span><span class="o">*</span><span class="n">i</span>
<span class="n">B2</span> <span class="o">=</span> <span class="mi">45013481087071289721928068628449018125817382958036906384269554149473250372891897535608779938932260322890392299845097077149671299774570636846177433935014408755904011404921701159815757973749348461162094435344024920644842122226585439985801109536760546309420180302452390040296838617424879008033909490679827654476</span> <span class="o">+</span> <span class="mi">61317860696350089996867727902537386127493727472431368853751635762640996293273155055126410425941200572873225898284972582348511106794933063186039400216982820063635462762582134056709351097477943811646227501194481290789099091604897240355391738423962314529008371932976291007376200907047634818231210990184186773068</span><span class="o">*</span><span class="n">i</span>

<span class="n">p</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">gcd</span><span class="p">(</span><span class="n">B1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">B2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">n</span><span class="p">))</span>
<span class="n">q</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">gcd</span><span class="p">(</span><span class="n">B1</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">B2</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">n</span><span class="p">))</span>
<span class="k">assert</span> <span class="n">n</span> <span class="o">==</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>

<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">int</span><span class="p">((</span><span class="n">ct</span><span class="o">**</span><span class="n">d</span><span class="p">)[</span><span class="mi">0</span><span class="p">])</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">))</span>
<span class="c1"># b'flag{r41s1ng_a_t04st_t0_s1r_w1ll14m_r0w4n_h4m1lt0n}o\x93]B\x1dzI\x1d\x00R\x02\x85y\xc5\xc2o\xcaa\x8f\xcc\x9f\xfe\x99,\nz\xcf\xe9\xf7\xd4\xf3\xed\x92\x91\xe6-\xef\x19"\x14)2&amp;\xe6\x11\xe8J\x9d\xf1\xcc\xf9\x9c\xaf\x90\xe6:\x85\xc7\xc7wJ\xa6F(r\x16+\xa0KT\x9b")o\r;\xf2'
</span></code></pre></div></div>

<p>Flag: <code class="language-plaintext highlighter-rouge">flag{r41s1ng_a_t04st_t0_s1r_w1ll14m_r0w4n_h4m1lt0n}</code></p>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Quaternion Algebra" /><category term="RSA" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Alle gode ting er fire (Cyberlandslaget 2024)</title><link href="http://localhost:4000/alle-gode-ting-er-fire/" rel="alternate" type="text/html" title="Alle gode ting er fire (Cyberlandslaget 2024)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/alle-gode-ting-er-fire</id><content type="html" xml:base="http://localhost:4000/alle-gode-ting-er-fire/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this challenge, we are provided with a challenge script which gives us the following information to work with:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Q</span> <span class="o">=</span> <span class="n">QuaternionAlgebra</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">flag_quaternion</span> <span class="o">=</span> <span class="n">Q</span><span class="p">(</span><span class="n">flag_parts</span><span class="p">)</span>
<span class="n">p_quaternion</span> <span class="o">=</span> <span class="n">Q</span><span class="p">(</span><span class="n">four_squares</span><span class="p">(</span><span class="n">QQ</span><span class="p">(</span><span class="n">p</span><span class="p">)))</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">flag_quaternion</span> <span class="o">*</span> <span class="n">p_quaternion</span>
</code></pre></div></div>

<p>where <code class="language-plaintext highlighter-rouge">flag_quaternion</code> is made up of the flag, split into 4, and converted to longs.
We also get the following values for x:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">584210810594046517355452820113415197</span> <span class="o">+</span> <span class="mi">487268406469160255588161824266067879</span><span class="o">*</span><span class="n">i</span> <span class="o">-</span> <span class="mi">604670429592815531484994554730642919</span><span class="o">*</span><span class="n">j</span> <span class="o">+</span> <span class="mi">523176388428119814691754655613320989</span><span class="o">*</span><span class="n">k</span>
</code></pre></div></div>

<p>This is essentially all we have to work with. To recover the flag, we need to do find $p$, generate it’s quaternion, calculate the inverse, and perform $q_{x} \cdot q_{p}^{-1}$ , which will give us the flag quaternion $q_{flag}$. We can then reconstruct the flag from the quaternion and solve the challenge.</p>

<h5 id="recovering-the-prime-p">Recovering the prime p</h5>

<p>To find $p$, we have to take advantage of the following properties of quaternion algebra:</p>

<p>The norm of quaternion $q$ is:</p>

\[\large N(q) = \sqrt{a^2 + b^2 + c^2 + d^2}\]

<p>which means:</p>

\[\large N^2(q) = a^2 + b^2 + c^2 + d^2\]

<p>And, we take note of the multiplicative norm property, where multiplication is preserved:</p>

\[\large N(q_1 \cdot q_2) = N(q_1) \cdot N(q_2)\]

<p>We will also take advantage of how the p quaternion is constructed using the four squares theorem:</p>

\[\large p = a^2 + b^2 + c^2 + d^2 = N^2(q_{p})\]

<p>Since $q_{x} = q_{p} \cdot q_{flag}$, we also know:</p>

\[\large \begin{align} 
\nonumber N^2(q_{x}) &amp;= N^2(q_{flag}) \cdot N^2(q_{p})  \\
\nonumber a^2_x + b^2_x + c^2_x + d^2_x &amp;= N^2(q_{flag}) \cdot p
\end{align}\]

<p>Which means that $p$ is a factor of $q_{x}$’s squared norm!
We can factor the squared norm and find the 64-bit factor. Then, finding the inverse of $q_{p}$ is easy, and we can thus find $q_{flag}$ to reconstruct the flag:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sage.all</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">long_to_bytes</span>

<span class="c1"># Define the quaternion algebra over the rational numbers
</span><span class="n">Q</span> <span class="o">=</span> <span class="n">QuaternionAlgebra</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">Q</span><span class="p">([</span><span class="o">-</span><span class="mi">584210810594046517355452820113415197</span><span class="p">,</span> <span class="mi">487268406469160255588161824266067879</span><span class="p">,</span> <span class="o">-</span><span class="mi">604670429592815531484994554730642919</span><span class="p">,</span> <span class="mi">523176388428119814691754655613320989</span><span class="p">])</span>
<span class="n">norm_x</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">**</span><span class="mi">2</span>

<span class="n">factors</span> <span class="o">=</span> <span class="n">ECM</span><span class="p">().</span><span class="n">factor</span><span class="p">(</span><span class="n">norm_x</span><span class="p">)</span>
<span class="k">for</span> <span class="n">factor</span> <span class="ow">in</span> <span class="n">factors</span><span class="p">:</span>
	<span class="k">if</span> <span class="n">factor</span><span class="p">.</span><span class="n">bit_length</span><span class="p">()</span> <span class="o">==</span> <span class="mi">64</span><span class="p">:</span>
		<span class="n">p</span> <span class="o">=</span> <span class="n">factor</span>

<span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span> <span class="o">=</span> <span class="n">four_squares</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="n">p_quaternion</span> <span class="o">=</span> <span class="n">Q</span><span class="p">([</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">])</span>
<span class="n">p_inv</span> <span class="o">=</span> <span class="o">~</span><span class="n">p_quaternion</span>

<span class="n">flag_quaternion</span> <span class="o">=</span> <span class="n">x</span> <span class="o">*</span> <span class="n">p_inv</span>
<span class="n">flag</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">flag_quaternion</span><span class="p">:</span>
	<span class="n">flag</span> <span class="o">+=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">part</span><span class="p">)).</span><span class="n">decode</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
</code></pre></div></div>

<p>Flag: <code class="language-plaintext highlighter-rouge">flag{fire_kvadrater_og_en_pizza_er_du_snill}</code></p>

<h5 id="sourcepy">source.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">getPrime</span>
<span class="kn">from</span> <span class="nn">sage.all</span> <span class="kn">import</span> <span class="n">QuaternionAlgebra</span><span class="p">,</span> <span class="n">QQ</span><span class="p">,</span> <span class="n">four_squares</span>
<span class="kn">from</span> <span class="nn">secret</span> <span class="kn">import</span> <span class="n">FLAG</span>


<span class="c1"># Quaternion algebra over the rational numbers, i^2 = -1 and j^2 = -1
</span><span class="n">Q</span> <span class="o">=</span> <span class="n">QuaternionAlgebra</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>

<span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">FLAG</span><span class="p">)</span> <span class="o">%</span> <span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span>

<span class="n">step</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">FLAG</span><span class="p">)</span> <span class="o">//</span> <span class="mi">4</span>
<span class="n">flag_parts</span> <span class="o">=</span> <span class="p">[</span><span class="n">FLAG</span><span class="p">[</span><span class="n">i</span> <span class="p">:</span> <span class="n">i</span> <span class="o">+</span> <span class="n">step</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">FLAG</span><span class="p">),</span> <span class="n">step</span><span class="p">)]</span>
<span class="n">flag_parts</span> <span class="o">=</span> <span class="p">[</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">part</span><span class="p">)</span> <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">flag_parts</span><span class="p">]</span>

<span class="n">flag_quaternion</span> <span class="o">=</span> <span class="n">Q</span><span class="p">(</span><span class="n">flag_parts</span><span class="p">)</span>
<span class="n">p_quaternion</span> <span class="o">=</span> <span class="n">Q</span><span class="p">(</span><span class="n">four_squares</span><span class="p">(</span><span class="n">QQ</span><span class="p">(</span><span class="n">p</span><span class="p">)))</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">flag_quaternion</span> <span class="o">*</span> <span class="n">p_quaternion</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"output.txt"</span><span class="p">,</span> <span class="s">"w"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fout</span><span class="p">:</span>
    <span class="n">fout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">x</span> <span class="o">=</span> <span class="si">}</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># x = -584210810594046517355452820113415197 + 487268406469160255588161824266067879*i - 604670429592815531484994554730642919*j + 523176388428119814691754655613320989*k
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Quaternion Algebra" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Connorsmith (CSCTF 2024)</title><link href="http://localhost:4000/connorsmith/" rel="alternate" type="text/html" title="Connorsmith (CSCTF 2024)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/connorsmith</id><content type="html" xml:base="http://localhost:4000/connorsmith/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given a relatively standard RSA setup:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="sa">b</span><span class="s">'CSCTF{redacted}'</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">random_prime</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">random_prime</span><span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">N</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="n">N</span><span class="o">**</span><span class="mf">0.35</span><span class="p">))</span>
<span class="n">e</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">N</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">e</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'c = </span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'hint = </span><span class="si">{</span><span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="n">q</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">795</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<p>However, this setup contains some noteworthy characteristics:</p>

<p>First of all, $d$ is a random integer that is less than $N^{0.35}$. Despite it being a random integer, it is most certainly not less than the theoretical limit for $d$ in the boneh-durfee attack.</p>

<p>We are also given a hint for this challenge: <code class="language-plaintext highlighter-rouge">p+q &gt;&gt; 795</code>. This means we have some of the most significant bits of $p + q$.
Other than that, not much else! $p$ and $q$ are of course too large to brute-force, so we have to come up with a specific attack.</p>

<h5 id="identifying-the-attack-vector">Identifying the attack vector</h5>

<p>The only hint for the challenge is that we have the most significant bits of $p + q$. This means we could potentially perform some stereotyped message attack, which means its coppersmith time.</p>

<p>To do this, we need to set up a function $f$ where we can solve for the unknown values. Since we are given a portion of $p+q$, our function should include this and solve for the lesser bits of $p+q$ using coppersmith.</p>

<p>Interestingly enough, we can take inspiration from the boneh-durfee attack since d is small and the expression contains a variation of $p+q$.
We remember the following:</p>

\[\large\begin{aligned}
e d &amp; \equiv1 \quad(\bmod \varphi(N)) \\
\Longrightarrow e d &amp; =1+k(N-p-q+1) \\
\Longrightarrow 1+k(N-p-q+1) &amp; \equiv0 \quad(\bmod e) \\
\Longrightarrow 1+2 k\left(\frac{N+1}{2}-\frac{p+q}{2}\right) &amp; \equiv0 \quad(\bmod e)
\end{aligned}\]

<p>Since we don’t know the value for $k$, we let $k = x$. 
Also, we can say that $p+q = hint \cdot 2^{795} + y$. We essentially bit-shift back 795 bits and we let y represent the root.
This gives us the function:</p>

\[\large f(x, y) = 1+2 x\left(\frac{N+1}{2}-\frac{hint \cdot 2^{795} + y}{2}\right) \equiv0 \quad(\bmod e)\]

<p>To find the roots, we can use a bivariate coppersmith algorithm since we have two unknowns. After finding the roots $(x, y)$, we can evaluate $f(x, y) = ed$ and divide by $e$ to recover the secret key.</p>

<p>From there, it is as simple as decrypting: $m = c^d \mod N$</p>

<h5 id="implementing-the-solution">Implementing the solution</h5>

<p>We first of all define our values $N, e, c, hint$ from the challenge source code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span> <span class="o">=</span> <span class="mi">7552253013225223212686972759229408890943243937848116869511428282592494711559240135372705736006054353083281103140787662239958191241833157109597880624454796412006762881501916845155158694626704629051045217266597685547634722763704638532067409306181328833329683262904207364205190648604464680961179156366009048508124744257064547090561236984730817200175311749708243086463240602718911105727107075971987228340827791295829216059926076767577606528647738447725195880791137450082195604212374273765390335921438605358227547423468794396280894150559661664635540689602987474623120205743645087417873312711804245504568677508120251077973</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">3972273176912267799970180147678020025192175195982968793722693097132970664724388722714705209022371322943558028173459714967997171817396680330435643595109433373306392229639747130134793710239081601404067602930871254806754684103349829634489509031907387929080189489106215966862642406152181674399593026117258657690036458955106821789654735855538375273851668820461621159458690509295524433242439365251850800232909323376356116251835554606066609685882803255427299046970093232995420925951786433206910901590576814359503385919307570360242528454529766855342865079257244016304989185569117193284115242278439808082079787893597831292429</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">6722063431743120124281037577917473736384734002344400102535470664988199976365033546621632487383386053044468700113542626459908567596300577088705896140930724832695917664482501591801075560437336915520962349830960551339852803481367045861684404716913927870231244602348980596739084252620702852351036834534769613031735817640709051052713694452907186969900542466747407949270228341375666775282809021111998328175103742416108902755346724742467339317044645243210574003890806923017769148711785248795287760426567277473640239499920974270994457112678786022613046685998793486144172215215581287541508145268729387185453679039441575292812</span>
<span class="n">hint</span> <span class="o">=</span> <span class="mi">891237814844096809623936988168241703768093224718029580247856301709140</span>

<span class="n">b</span> <span class="o">=</span> <span class="mi">795</span>
</code></pre></div></div>

<p>and we let <code class="language-plaintext highlighter-rouge">b = 795</code> be a value for our bit-shift.</p>

<p>Then, before we proceed, we need to find a suitable algorithm for finding the roots. I will utilize the <code class="language-plaintext highlighter-rouge">small_roots.sage</code> script from the following repository: https://github.com/josephsurin/lattice-based-cryptanalysis</p>

<p>The function <code class="language-plaintext highlighter-rouge">small_roots</code> requires a function $f$, an upper bound for the roots, a specified algorithm, and some other values $m$ and $d$.</p>

<p>We can define our function $f$ over the integers:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span> <span class="o">*</span> <span class="p">((</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">(</span><span class="n">hint</span><span class="o">*</span><span class="mi">2</span><span class="o">**</span><span class="n">b</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>After defining the function, we can change it’s ring to <code class="language-plaintext highlighter-rouge">Zmod(e)</code> because remember, this function is congruent to $0 \mod e$</p>

<p>To determine the bounds, we can remember that $p+q$ was shifted $795$ bits, which means $y &lt; 2^{795}$, hence our upper bound for y is $2^{795}$.
To determine the bound for $x$, we remember that $x = k$ and:</p>

\[\large\begin{aligned}
e d &amp; \equiv1 \quad(\bmod \varphi(N)) \\
\Longrightarrow e d &amp; =1 + k \times \varphi(N) \\
\Longrightarrow e d &amp;\approx k \times \varphi(N) \\
\end{aligned}\]

<p>and since $e$ has almost the same bit-size as $N$ and hence $\varphi(N)$, that must mean $k$ is almost the same bit-size as $d$. Since we know $d \leq N^{0.35}$, then $k$ must be upper bounded by $N^{0.35}$ as well.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bounds</span> <span class="o">=</span> <span class="p">(</span><span class="n">ZZ</span><span class="p">(</span><span class="n">N</span><span class="o">**</span><span class="mf">0.35</span><span class="p">),</span> <span class="mi">2</span><span class="o">**</span><span class="n">b</span><span class="p">)</span>
</code></pre></div></div>

<p>for the specified algorithm, the <code class="language-plaintext highlighter-rouge">small_roots</code> function supports the <code class="language-plaintext highlighter-rouge">groebner</code>, <code class="language-plaintext highlighter-rouge">msolve</code>, <code class="language-plaintext highlighter-rouge">resultants</code>, and <code class="language-plaintext highlighter-rouge">jacobian</code> algorithms. Generally speaking, the <code class="language-plaintext highlighter-rouge">resultants</code> algorithm is the best for bivariate problems.</p>

<p>We can also optionally specify a <code class="language-plaintext highlighter-rouge">lattice_reduction</code> algorithm. I choose to use <code class="language-plaintext highlighter-rouge">flatter</code> from the same repo.</p>

<p>From here, we just need to tweak the values <code class="language-plaintext highlighter-rouge">m</code> and <code class="language-plaintext highlighter-rouge">d</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">roots</span> <span class="o">=</span> <span class="n">small_roots</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">e</span><span class="p">)),</span> <span class="n">bounds</span><span class="p">,</span> <span class="n">m</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"resultants"</span><span class="p">,</span> <span class="n">lattice_reduction</span><span class="o">=</span><span class="n">flatter</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>And after finding the roots, we can change the function $f$ back to the ring of integers, evaluate the function with the roots, and divide by $e$ to find the private key $d$ before we finally decrypt the ciphertext!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">solx</span> <span class="o">=</span> <span class="n">ZZ</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
<span class="n">soly</span> <span class="o">=</span> <span class="n">ZZ</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>

<span class="n">d</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="n">solx</span><span class="p">,</span> <span class="n">soly</span><span class="p">)</span> <span class="o">/</span> <span class="n">e</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">'</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/lbc/lattice-based-cryptanalysis/lbc_toolkit/problems/small_roots.sage'</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/lbc/lattice-based-cryptanalysis/lbc_toolkit/common/flatter.sage'</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/lbc/lattice-based-cryptanalysis/lbc_toolkit/common/systems_solvers.sage'</span><span class="p">)</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">7552253013225223212686972759229408890943243937848116869511428282592494711559240135372705736006054353083281103140787662239958191241833157109597880624454796412006762881501916845155158694626704629051045217266597685547634722763704638532067409306181328833329683262904207364205190648604464680961179156366009048508124744257064547090561236984730817200175311749708243086463240602718911105727107075971987228340827791295829216059926076767577606528647738447725195880791137450082195604212374273765390335921438605358227547423468794396280894150559661664635540689602987474623120205743645087417873312711804245504568677508120251077973</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">3972273176912267799970180147678020025192175195982968793722693097132970664724388722714705209022371322943558028173459714967997171817396680330435643595109433373306392229639747130134793710239081601404067602930871254806754684103349829634489509031907387929080189489106215966862642406152181674399593026117258657690036458955106821789654735855538375273851668820461621159458690509295524433242439365251850800232909323376356116251835554606066609685882803255427299046970093232995420925951786433206910901590576814359503385919307570360242528454529766855342865079257244016304989185569117193284115242278439808082079787893597831292429</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">6722063431743120124281037577917473736384734002344400102535470664988199976365033546621632487383386053044468700113542626459908567596300577088705896140930724832695917664482501591801075560437336915520962349830960551339852803481367045861684404716913927870231244602348980596739084252620702852351036834534769613031735817640709051052713694452907186969900542466747407949270228341375666775282809021111998328175103742416108902755346724742467339317044645243210574003890806923017769148711785248795287760426567277473640239499920974270994457112678786022613046685998793486144172215215581287541508145268729387185453679039441575292812</span>
<span class="n">hint</span> <span class="o">=</span> <span class="mi">891237814844096809623936988168241703768093224718029580247856301709140</span>

<span class="n">b</span> <span class="o">=</span> <span class="mi">795</span>
<span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span><span class="o">*</span><span class="n">x</span> <span class="o">*</span> <span class="p">((</span><span class="n">N</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">-</span> <span class="p">(</span><span class="n">hint</span><span class="o">*</span><span class="mi">2</span><span class="o">**</span><span class="n">b</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>

<span class="n">bounds</span> <span class="o">=</span> <span class="p">(</span><span class="n">ZZ</span><span class="p">(</span><span class="n">N</span><span class="o">**</span><span class="mf">0.35</span><span class="p">),</span> <span class="mi">2</span><span class="o">**</span><span class="n">b</span><span class="p">)</span>
<span class="n">roots</span> <span class="o">=</span> <span class="n">small_roots</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">e</span><span class="p">)),</span> <span class="n">bounds</span><span class="p">,</span> <span class="n">m</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"resultants"</span><span class="p">,</span> <span class="n">lattice_reduction</span><span class="o">=</span><span class="n">flatter</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">solx</span> <span class="o">=</span> <span class="n">ZZ</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
<span class="n">soly</span> <span class="o">=</span> <span class="n">ZZ</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>

<span class="n">d</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="n">solx</span><span class="p">,</span> <span class="n">soly</span><span class="p">)</span> <span class="o">/</span> <span class="n">e</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">'</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>This gives us the flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CSCTF{37c37f30fc67f98f376a1c30b25b3969}
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Coppersmith small roots" /><category term="RSA" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">I Lost my Bottoms (H7CTF 2024)</title><link href="http://localhost:4000/i-lost-my-bottoms/" rel="alternate" type="text/html" title="I Lost my Bottoms (H7CTF 2024)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/i-lost-my-bottoms</id><content type="html" xml:base="http://localhost:4000/i-lost-my-bottoms/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given an <code class="language-plaintext highlighter-rouge">enc.py</code> file:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">bits</span> <span class="o">=</span> <span class="mi">128</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="sa">b</span><span class="s">"REDACTED"</span><span class="p">)</span>
<span class="n">hints</span> <span class="o">=</span> <span class="p">[</span><span class="nb">pow</span><span class="p">(</span><span class="n">m</span> <span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="p">,</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="o">+</span><span class="mi">1</span> <span class="p">,</span> <span class="o">-</span><span class="mi">2</span> <span class="p">,</span> <span class="n">p</span><span class="p">)]</span>
<span class="n">hints_leak</span> <span class="o">=</span> <span class="p">[(</span><span class="n">i</span><span class="o">&gt;&gt;</span><span class="n">bits</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">bits</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">hints</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'p = </span><span class="si">{</span><span class="n">p</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'hints_leak = </span><span class="si">{</span><span class="n">hints_leak</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output <code class="language-plaintext highlighter-rouge">p</code> and <code class="language-plaintext highlighter-rouge">hints_leak</code> in the file <code class="language-plaintext highlighter-rouge">out.txt</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="mi">117593624298425786343779158012820875154822864368382625245527483403432934003483945150470206407456758951269631159296406949363530801144116051024607996020606008637719420473508584102759537549869268380832507998189573147118724711583890139172725884196595640384171883519174624232176171861648257367040001679671930516257</span>
<span class="n">hints_leak</span> <span class="o">=</span> <span class="p">[</span><span class="mi">29532884859848451807856040503801489793449597914559835640013346371615282769039782729995651472190910037139963402884437232479340276830952204736162501040446353868183083550897609990419665664218203589490798227152745073916743432546774880541751765375202866498878181362239845800024263833214003957243156923484070739968</span><span class="p">,</span> <span class="mi">2240800030522719831440690213801032993267721517756450944809696773586000818511688287641493847808933201477652660185925436211555966348047610258375098042072112054000315861147846986256701531141306392153787106580833282665986451952386428424060514960239609554280495803294023792016130151761105191792899173791341477888</span><span class="p">]</span>
</code></pre></div></div>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>In <code class="language-plaintext highlighter-rouge">enc.py</code>, the flag <code class="language-plaintext highlighter-rouge">m</code> is turned into bytes and then into a long. The script then generates two hints for us:</p>

\[\large\begin{aligned}
\text{Hint1} &amp;=  m^{-1} &amp;\mod p \\
\text{Hint2} &amp;= (m+1)^{-2} &amp;\mod p \\
\end{aligned}\]

<p>These hints are then shifted 128 bits, then shifted back. This essentially zeroes out the lower 128 bits for both hints.
We are then given these <code class="language-plaintext highlighter-rouge">hints_leak</code> values along with <code class="language-plaintext highlighter-rouge">p</code>
Our goal is to use these hints to recover <code class="language-plaintext highlighter-rouge">m</code></p>

<h5 id="recovering-the-hints">Recovering the hints</h5>

<p>Since we are missing the lower bits, this seems like a classic coppersmith challenge. We can represent <code class="language-plaintext highlighter-rouge">hint1</code> and <code class="language-plaintext highlighter-rouge">hint2</code> as <code class="language-plaintext highlighter-rouge">hint1_leak + x</code> and <code class="language-plaintext highlighter-rouge">hint2_leak + y</code> We can rewrite the <code class="language-plaintext highlighter-rouge">hint1</code> and <code class="language-plaintext highlighter-rouge">hint2</code> equations to isolate m like so:</p>

\[\large\begin{aligned}
\text{Hint1} &amp;=  m^{-1} &amp;\mod p \\
Hint1\_leak + x &amp;=  m^{-1} &amp;\mod p \\
(Hint1\_leak + x)^{-1} &amp;=  m &amp;\mod p \\
\end{aligned}\]

<p>and</p>

\[\large\begin{aligned}
\text{Hint2} &amp;= (m+1)^{-2} &amp;\mod p \\
Hint2\_leak + y &amp;= (m+1)^{-2} &amp;\mod p \\
(Hint2\_leak + y)^{-2} &amp;= m+1 &amp;\mod p \\
(Hint2\_leak + y)^{-2} - 1 &amp;= m &amp;\mod p \\
\end{aligned}\]

<p>Since both are equal to m, we can do one minus the other to get a zero polynomial. We begin by denoting the hints as <code class="language-plaintext highlighter-rouge">A</code> and <code class="language-plaintext highlighter-rouge">B</code></p>

\[\large
\begin{aligned}
 A=H 1 \_l e a k+x &amp;= m^{-1} &amp; \mod p\\
 B=H 2 \_l e a k+y &amp;= (m+1)^{-2} &amp; \mod p\\
 A^{-1} &amp;= m &amp; \mod p\\
 (m+1)^2 &amp;= B^{-1} &amp; \mod p\\
 (A^{-1}+1)^2 &amp;= B^{-1} &amp; \mod p\\
 (\frac{A+1}{A})^2 &amp;= B^{-1} &amp; \mod p\\
 \frac{(A+1)^2}{A^2} &amp;= B^{-1} &amp; \mod p\\
 (A + 1)^2 \cdot A^{-2} &amp;= B^{-1} &amp; \mod p\\
 (A + 1)^2 &amp;= A^2 \cdot B^{-1} &amp; \mod p\\
 B \cdot (A + 1)^2 &amp;= A^2 &amp; \mod p\\
 B \cdot (A + 1)^2 - A^2 &amp;= 0 &amp; \mod p\\
\end{aligned}\]

<p>Which finally gives us:</p>

\[\large f = (H 2 \_l e a k+y) \cdot(H 1 \_l e a k+x+1)^2-(H 1 \_l e a k+x)^2 \equiv 0 \quad \bmod p\]

<p>We can now use this polynomial $f$ and use bivariate coppersmith’s theorem to solve for the roots x and y. With x and y, we can reconstruct <code class="language-plaintext highlighter-rouge">hint1</code>, compute the modular inverse, and we will have m!</p>

<h5 id="implementing-the-solution">Implementing the solution</h5>

<p>We first of all define our values $p,\; hint1\_leak,\; hint2\_leak$ from the challenge source code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="mi">117593624298425786343779158012820875154822864368382625245527483403432934003483945150470206407456758951269631159296406949363530801144116051024607996020606008637719420473508584102759537549869268380832507998189573147118724711583890139172725884196595640384171883519174624232176171861648257367040001679671930516257</span>
<span class="n">hint1_leak</span> <span class="o">=</span> <span class="mi">29532884859848451807856040503801489793449597914559835640013346371615282769039782729995651472190910037139963402884437232479340276830952204736162501040446353868183083550897609990419665664218203589490798227152745073916743432546774880541751765375202866498878181362239845800024263833214003957243156923484070739968</span>
<span class="n">hint2_leak</span> <span class="o">=</span> <span class="mi">2240800030522719831440690213801032993267721517756450944809696773586000818511688287641493847808933201477652660185925436211555966348047610258375098042072112054000315861147846986256701531141306392153787106580833282665986451952386428424060514960239609554280495803294023792016130151761105191792899173791341477888</span>
</code></pre></div></div>

<p>Then, before we proceed, we need to find a suitable algorithm for finding the roots. I will utilize the <code class="language-plaintext highlighter-rouge">small_roots.sage</code> script from the following repository: https://github.com/josephsurin/lattice-based-cryptanalysis</p>

<p>The function <code class="language-plaintext highlighter-rouge">small_roots</code> requires a function $f$, an upper bound for the roots, a specified algorithm, and some other values $m$ and $d$.</p>

<p>We can define our function $f$ over the integers:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="n">hint2_leak</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">hint1_leak</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">-</span> <span class="p">(</span><span class="n">hint1_leak</span> <span class="o">+</span> <span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>
</code></pre></div></div>

<p>We know <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> are less than 128 bits, meaning our upper bound for the roots are $2^{128}$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bounds</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">128</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="mi">128</span><span class="p">)</span>
</code></pre></div></div>

<p>for the specified algorithm, the <code class="language-plaintext highlighter-rouge">small_roots</code> function supports the <code class="language-plaintext highlighter-rouge">groebner</code>, <code class="language-plaintext highlighter-rouge">msolve</code>, <code class="language-plaintext highlighter-rouge">resultants</code>, and <code class="language-plaintext highlighter-rouge">jacobian</code> algorithms. Generally speaking, the <code class="language-plaintext highlighter-rouge">resultants</code> algorithm is the best for bivariate problems.</p>

<p>We can also optionally specify a <code class="language-plaintext highlighter-rouge">lattice_reduction</code> algorithm. I choose to use <code class="language-plaintext highlighter-rouge">flatter</code> from the same repo. In addition to this, we change the ring of $f$ to <code class="language-plaintext highlighter-rouge">Zmod(p)</code> because the function is congruent to 0 mod p.</p>

<p>From here, we just need to tweak the values <code class="language-plaintext highlighter-rouge">m</code> and <code class="language-plaintext highlighter-rouge">d</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">roots</span> <span class="o">=</span> <span class="n">small_roots</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">p</span><span class="p">)),</span> <span class="n">bounds</span><span class="p">,</span> <span class="n">m</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"resultants"</span><span class="p">,</span> <span class="n">lattice_reduction</span><span class="o">=</span><span class="n">flatter</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>And after finding the roots, we can change the function $f$ back to the ring of integers, retrieve <code class="language-plaintext highlighter-rouge">x</code> to recover <code class="language-plaintext highlighter-rouge">hint1</code>, and calculate the modular inverse to find m!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">solx</span> <span class="o">=</span> <span class="n">ZZ</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
<span class="n">soly</span> <span class="o">=</span> <span class="n">ZZ</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>

<span class="n">invmod_leak</span> <span class="o">=</span> <span class="n">hint1_leak</span> <span class="o">+</span> <span class="n">solx</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">invmod_leak</span> <span class="o">^</span> <span class="o">-</span><span class="mi">1</span> <span class="o">%</span> <span class="n">p</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">m</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">'</span><span class="p">))</span>
</code></pre></div></div>

<p>After converting from long to hex, we get our flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>b'H7CTF{thx_for_finding!!}'
</code></pre></div></div>

<p>Note, this script takes a couple of minutes to run. This is because <code class="language-plaintext highlighter-rouge">m</code> and <code class="language-plaintext highlighter-rouge">d</code> are relatively high, but it is needed to recover the roots.</p>

<h5 id="solvesage">Solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/lbc/lattice-based-cryptanalysis/lbc_toolkit/problems/small_roots.sage'</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/lbc/lattice-based-cryptanalysis/lbc_toolkit/common/flatter.sage'</span><span class="p">)</span>
<span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/lbc/lattice-based-cryptanalysis/lbc_toolkit/common/systems_solvers.sage'</span><span class="p">)</span>

<span class="c1"># Given values from out.txt
</span><span class="n">p</span> <span class="o">=</span> <span class="mi">117593624298425786343779158012820875154822864368382625245527483403432934003483945150470206407456758951269631159296406949363530801144116051024607996020606008637719420473508584102759537549869268380832507998189573147118724711583890139172725884196595640384171883519174624232176171861648257367040001679671930516257</span>
<span class="n">hint1_leak</span> <span class="o">=</span> <span class="mi">29532884859848451807856040503801489793449597914559835640013346371615282769039782729995651472190910037139963402884437232479340276830952204736162501040446353868183083550897609990419665664218203589490798227152745073916743432546774880541751765375202866498878181362239845800024263833214003957243156923484070739968</span>
<span class="n">hint2_leak</span> <span class="o">=</span> <span class="mi">2240800030522719831440690213801032993267721517756450944809696773586000818511688287641493847808933201477652660185925436211555966348047610258375098042072112054000315861147846986256701531141306392153787106580833282665986451952386428424060514960239609554280495803294023792016130151761105191792899173791341477888</span>

<span class="n">bounds</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span><span class="o">**</span><span class="mi">128</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="mi">128</span><span class="p">)</span>

<span class="c1"># Define the polynomial ring
</span><span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>

<span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="n">hint2_leak</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">hint1_leak</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span> <span class="o">-</span> <span class="p">(</span><span class="n">hint1_leak</span> <span class="o">+</span> <span class="n">x</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">small_roots</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">p</span><span class="p">)),</span> <span class="n">bounds</span><span class="p">,</span> <span class="n">m</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span> <span class="n">d</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"resultants"</span><span class="p">,</span> <span class="n">lattice_reduction</span><span class="o">=</span><span class="n">flatter</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">f</span><span class="p">.</span><span class="n">change_ring</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span>
<span class="n">solx</span> <span class="o">=</span> <span class="n">ZZ</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
<span class="n">soly</span> <span class="o">=</span> <span class="n">ZZ</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>

<span class="n">invmod_leak</span> <span class="o">=</span> <span class="n">hint1_leak</span> <span class="o">+</span> <span class="n">solx</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">invmod_leak</span> <span class="o">^</span> <span class="o">-</span><span class="mi">1</span> <span class="o">%</span> <span class="n">p</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">m</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">'</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Coppersmith small roots" /><category term="RSA" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Backdoor (ironCTF 2024)</title><link href="http://localhost:4000/backdoor/" rel="alternate" type="text/html" title="Backdoor (ironCTF 2024)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/backdoor</id><content type="html" xml:base="http://localhost:4000/backdoor/"><![CDATA[<h5 id="challenge-introduction">Challenge Introduction</h5>

<p>In this CTF challenge we are given the following python script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">curve_operations</span> <span class="kn">import</span> <span class="n">Point</span><span class="p">,</span><span class="n">Curve</span>    <span class="c1"># Custom module
</span><span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span>

<span class="k">class</span> <span class="nc">Dual_EC</span><span class="p">:</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">p</span> <span class="o">=</span> <span class="mi">229054522729978652250851640754582529779</span>
        <span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">75</span>
        <span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">250</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">curve</span> <span class="o">=</span> <span class="n">Curve</span><span class="p">(</span><span class="n">p</span><span class="p">,</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">P</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">97396093570994028423863943496522860154</span> <span class="p">,</span> <span class="mi">2113909984961319354502377744504238189</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">Q</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">137281564215976890139225160114831726699</span> <span class="p">,</span> <span class="mi">111983247632990631097104218169731744696</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">set_initial_state</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">set_initial_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="err">???</span><span class="n">SECRET</span><span class="err">🤫???</span>

    <span class="k">def</span> <span class="nf">set_next_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">scalar_multiply</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">P</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">state</span><span class="p">).</span><span class="n">x</span>

    <span class="k">def</span> <span class="nf">gen_rand_num</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">rand_point</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">scalar_multiply</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">Q</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">state</span><span class="p">)</span>
        <span class="n">rand_num</span> <span class="o">=</span> <span class="n">rand_point</span><span class="p">.</span><span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">set_next_state</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">rand_num</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">prng</span> <span class="o">=</span> <span class="n">Dual_EC</span><span class="p">()</span>
    <span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'flag{test}'</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"My PRNG has passed International Standards!!!"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Here is a Sample Random Number to prove it to you : "</span><span class="p">,</span> <span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">())</span>
    <span class="n">key</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">((</span><span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="o">+</span> <span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">())</span>
    <span class="n">iv</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">())</span>
    <span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
    <span class="n">encrypted_bytes</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">pad</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">block_size</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Encrypted bytes : '</span><span class="p">,</span><span class="n">encrypted_bytes</span><span class="p">)</span>

<span class="k">if</span><span class="p">(</span><span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">):</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<p>and the out.txt:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>My PRNG has passed International Standards!!!
Here is a Sample Random Number to prove it to you :  222485190245526863452994827085862802196
Encrypted bytes :  b'BI\xd5\xfd\x8e\x1e(s\xb3vUhy\x96Y\x8f\xceRr\x0c\xe6\xf0\x1a\x88x\xe2\xe9M#]\xad\x99H\x13+\x9e5\xfd\x9b \xe6\xf0\xe10w\x80q\x8d'
</code></pre></div></div>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>In the source code, an elliptic curve with the following parameters is declared:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="mi">229054522729978652250851640754582529779</span>
<span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">75</span>
<span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">250</span>
</code></pre></div></div>

<p>The script also declares an initial state, or an initial seed for the PRNG. However, it is secret.</p>

<p>For generating random numbers, the script computes the scalar multiplication of Q and the state, and uses the x value as the rand_num
Then, the next state is generated as the x value of $state \cdot  P$</p>

<p>We are given the first prng number $R.x = (Q \cdot state0).x$ which means we have to solve the discrete logarithm problem to recover state0</p>

<p>When we have state0, we can generate the next numbers and then get the value for the key and iv:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">((</span><span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="o">+</span> <span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">())</span>
<span class="n">iv</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">())</span>
</code></pre></div></div>

<h5 id="recovering-state0">Recovering state0</h5>

<p>It turns out the curve defined by these parameters</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="mi">229054522729978652250851640754582529779</span>
<span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">75</span>
<span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">250</span>
</code></pre></div></div>

<p>is not an elliptic curve after all. This is because the delta is equal to 0:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">delta</span> <span class="o">=</span> <span class="o">-</span><span class="mi">16</span><span class="o">*</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="n">a</span><span class="o">**</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">27</span><span class="o">*</span><span class="n">b</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"delta: </span><span class="si">{</span><span class="n">delta</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="c1"># delta: 0
</span></code></pre></div></div>

<p>This is actually good news, because we can map the points to the multiplicative group and solve the discrete logarithm a lot easier.</p>

<p>First, we have to define our parameters, our points, our curve and lift the point R:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="mi">229054522729978652250851640754582529779</span>
<span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">75</span>
<span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">250</span>
<span class="n">F</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>

<span class="c1"># Known points P and Q
</span><span class="n">P</span> <span class="o">=</span> <span class="p">(</span><span class="mi">97396093570994028423863943496522860154</span> <span class="p">,</span> <span class="mi">2113909984961319354502377744504238189</span><span class="p">)</span>
<span class="n">Q</span> <span class="o">=</span> <span class="p">(</span><span class="mi">137281564215976890139225160114831726699</span> <span class="p">,</span> <span class="mi">111983247632990631097104218169731744696</span><span class="p">)</span>

<span class="n">R_x</span> <span class="o">=</span> <span class="n">F</span><span class="p">(</span><span class="mi">222485190245526863452994827085862802196</span><span class="p">)</span>
<span class="n">rhs</span> <span class="o">=</span> <span class="n">R_x</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="n">a</span> <span class="o">*</span> <span class="n">R_x</span> <span class="o">+</span> <span class="n">b</span>
<span class="n">R_y</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">sqrt</span><span class="p">()</span>
<span class="n">R</span> <span class="o">=</span> <span class="p">(</span><span class="n">R_x</span><span class="p">,</span> <span class="n">R_y</span><span class="p">)</span>

<span class="c1"># define the curve / function
</span><span class="n">A</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span> 
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="n">a</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">b</span>
</code></pre></div></div>

<p>Then, we have to find the singularity of the curve. This is the point of intersection on the nodal curve, and it is where both partial derivatives are equal to 0:</p>

\[\large \begin{flalign} \nonumber   &amp;&amp; \frac{dy^2}{dx} &amp;=  3x^2 + a = 0 &amp;&amp; \text{mod } p \end{flalign}\]

\[\large \begin{flalign} \nonumber   &amp;&amp; \frac{dxy}{dy} &amp;= 2y = 0 &amp;&amp; \text{mod } p \end{flalign}\]

<p>For $2y = 0$, it is easy. The y coordinate will be 0. However, to find x, we will have:</p>

\[\large \begin{flalign} \nonumber   &amp;&amp; \frac{dy^2}{dx} &amp;=  3x^2 + a = 0 &amp;&amp; \text{mod } p \end{flalign}\]

\[\large \begin{flalign} \nonumber   &amp;&amp; x^2  = - \frac{a}{3} &amp;&amp; \text{mod } p \end{flalign}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a_over_3</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">a</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span>
<span class="n">x_0</span> <span class="o">=</span> <span class="o">-</span><span class="n">F</span><span class="p">(</span><span class="n">a_over_3</span><span class="p">).</span><span class="n">sqrt</span><span class="p">()</span>
</code></pre></div></div>

<p>We now have to shift x with this large value, so that we can have the singularity located at (0, 0). This is as simple as substituting for x. We don’t have to substitute for y, because the “shift” for y is 0.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f_</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">subs</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span> <span class="o">+</span> <span class="n">x_0</span><span class="p">)</span>
<span class="n">P_</span> <span class="o">=</span> <span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_0</span><span class="p">,</span> <span class="n">P</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">Q_</span> <span class="o">=</span> <span class="p">(</span><span class="n">Q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_0</span><span class="p">,</span> <span class="n">Q</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">R_</span> <span class="o">=</span> <span class="p">(</span><span class="n">R</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_0</span><span class="p">,</span> <span class="n">R</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<p>The shifted function f_ is equal to:</p>

\[\large x^3 + 229054522729978652250851640754582529764 \cdot x^2\]

<p>or rather (factored_f):</p>

\[\large x^2(229054522729978652250851640754582529764 + x)\]

<p>Which accurately describes an elliptic node:</p>

\[\large x^2(\alpha + x)\]

<p>Since we are working with a nodal curve, we know it will map to the multiplicative group. However, we need to figure out which field it maps to. What we can do is investigate whether there exists some integer $\beta$ which, when squared and under modulus p, equals the value $\alpha$. To clarify:</p>

\[\large \begin{flalign} \nonumber   &amp;&amp; \alpha = \beta^2 &amp;&amp; \text{mod } p \end{flalign}\]

<p>The value $\beta$ can then be used to map to the multiplicative group $\mathbb{F}^*_p$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">factored_f</span> <span class="o">=</span> <span class="n">f_</span><span class="p">.</span><span class="n">factor</span><span class="p">()</span>
<span class="n">alpha</span> <span class="o">=</span> <span class="n">factored_f</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">constant_coefficient</span><span class="p">()</span>

<span class="c1"># Calculate beta such that beta^2 ≡ alpha mod p
</span><span class="n">beta</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">)(</span><span class="n">alpha</span><span class="p">).</span><span class="n">square_root</span><span class="p">()</span>
</code></pre></div></div>

<p>And we can now perform the map to the multiplicative group. The map is:</p>

\[\large (x, y) \large\mapsto \frac{y \;+\; \beta x}{y \;-\; \beta x}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P_map</span> <span class="o">=</span> <span class="p">(</span><span class="n">P_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">beta</span><span class="o">*</span><span class="n">P_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">P_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">beta</span><span class="o">*</span><span class="n">P_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">%</span> <span class="n">p</span>
<span class="n">Q_map</span> <span class="o">=</span> <span class="p">(</span><span class="n">Q_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">beta</span><span class="o">*</span><span class="n">Q_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">Q_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">beta</span><span class="o">*</span><span class="n">Q_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">%</span> <span class="n">p</span>
<span class="n">R_map</span> <span class="o">=</span> <span class="p">(</span><span class="n">R_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">beta</span><span class="o">*</span><span class="n">R_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">R_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">beta</span><span class="o">*</span><span class="n">R_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">%</span> <span class="n">p</span>
</code></pre></div></div>

<p>We can now calculate the discrete log of R_map and Q_map to find state0! Remember, $R.x = (Q \cdot state0).x$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">state_0</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">R_map</span><span class="p">,</span> <span class="n">Q_map</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"State 0: </span><span class="si">{</span><span class="n">state_0</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1">#State 0: 23936863590183712869017528905910138331
</span></code></pre></div></div>

<h5 id="breaking-the-prng-and-decrypting-the-flag">Breaking the PRNG and decrypting the flag</h5>

<p>Now that we have the initial state, we can easily recover the iv and the key. However, we will have to implement some custom functions and classes for our curves and such (because sagemath refuses to instantiate a super-singular curve). I will omit the explanation of the classes, but you can check the solve script below for the code.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">prng</span> <span class="o">=</span> <span class="n">Dual_EC_PRNG</span><span class="p">(</span><span class="n">state_0</span><span class="p">,</span> <span class="n">curve</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">)</span>
<span class="n">key</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">((</span><span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="o">+</span> <span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">())</span>
<span class="n">iv</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">())</span>

<span class="n">ciphertext</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'BI</span><span class="se">\xd5\xfd\x8e\x1e</span><span class="s">(s</span><span class="se">\xb3</span><span class="s">vUhy</span><span class="se">\x96</span><span class="s">Y</span><span class="se">\x8f\xce</span><span class="s">Rr</span><span class="se">\x0c\xe6\xf0\x1a\x88</span><span class="s">x</span><span class="se">\xe2\xe9</span><span class="s">M#]</span><span class="se">\xad\x99</span><span class="s">H</span><span class="se">\x13</span><span class="s">+</span><span class="se">\x9e</span><span class="s">5</span><span class="se">\xfd\x9b</span><span class="s"> </span><span class="se">\xe6\xf0\xe1</span><span class="s">0w</span><span class="se">\x80</span><span class="s">q</span><span class="se">\x8d</span><span class="s">'</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
<span class="n">plaintext_padded</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>

<span class="n">plaintext</span> <span class="o">=</span> <span class="n">unpad</span><span class="p">(</span><span class="n">plaintext_padded</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">block_size</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>

<span class="c1"># b'ironCTF{5h0uld_h4v3_1is7en3d_t0_d4v1d_a1r34dy}'
</span></code></pre></div></div>

<p>And there is our flag!</p>

<h5 id="solvesage">Solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sage.all</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">unpad</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span>

<span class="c1"># Define the finite field and parameters
</span><span class="n">p</span> <span class="o">=</span> <span class="mi">229054522729978652250851640754582529779</span>
<span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">75</span>
<span class="n">b</span> <span class="o">=</span> <span class="o">-</span><span class="mi">250</span>
<span class="n">F</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>

<span class="c1"># Known points P and Q
</span><span class="n">P</span> <span class="o">=</span> <span class="p">(</span><span class="mi">97396093570994028423863943496522860154</span> <span class="p">,</span> <span class="mi">2113909984961319354502377744504238189</span><span class="p">)</span>
<span class="n">Q</span> <span class="o">=</span> <span class="p">(</span><span class="mi">137281564215976890139225160114831726699</span> <span class="p">,</span> <span class="mi">111983247632990631097104218169731744696</span><span class="p">)</span>

<span class="n">R_x</span> <span class="o">=</span> <span class="n">F</span><span class="p">(</span><span class="mi">222485190245526863452994827085862802196</span><span class="p">)</span>
<span class="n">rhs</span> <span class="o">=</span> <span class="n">R_x</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="n">a</span> <span class="o">*</span> <span class="n">R_x</span> <span class="o">+</span> <span class="n">b</span>
<span class="n">R_y</span> <span class="o">=</span> <span class="n">rhs</span><span class="p">.</span><span class="n">sqrt</span><span class="p">()</span>
<span class="n">R</span> <span class="o">=</span> <span class="p">(</span><span class="n">R_x</span><span class="p">,</span> <span class="n">R_y</span><span class="p">)</span>

<span class="c1"># Define the elliptic curve equation y^2 = x^3 + ax + b
</span><span class="n">A</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">ZZ</span><span class="p">)</span> 
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="n">a</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">b</span>

<span class="c1"># x_0, the x-coordinate of the singularity
</span><span class="n">a_over_3</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">a</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span>
<span class="n">x_0</span> <span class="o">=</span> <span class="o">-</span><span class="n">F</span><span class="p">(</span><span class="n">a_over_3</span><span class="p">).</span><span class="n">sqrt</span><span class="p">()</span>

<span class="c1"># Shift the curve by x_0 to move the singularity to (0, 0)
</span><span class="n">f_</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">subs</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">x</span> <span class="o">+</span> <span class="n">x_0</span><span class="p">)</span>
<span class="n">P_</span> <span class="o">=</span> <span class="p">(</span><span class="n">P</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_0</span><span class="p">,</span> <span class="n">P</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">Q_</span> <span class="o">=</span> <span class="p">(</span><span class="n">Q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_0</span><span class="p">,</span> <span class="n">Q</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">R_</span> <span class="o">=</span> <span class="p">(</span><span class="n">R</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">x_0</span><span class="p">,</span> <span class="n">R</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>

<span class="n">factored_f</span> <span class="o">=</span> <span class="n">f_</span><span class="p">.</span><span class="n">factor</span><span class="p">()</span>
<span class="n">alpha</span> <span class="o">=</span> <span class="n">factored_f</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="n">constant_coefficient</span><span class="p">()</span>

<span class="c1"># Calculate beta such that beta^2 ≡ alpha mod p
</span><span class="n">beta</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">)(</span><span class="n">alpha</span><span class="p">).</span><span class="n">square_root</span><span class="p">()</span>

<span class="c1"># Map shifted points to the multiplicative group F*_p
</span><span class="n">P_map</span> <span class="o">=</span> <span class="p">(</span><span class="n">P_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">beta</span><span class="o">*</span><span class="n">P_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">P_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">beta</span><span class="o">*</span><span class="n">P_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">%</span> <span class="n">p</span>
<span class="n">Q_map</span> <span class="o">=</span> <span class="p">(</span><span class="n">Q_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">beta</span><span class="o">*</span><span class="n">Q_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">Q_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">beta</span><span class="o">*</span><span class="n">Q_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">%</span> <span class="n">p</span>
<span class="n">R_map</span> <span class="o">=</span> <span class="p">(</span><span class="n">R_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">beta</span><span class="o">*</span><span class="n">R_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">/</span> <span class="p">(</span><span class="n">R_</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">beta</span><span class="o">*</span><span class="n">R_</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">%</span> <span class="n">p</span>

<span class="c1">#state_0 = discrete_log(R_map, Q_map)
#print(f"State 0: {state_0}")
</span>
<span class="n">state_0</span> <span class="o">=</span> <span class="mi">23936863590183712869017528905910138331</span>

<span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">curve</span><span class="p">,</span> <span class="n">is_infinity</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">curve</span> <span class="o">=</span> <span class="n">curve</span>  <span class="c1"># Reference to the curve
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">is_infinity</span> <span class="o">=</span> <span class="n">is_infinity</span>

    <span class="k">def</span> <span class="nf">__eq__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_infinity</span> <span class="ow">and</span> <span class="n">other</span><span class="p">.</span><span class="n">is_infinity</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_infinity</span> <span class="ow">or</span> <span class="n">other</span><span class="p">.</span><span class="n">is_infinity</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">False</span>
        <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">x</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">y</span> <span class="ow">and</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span> <span class="o">==</span> <span class="n">other</span><span class="p">.</span><span class="n">curve</span>

    <span class="k">def</span> <span class="nf">__neg__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_infinity</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span>
        <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="o">-</span><span class="bp">self</span><span class="p">.</span><span class="n">y</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">Q</span><span class="p">):</span>
        <span class="n">P</span> <span class="o">=</span> <span class="bp">self</span>
        <span class="k">if</span> <span class="n">P</span><span class="p">.</span><span class="n">is_infinity</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Q</span>
        <span class="k">if</span> <span class="n">Q</span><span class="p">.</span><span class="n">is_infinity</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">P</span>

        <span class="k">if</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">Q</span><span class="p">.</span><span class="n">x</span> <span class="ow">and</span> <span class="p">(</span><span class="n">P</span><span class="p">.</span><span class="n">y</span> <span class="o">!=</span> <span class="n">Q</span><span class="p">.</span><span class="n">y</span> <span class="ow">or</span> <span class="n">P</span><span class="p">.</span><span class="n">y</span> <span class="o">==</span> <span class="mi">0</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">infinity</span>

        <span class="k">if</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">==</span> <span class="n">Q</span><span class="p">.</span><span class="n">x</span><span class="p">:</span>
            <span class="c1"># Point doubling
</span>            <span class="n">lam_num</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span> <span class="o">*</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">a</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span>
            <span class="n">lam_den</span> <span class="o">=</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="n">P</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="c1"># Point addition
</span>            <span class="n">lam_num</span> <span class="o">=</span> <span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="n">P</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span>
            <span class="n">lam_den</span> <span class="o">=</span> <span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span>

        <span class="c1"># Compute the slope (lambda)
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">lam</span> <span class="o">=</span> <span class="p">(</span><span class="n">lam_num</span> <span class="o">*</span> <span class="nb">pow</span><span class="p">(</span><span class="n">lam_den</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span><span class="p">))</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span>
        <span class="k">except</span> <span class="nb">ZeroDivisionError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">infinity</span>

        <span class="c1"># Compute the new point coordinates
</span>        <span class="n">x_r</span> <span class="o">=</span> <span class="p">(</span><span class="n">lam</span> <span class="o">*</span> <span class="n">lam</span> <span class="o">-</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">Q</span><span class="p">.</span><span class="n">x</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span>
        <span class="n">y_r</span> <span class="o">=</span> <span class="p">(</span><span class="n">lam</span> <span class="o">*</span> <span class="p">(</span><span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">-</span> <span class="n">x_r</span><span class="p">)</span> <span class="o">-</span> <span class="n">P</span><span class="p">.</span><span class="n">y</span><span class="p">)</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">p</span>

        <span class="k">return</span> <span class="n">Point</span><span class="p">(</span><span class="n">x_r</span><span class="p">,</span> <span class="n">y_r</span><span class="p">,</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__rmul__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
        <span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">curve</span><span class="p">.</span><span class="n">infinity</span>
        <span class="n">addend</span> <span class="o">=</span> <span class="bp">self</span>

        <span class="k">while</span> <span class="n">k</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">k</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">:</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">+</span> <span class="n">addend</span>
            <span class="n">addend</span> <span class="o">=</span> <span class="n">addend</span> <span class="o">+</span> <span class="n">addend</span>
            <span class="n">k</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span>

        <span class="k">return</span> <span class="n">result</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="p">.</span><span class="n">is_infinity</span><span class="p">:</span>
            <span class="k">return</span> <span class="s">"Point(infinity)"</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">"Point(</span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">x</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="bp">self</span><span class="p">.</span><span class="n">y</span><span class="si">}</span><span class="s">)"</span>

<span class="k">class</span> <span class="nc">Curve</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">p</span> <span class="o">=</span> <span class="n">p</span>  <span class="c1"># Prime modulus
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="n">a</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="n">b</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">infinity</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">self</span><span class="p">,</span> <span class="n">is_infinity</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">is_on_curve</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">P</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">P</span><span class="p">.</span><span class="n">is_infinity</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">P</span><span class="p">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">P</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="p">(</span><span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">a</span> <span class="o">*</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="bp">self</span><span class="p">.</span><span class="n">b</span><span class="p">))</span> <span class="o">%</span> <span class="bp">self</span><span class="p">.</span><span class="n">p</span> <span class="o">==</span> <span class="mi">0</span>

<span class="k">class</span> <span class="nc">Dual_EC_PRNG</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">initial_state</span><span class="p">,</span> <span class="n">curve</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">initial_state</span>  <span class="c1"># Initial state (integer)
</span>        <span class="bp">self</span><span class="p">.</span><span class="n">curve</span> <span class="o">=</span> <span class="n">curve</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">P</span> <span class="o">=</span> <span class="n">P</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">Q</span> <span class="o">=</span> <span class="n">Q</span>

    <span class="k">def</span> <span class="nf">set_next_state</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># Scalar multiply P by the current state and take the x-coordinate as the next state
</span>        <span class="n">new_point</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">state</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">P</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">state</span> <span class="o">=</span> <span class="n">new_point</span><span class="p">.</span><span class="n">x</span>

    <span class="k">def</span> <span class="nf">gen_rand_num</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="c1"># Scalar multiply Q by the current state and take the x-coordinate as the random number
</span>        <span class="n">rand_point</span> <span class="o">=</span> <span class="bp">self</span><span class="p">.</span><span class="n">state</span> <span class="o">*</span> <span class="bp">self</span><span class="p">.</span><span class="n">Q</span>
        <span class="n">rand_num</span> <span class="o">=</span> <span class="n">rand_point</span><span class="p">.</span><span class="n">x</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">set_next_state</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">rand_num</span>

<span class="c1"># Initialize the curve
</span><span class="n">curve</span> <span class="o">=</span> <span class="n">Curve</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>

<span class="c1"># Define points P and Q
</span><span class="n">P</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span>
    <span class="mi">97396093570994028423863943496522860154</span><span class="p">,</span>
    <span class="mi">2113909984961319354502377744504238189</span><span class="p">,</span>
    <span class="n">curve</span>
<span class="p">)</span>

<span class="n">Q</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span>
    <span class="mi">137281564215976890139225160114831726699</span><span class="p">,</span>
    <span class="mi">111983247632990631097104218169731744696</span><span class="p">,</span>
    <span class="n">curve</span>
<span class="p">)</span>

<span class="c1"># Verify that points are on the curve
</span><span class="k">assert</span> <span class="n">curve</span><span class="p">.</span><span class="n">is_on_curve</span><span class="p">(</span><span class="n">P</span><span class="p">),</span> <span class="s">"Point P is not on the curve"</span>
<span class="k">assert</span> <span class="n">curve</span><span class="p">.</span><span class="n">is_on_curve</span><span class="p">(</span><span class="n">Q</span><span class="p">),</span> <span class="s">"Point Q is not on the curve"</span>

<span class="c1"># Initialize PRNG
</span><span class="n">prng</span> <span class="o">=</span> <span class="n">Dual_EC_PRNG</span><span class="p">(</span><span class="n">state_0</span><span class="p">,</span> <span class="n">curve</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">Q</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"leaked prng value: </span><span class="si">{</span><span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># Generate rand1, rand2, rand3
</span><span class="n">key</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">((</span><span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="mi">128</span><span class="p">)</span> <span class="o">+</span> <span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">())</span>
<span class="n">iv</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">prng</span><span class="p">.</span><span class="n">gen_rand_num</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Derived AES Key (hex): </span><span class="si">{</span><span class="n">key</span><span class="p">.</span><span class="nb">hex</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Derived AES IV (hex): </span><span class="si">{</span><span class="n">iv</span><span class="p">.</span><span class="nb">hex</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># Encrypted bytes from the challenge
</span><span class="n">ciphertext</span> <span class="o">=</span> <span class="sa">b</span><span class="s">'BI</span><span class="se">\xd5\xfd\x8e\x1e</span><span class="s">(s</span><span class="se">\xb3</span><span class="s">vUhy</span><span class="se">\x96</span><span class="s">Y</span><span class="se">\x8f\xce</span><span class="s">Rr</span><span class="se">\x0c\xe6\xf0\x1a\x88</span><span class="s">x</span><span class="se">\xe2\xe9</span><span class="s">M#]</span><span class="se">\xad\x99</span><span class="s">H</span><span class="se">\x13</span><span class="s">+</span><span class="se">\x9e</span><span class="s">5</span><span class="se">\xfd\x9b</span><span class="s"> </span><span class="se">\xe6\xf0\xe1</span><span class="s">0w</span><span class="se">\x80</span><span class="s">q</span><span class="se">\x8d</span><span class="s">'</span>

<span class="c1"># Initialize AES cipher in CBC mode
</span><span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>

<span class="c1"># Decrypt and unpad the plaintext
</span><span class="n">plaintext_padded</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>
<span class="k">try</span><span class="p">:</span>
    <span class="n">plaintext</span> <span class="o">=</span> <span class="n">unpad</span><span class="p">(</span><span class="n">plaintext_padded</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">block_size</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Decrypted Flag:"</span><span class="p">,</span> <span class="n">plaintext</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">ValueError</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Incorrect decryption. Possible wrong key/IV."</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="PRNG" /><category term="Elliptic Curve" /><category term="Nodal Curve" /><category term="ECDLP" /><summary type="html"><![CDATA[Challenge Introduction]]></summary></entry><entry><title type="html">That one RSA challenge (TCP1P 2024)</title><link href="http://localhost:4000/that-one-rsa-challenge/" rel="alternate" type="text/html" title="That one RSA challenge (TCP1P 2024)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/that-one-rsa-challenge</id><content type="html" xml:base="http://localhost:4000/that-one-rsa-challenge/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the following python source code:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">secret</span> <span class="kn">import</span> <span class="n">flag</span>
<span class="n">z</span> <span class="o">=</span> <span class="mi">567</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">),</span> <span class="mi">65537</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">tot</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="mi">65537</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">tot</span><span class="p">))</span>
<span class="n">dinv</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">))</span>

<span class="n">h</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">dinv</span> <span class="o">&gt;&gt;</span> <span class="n">z</span><span class="p">)</span>
<span class="n">hpq</span> <span class="o">=</span> <span class="p">(</span><span class="nb">int</span><span class="p">((</span><span class="n">p</span><span class="o">+</span><span class="n">q</span><span class="p">)</span><span class="o">&gt;&gt;</span> <span class="n">z</span><span class="p">))</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">'out.txt'</span><span class="p">,</span> <span class="s">'w+'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">n</span><span class="o">=</span><span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">h</span><span class="o">=</span><span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">hpq</span><span class="o">=</span><span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
    <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">c</span><span class="o">=</span><span class="si">}</span><span class="se">\n</span><span class="s">'</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the file out.txt
We are given the typical n, e and c parameters, as well as two hints h and hpq.</p>

<h5 id="deriving-the-solution">Deriving the solution</h5>

<p>We are given two hints for this RSA challenge; <code class="language-plaintext highlighter-rouge">h</code> and <code class="language-plaintext highlighter-rouge">hpq</code>.</p>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">h</code> is the most significant bits of <code class="language-plaintext highlighter-rouge">dinv</code> where <code class="language-plaintext highlighter-rouge">dinv</code> is equal to $d^{-1} \mod N$</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">hpq</code> is the most significant bits of the sum of the modulus factors $p+q$</p>
  </li>
</ul>

<p>These kinds of challenges can usually be solved using coppersmith lattice attacks.
We have to derive some function $f$ that contains the hints with roots $x, y$. Solving for the roots, we can recover $d^{-1}\mod N$ and $p+q$.</p>

<p>for <code class="language-plaintext highlighter-rouge">hpq</code>, we can expand $\varphi(N)$ in the following equation:</p>

\[\large\begin{aligned}
e \cdot d &amp;\equiv 1 \mod \varphi (N) \\
e \cdot d &amp;= 1 + k \cdot (N + 1 - (p+q)) \\
d &amp;= \frac{1 + k \cdot (N + 1 - (p+q))}{e}
\end{aligned}\]

<p>Here we can see the term $p+q$ appear after expanding $\varphi(N)$. We also find an equation for $d$.
We can then substitute $d$ into the following equation:</p>

\[\large\begin{aligned}
d \cdot d^{-1} &amp;\equiv 1 \mod N \\
d^{-1} \cdot d - 1 &amp;\equiv 0 \mod N \\
d^{-1} \cdot\frac{1 + k \cdot (N + 1 - (p+q))}{e} - 1 &amp;\equiv 0 \mod N \\
d^{-1} \cdot (1 + k \cdot (N + 1 - (p+q))) - e &amp;\equiv 0 \mod N
\end{aligned}\]

<p>We can now substitute $p+q$ and $d^{-1}$ for our hints:</p>

\[\large\begin{aligned}
d^{-1} \cdot (1 + k \cdot (N + 1 - (p+q))) - e &amp;\equiv 0 \mod N \\
((h&lt;&lt;z) + x) \cdot (1 + k \cdot (N + 1 - ((hpq&lt;&lt;z)+y))) - e &amp;\equiv 0 \mod N
\end{aligned}\]

<p>We can use this as our function $f$ and solve for the roots. We have the roots $k,x,y$ so we will have to use multivariate coppersmith.</p>

<p>For the bounds, we know $x$ and $y$ are both upper bounded by $2^z$, but $k$ is different. We can take into consideration this equation:</p>

\[\large\begin{aligned}
e \cdot d &amp; \equiv1 \quad(\bmod \varphi(N)) \\
\Longrightarrow e \cdot d &amp; =1 + k \cdot \varphi(N) \\
\Longrightarrow e \cdot d &amp;\approx k \cdot \varphi(N)
\end{aligned}\]

<p>Since $d$ and $\varphi(N)$ have almost the same bit-size, it must mean that $e$ and $k$ also have almost the same bit-size. We can use $e$ as the upper bound for $k$.</p>

<h5 id="implementing-the-solution">Implementing the solution</h5>

<p>Since this is a multivariate coppersmith problem, I will take in use the useful scripts from <code class="language-plaintext highlighter-rouge">kiona</code>’s git repo. Specifically, I will use the <code class="language-plaintext highlighter-rouge">coppersmith_multivariate_heuristic</code> function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/kiona/coppersmith_multivariate_heuristic.py'</span><span class="p">)</span>
</code></pre></div></div>

<p>We can load in our values</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span><span class="o">=</span><span class="mi">13986357905153484822874300783445968480194277882812317554826224241536479785567487956712558237728345348661360577246137576216953724039680969623887884690471844396542763308129517234365819619617071449273126659007918716307793788623728052337632935762139796688014791419718949572448772521789488223910450877828732015095423443037519388747356327730350934152781671783952028215703864406564741666179193772037496984854699143314813242721157017296866888522135989818414587193505121794302821401677072507471357592358012342178011963104524959087968374300060349343826214249928530346877968114749229074874962737714935221065368318487049394644831</span>
<span class="n">h</span><span class="o">=</span><span class="mi">10474216468878927114435400909130676124750910912012236182806861194655854223324539867768381265996955193355030239325750528328250897464859373863289680002879536341349759323910048168674147097644573874679268018966497862685092382336865554114348153248267599439087357199554652601126191061921516650448119261614064051599968120061991607030873881013657693987836636730528537557619595799676312850875727477092697270452300532360780188724484703363561848754770976459</span>
<span class="n">hpq</span><span class="o">=</span><span class="mi">492124417091708682668644108145880307537308922842816506360717440112116492381514432506339907757228214359689270777951081610062506962769167209</span>
<span class="n">c</span><span class="o">=</span><span class="mi">4715651972688371479449666526727240348158670108161494767004202259402013317642418593561463200947908841531208327599049414587586292570298317049448560403558027904798159589477994992384199008976859139072407664659830448866472863679123027179516506312536814186903687358198847465706108667279355674105689763404474207340186200156662095468249081142604074167178023479657021133754055107459927667597604156397468414872149353231061997958301747136265344906296373544580143870450924707559398134384774201700278038470171319329716930036843839101955981274793386611943442507144153946307781795085665793554799349509983282980591388585613674226899</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
<span class="n">z</span> <span class="o">=</span> <span class="mi">567</span>
</code></pre></div></div>

<p>and set up our function $f$ with roots $k,x,y$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">k</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
<span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">-</span><span class="p">((</span><span class="n">hpq</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span><span class="o">+</span><span class="n">y</span><span class="p">)))</span><span class="o">*</span><span class="p">((</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span><span class="o">+</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="n">e</span>
</code></pre></div></div>

<p>Using kiona’s multivariate heuristic function, we can recover the roots:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">roots</span> <span class="o">=</span> <span class="n">coppersmith_multivariate_heuristic</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="n">z</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="n">z</span><span class="p">),</span> <span class="mf">1.0</span><span class="p">)</span>
</code></pre></div></div>

<p>And lastly, we can take the modular inverse $d^{-1}$ to derive the private key $d$ and decrypt the ciphertext $c$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(((</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span><span class="o">+</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]),</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">'</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>This gives us our flag: <code class="language-plaintext highlighter-rouge">TCP1P{AmEeeeeEE33333eeee333_T_T_8883938ef7571cc2}</code></p>

<h5 id="solvesage">solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">load</span><span class="p">(</span><span class="s">'~/tools/coppersmith/kiona/coppersmith_multivariate_heuristic.py'</span><span class="p">)</span>

<span class="n">n</span><span class="o">=</span><span class="mi">13986357905153484822874300783445968480194277882812317554826224241536479785567487956712558237728345348661360577246137576216953724039680969623887884690471844396542763308129517234365819619617071449273126659007918716307793788623728052337632935762139796688014791419718949572448772521789488223910450877828732015095423443037519388747356327730350934152781671783952028215703864406564741666179193772037496984854699143314813242721157017296866888522135989818414587193505121794302821401677072507471357592358012342178011963104524959087968374300060349343826214249928530346877968114749229074874962737714935221065368318487049394644831</span>
<span class="n">h</span><span class="o">=</span><span class="mi">10474216468878927114435400909130676124750910912012236182806861194655854223324539867768381265996955193355030239325750528328250897464859373863289680002879536341349759323910048168674147097644573874679268018966497862685092382336865554114348153248267599439087357199554652601126191061921516650448119261614064051599968120061991607030873881013657693987836636730528537557619595799676312850875727477092697270452300532360780188724484703363561848754770976459</span>
<span class="n">hpq</span><span class="o">=</span><span class="mi">492124417091708682668644108145880307537308922842816506360717440112116492381514432506339907757228214359689270777951081610062506962769167209</span>
<span class="n">c</span><span class="o">=</span><span class="mi">4715651972688371479449666526727240348158670108161494767004202259402013317642418593561463200947908841531208327599049414587586292570298317049448560403558027904798159589477994992384199008976859139072407664659830448866472863679123027179516506312536814186903687358198847465706108667279355674105689763404474207340186200156662095468249081142604074167178023479657021133754055107459927667597604156397468414872149353231061997958301747136265344906296373544580143870450924707559398134384774201700278038470171319329716930036843839101955981274793386611943442507144153946307781795085665793554799349509983282980591388585613674226899</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">65537</span>
<span class="n">z</span> <span class="o">=</span> <span class="mi">567</span>

<span class="n">P</span><span class="p">.</span><span class="o">&lt;</span><span class="n">k</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
<span class="n">f</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">k</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">-</span><span class="p">((</span><span class="n">hpq</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span><span class="o">+</span><span class="n">y</span><span class="p">)))</span><span class="o">*</span><span class="p">((</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span><span class="o">+</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="n">e</span>
<span class="n">roots</span> <span class="o">=</span> <span class="n">coppersmith_multivariate_heuristic</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="n">z</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="n">z</span><span class="p">),</span> <span class="mf">1.0</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(((</span><span class="n">h</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span><span class="o">+</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]),</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">'</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Coppersmith small roots" /><category term="RSA" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Comet19 (CLL Julekalender 2024)</title><link href="http://localhost:4000/comet-19/" rel="alternate" type="text/html" title="Comet19 (CLL Julekalender 2024)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/comet-19</id><content type="html" xml:base="http://localhost:4000/comet-19/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this challenge, we are given a zip file containing 10 <code class="language-plaintext highlighter-rouge">.png</code> images.</p>

<p>By opening the images, we can tell that these are some form of QR-codes.</p>

<p>I began by scanning them with the command-line tool <code class="language-plaintext highlighter-rouge">zbarimg</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ zbarimg *.png      
QR-Code:HC1:NCFOXN*TS0BIO DQP4FWRAN9I6T5XH4PIQJAZGA+1V2:U:PI/E2$4JY/K:*K9OV$/G0NN7Y4HBT*Q0ROFRW0:Q89Y431TSGO/UI2YUJ12ZD5CC9G%85$0CPN-XIN6R%E5IWMAK8S16A65K342/4N7MW84-C6W47E16O47D280DNIZ6$S4L35BD7UJ8+YMHBQ:YM/D7JSPAEQLD4RCH+SGU.SKV9KDC.A5:S9395F48V+H0 28X2+36R/S09T./0LWTKD3323EJ0SU9ZIEQKERQ8IY1I$HH%U8 9PS5TK96L6SR9MU9DV5 R13PI%F1PN1/T1%%HN9GQWU-:0Z0OTNJI+AR$C66P-7P*3G64SQJIQ3LB$FI2DQTQXJ24GB3HVR$9HLLK2NPCKIUSEFO/P3WCW/BJEQO.HQK6D +SM1N.2IK2S9493H0$8M3BF
[...]
QR-Code:HC1:NCFOXN*TS0BIO DQP4$VQAN9I6T5XH4PIQJAZGA+1V2:U:PI/E2$4JY/KT-K-EFEHN7Y4HBT*Q0ROFRW0:Q89Y431TR58/UI2YUF52ZD5CC9G%85$0CPN-XIN6R%E5IWMAK8S16A65K342/4N7MW84-C6W47E16O47D280DNZV2ZH91JAA/CHLFEEA+ZA%DBU2LKHG3ZA5N0:BCYE9.OVMBEIMI4UUIMI$I9XZ2ZA8DS9++9LK9Q$95:UENEUW6646936ORPC-4A+2XEN QT QTHC31M3+E35S4CZKHKB-43.E3KD3OAJ5%IKTCMD3QHBZQJLIF172*VPZAOZGT52J-42ED6++F-8KNOV-OE$-EGUMBDW$B71RCOSPY%N9Z37 93%8V7WGYF*.7.YMGL9SS3Y:NMZPBE9HJ6OMIHGR2RRDF7-201:3I1
scanned 10 barcode symbols from 10 images in 0.41 seconds
</code></pre></div></div>

<p>This output data seemed rather peculiar. Noticing every line of output started with <code class="language-plaintext highlighter-rouge">HC1:NCFOXN...</code>, I googled the prefix and was then led to <code class="language-plaintext highlighter-rouge">EU Green Pass QR Codes</code>. This site was particularly helpful: https://gir.st/blog/greenpass.html.</p>

<p>The challenge title is a play on Covid19.</p>

<h5 id="handling-the-data">Handling the data</h5>

<p>With the help of ChatGPT, I generated a script that performed the Base45 -&gt; Zlib -&gt; CBOR -&gt; COSE -&gt; JSON decoding. I got the following output:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"QR_1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"-260"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"ver"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.3.0"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"nam"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"fn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BLITZEN"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"gn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"REINSDYR"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"fnt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"BLITZEN"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"gnt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"REINSDYR"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="nl">"dob"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2001-01-01"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"v"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                    </span><span class="p">{</span><span class="w">
                        </span><span class="nl">"is"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Nordpolens Vaksinasjonssenter"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"ci"</span><span class="p">:</span><span class="w"> </span><span class="s2">"urn:uvci:01:XX:XXXXXXXXXXXXXXXXXXXXXXXX"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"co"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Nordpolen"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"dn"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"dt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-01-01"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"sd"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"ma"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ORG-100030215"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"mp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"EU/1/20/1528"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"tg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"840539006"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"vp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1119349007"</span><span class="w">
                    </span><span class="p">}</span><span class="w">
                </span><span class="p">]</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="p">[</span><span class="err">...</span><span class="p">]</span><span class="w">
    </span><span class="nl">"QR_10"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"-260"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"1"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nl">"ver"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.3.0"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"nam"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                    </span><span class="nl">"fn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"VIXEN"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"gn"</span><span class="p">:</span><span class="w"> </span><span class="s2">"REINSDYR"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"fnt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"VIXEN"</span><span class="p">,</span><span class="w">
                    </span><span class="nl">"gnt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"REINSDYR"</span><span class="w">
                </span><span class="p">},</span><span class="w">
                </span><span class="nl">"dob"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2001-01-01"</span><span class="p">,</span><span class="w">
                </span><span class="nl">"v"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                    </span><span class="p">{</span><span class="w">
                        </span><span class="nl">"is"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Nordpolens Vaksinasjonssenter"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"ci"</span><span class="p">:</span><span class="w"> </span><span class="s2">"urn:uvci:01:XX:XXXXXXXXXXXXXXXXXXXXXXXX"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"co"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Nordpolen"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"dn"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"dt"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2021-01-01"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"sd"</span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"ma"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ORG-100030215"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"mp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"EU/1/20/1528"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"tg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"840539006"</span><span class="p">,</span><span class="w">
                        </span><span class="nl">"vp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1119349007"</span><span class="w">
                    </span><span class="p">}</span><span class="w">
                </span><span class="p">]</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">       
</span></code></pre></div></div>

<p>The data was all-round rather unassuming.</p>

<p>However, in addition to the data from the payload, we had a corresponding signature for each pass.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--- Signatur 1 for QR-kode 1 ---
Heksadesimal: 23bdbe836ca88268155e7f5e63f3c78691093c7f87b3097062ddc8226ad60fb2956c7fb6b710829195519108a5fcd09a3401c1414cbb935a86760883bb27c4df
--- Signatur 1 for QR-kode 2 ---
Heksadesimal: ae05c829232f7f9c4be40bbf9ae92d92cf6e1e483f423747125adbdba6d18430cc9639a59fdb38815c5113fe28085e4b4db08060d5bca30d1c5f515579e5847b
--- Signatur 1 for QR-kode 3 ---
Heksadesimal: 2cf43577802efec717ba36a1ec214391fbc4e5eaf241824e0bfed80273e9f9de220b580ee62ae4df76c7d9a6fbf47011647816c9d4c87fd08fdd7240d3fbdd35
--- Signatur 1 for QR-kode 4 ---
Heksadesimal: a9ab217770dc137843b7fe30de77b5dda4d289add8e2611a610615985423d9afac5f1e7a531afba8f875590b59b8256112e41c021a2b84a0d5a9d5f4640fd15a
--- Signatur 1 for QR-kode 5 ---
Heksadesimal: e92eb0b92f8211dbaaa99de8a446a723dd000b076a9b1705b9274b9e1802be15786fd8a554b0fd6a17fbfafe30ff23df61b0a67918098fd5fcfbab6d0c5be8d3
--- Signatur 1 for QR-kode 6 ---
Heksadesimal: 220145e1b4e58078246fe52f03e3adb0b6faabced8ad20948f4b8a0f24d0118929f5dd561419dd30dd5d32e2f43ae8f3a8f6678b40f4159dd028d6d2b82b6a98
--- Signatur 1 for QR-kode 7 ---
Heksadesimal: 7db8336ca9b5d0421bf4cd890052592608ce0ddf989e836835931166bd01dc5a64a1e5950bd5525105cc206eff545b34820075f6b435c0209f947caed5c3f398
--- Signatur 1 for QR-kode 8 ---
Heksadesimal: 69c971efe85e4f84f80fd116652d04b1279529cd46fa20f80cae55defa31d27ba228071fffa61cd0147710e1240bfcc99376bc56f6e44ed35987275aa3e1efbe
--- Signatur 1 for QR-kode 9 ---
Heksadesimal: 7db8336ca9b5d0421bf4cd890052592608ce0ddf989e836835931166bd01dc5a0275047d4b104e071211fa1f22c32134cc524cdfcd5c13b96f150c4757741a41
--- Signatur 1 for QR-kode 10 ---
Heksadesimal: a785f6e888a665205f289647bafca36f319de1883304d7f2d369b15d24d16efd88af3433150efd48f43bc142aa5a19ce00deb3a6fe190501da18a182cb351b6e
</code></pre></div></div>

<p>One thing I noticed is that the first half of the signature for QR-code 7 and QR-code 9 are identical:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7db8336ca9b5d0421bf4cd890052592608ce0ddf989e836835931166bd01dc5a64a1e5950bd5525105cc206eff545b34820075f6b435c0209f947caed5c3f398
7db8336ca9b5d0421bf4cd890052592608ce0ddf989e836835931166bd01dc5a0275047d4b104e071211fa1f22c32134cc524cdfcd5c13b96f150c4757741a41
</code></pre></div></div>

<p>Also, the codes correspond to Santa and Rudolph, the two most important characters of the bunch.</p>

<p>During some earlier research, I found this GitHub issue addressing the private key leak of the Covid19 Green Pass codes: https://github.com/ehn-dcc-development/eu-dcc-hcert-spec/issues/103</p>

<p>This tells me that we are working with the Elliptic Curve Digital Signing Algorithm (ECDSA), and that we are most likely working with the curve <code class="language-plaintext highlighter-rouge">secp256r1</code>.</p>

<p>This is very interesting, because the signatures consist of two values, <code class="language-plaintext highlighter-rouge">r</code> and <code class="language-plaintext highlighter-rouge">s</code>. Since the value <code class="language-plaintext highlighter-rouge">r</code> is identical for codes, it means the nonce has been reused. In ECDSA, the private key can be recovered if two different messages are signed with the same nonce!</p>

<h5 id="recovering-the-private-key">Recovering the private key</h5>

<p>With the identification of QR-code 7 and QR-code 9 sharing the same <code class="language-plaintext highlighter-rouge">r</code> value, we can exploit the nonce reuse vulnerability in ECDSA to recover the private key. In ECDSA, each signature is generated using a unique nonce <code class="language-plaintext highlighter-rouge">k</code>. The signature consists of two components, <code class="language-plaintext highlighter-rouge">r</code> and <code class="language-plaintext highlighter-rouge">s</code>, who are generated in the following fashion:</p>

\[\large r = k \cdot G\]

\[\large s = k^{-1}(Sha256(M)+r\cdot privkey)\]

<p>If two messages $m_1$ and $m_2$ are signed with the same private key and the same nonce, then we can recover the private key with:</p>

\[\large privkey = \frac{s_2 \cdot Sha256(m_1) - s_1 \cdot Sha256(m_2)}{r(s_1-s_2)}\]

<p>We already have the values for $r$, $s_1$ and $s_2$, but we need to find the exact values for $m_1$ and $m_2$. We can recover the exact payloads based on the standard for COSE (RFC8152)</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sig_structure = [
   context : "Signature" / "Signature1" / "CounterSignature",
   body_protected : empty_or_serialized_map,
   ? sign_protected : empty_or_serialized_map,
   external_aad : bstr,
   payload : bstr
]
</code></pre></div></div>

<p>We will use Signature1, the protected header <code class="language-plaintext highlighter-rouge">\xa1\x01&amp;</code> (retrieved from CBORTag dump), no external_aad and the main payload</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sig_struct7</span> <span class="o">=</span> <span class="n">cbor2</span><span class="p">.</span><span class="n">dumps</span><span class="p">([</span><span class="s">"Signature1"</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xa1\x01</span><span class="s">&amp;'</span><span class="p">,</span> <span class="sa">b</span><span class="s">''</span><span class="p">,</span> <span class="n">payload1</span><span class="p">])</span>
<span class="n">sig_struct9</span> <span class="o">=</span> <span class="n">cbor2</span><span class="p">.</span><span class="n">dumps</span><span class="p">([</span><span class="s">"Signature1"</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xa1\x01</span><span class="s">&amp;'</span><span class="p">,</span> <span class="sa">b</span><span class="s">''</span><span class="p">,</span> <span class="n">payload2</span><span class="p">])</span>
</code></pre></div></div>

<p>These values can then be hashed to get $h_1$ and $h_2$.</p>

<p>We can then recover the private key $d$ using the equation above, but we have to calculate the modular inverse instead of performing division:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">s2</span><span class="o">*</span><span class="n">h1</span> <span class="o">-</span> <span class="n">s1</span><span class="o">*</span><span class="n">h2</span><span class="p">)</span> <span class="o">*</span> <span class="nb">pow</span><span class="p">((</span><span class="n">r</span><span class="o">*</span><span class="p">(</span><span class="n">s1</span><span class="o">-</span><span class="n">s2</span><span class="p">)),</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>
</code></pre></div></div>

<h5 id="solvepy">Solve.py</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">base45</span><span class="p">,</span> <span class="n">zlib</span><span class="p">,</span> <span class="n">cbor2</span><span class="p">,</span> <span class="n">hashlib</span>

<span class="c1"># Order of P-256 curve
</span><span class="n">n</span> <span class="o">=</span> <span class="mh">0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551</span>

<span class="n">qr_codes</span> <span class="o">=</span> <span class="p">[</span>
    <span class="s">"HC1:NCFOXN*TS0BIO DF+O/*G:ZH6I1$4JV7J$%25I3KC3183/9TL4T.B9NVPBLUD1VVY9C9Q $UQN1X1FIN9 UP.509Y4KCTSGO*LAHRIU-HOV1TU1+ZELX9JUPY0B3ZCH4BEWVN:2%S2ZCT-3TPM5YW46/2C4TK$2+2T:T27ALD-I:Z2ZW4:.AN4JX:S:+IZW4PHBO332Y8H00M:EJZIX4K*/6395J4I-B5ET42HPPEP58R8YG-LH/CJ/IE%TE6UG+ZEAT1HQ1:EG:0LPHN6D7LLK*2HG%89UV-0LZ 2UZ4+FJE 4Y3LL/II 0OC9JU0D0HT0HB2PR78DGFJQ8V*1ZZJXNB957Y3GFZRL12$KL0GE FV6YHZ-PS2L6X0Q5V:5S/H9JIVJJ5D0R%88GK61JFYO8L 983309O5A6DBK64GG0Q UL038000*DC .E"</span><span class="p">,</span>
    <span class="s">"HC1:NCFOXN*TS0BIO DQP4EVPAN9I6T5XH4PIQJAZGA+1V2:U:PI/E2$4JY/KZ%KY+GJLVQCN /KUYC7KNFRVFUN/Y06AL3*I+*GYZQFG9RQS7NV*CBCY0K1HJ9CHABVCNAC5ADNL3RL7OH*KC:7IZ6G6BIQ53UN8L68IM1L5T9MY47G6MQ+MN95ZTM9:N7755QLQQ5%YQ+GOVE5IE07EM2%KD+V-DN9B92FF9B9-V4WK1WAKT 456LQZ4D-4HRVUMNMD3323R13C C SI5K1*TB3:U-1VVS1UU15%HAMI PQVW5/O16%HAT1Z%PHOP+MMBT16Y5+Z9XV7N31$PRU2PVN5B.BAQIQME0RIH458.HRT3%:V$ZU$L65.4S4LY%CLM2GWAWLA:Z558PEU4YN9JOT3QK5GJ5AK73DQXGO6T UUG6H*59HB0:DCMHE"</span><span class="p">,</span>
<span class="p">]</span>

<span class="n">signatures</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">qr</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">qr_codes</span><span class="p">,</span> <span class="mi">1</span><span class="p">):</span>
    <span class="n">decoded</span> <span class="o">=</span> <span class="n">cbor2</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">zlib</span><span class="p">.</span><span class="n">decompress</span><span class="p">(</span><span class="n">base45</span><span class="p">.</span><span class="n">b45decode</span><span class="p">(</span><span class="n">qr</span><span class="p">[</span><span class="mi">4</span><span class="p">:])))</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">decoded</span><span class="p">,</span> <span class="n">cbor2</span><span class="p">.</span><span class="n">CBORTag</span><span class="p">)</span> <span class="ow">and</span> <span class="n">decoded</span><span class="p">.</span><span class="n">tag</span> <span class="o">==</span> <span class="mi">18</span><span class="p">:</span>
        <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">payload</span><span class="p">,</span> <span class="n">sig</span> <span class="o">=</span> <span class="n">decoded</span><span class="p">.</span><span class="n">value</span>
        <span class="n">r</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sig</span><span class="p">.</span><span class="nb">hex</span><span class="p">()[:</span><span class="mi">64</span><span class="p">],</span> <span class="mi">16</span><span class="p">)</span>
        <span class="n">s</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sig</span><span class="p">.</span><span class="nb">hex</span><span class="p">()[</span><span class="mi">64</span><span class="p">:],</span> <span class="mi">16</span><span class="p">)</span>
        <span class="n">signatures</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">'r'</span><span class="p">:</span> <span class="n">r</span><span class="p">,</span> <span class="s">'s'</span><span class="p">:</span> <span class="n">s</span><span class="p">,</span> <span class="s">'payload'</span><span class="p">:</span> <span class="n">payload</span><span class="p">}</span>

<span class="n">qr_items</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">signatures</span><span class="p">.</span><span class="n">items</span><span class="p">())</span>
<span class="n">r1</span><span class="p">,</span> <span class="n">s1</span><span class="p">,</span> <span class="n">payload1</span> <span class="o">=</span> <span class="n">qr_items</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="s">'r'</span><span class="p">],</span> <span class="n">qr_items</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="s">'s'</span><span class="p">],</span> <span class="n">qr_items</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="s">'payload'</span><span class="p">]</span>
<span class="n">r2</span><span class="p">,</span> <span class="n">s2</span><span class="p">,</span> <span class="n">payload2</span> <span class="o">=</span> <span class="n">qr_items</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="s">'r'</span><span class="p">],</span> <span class="n">qr_items</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="s">'s'</span><span class="p">],</span> <span class="n">qr_items</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">][</span><span class="s">'payload'</span><span class="p">]</span>

<span class="c1"># Reconstruct Sig_structure based on RFC8152
</span><span class="n">sig_struct7</span> <span class="o">=</span> <span class="n">cbor2</span><span class="p">.</span><span class="n">dumps</span><span class="p">([</span><span class="s">"Signature1"</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xa1\x01</span><span class="s">&amp;'</span><span class="p">,</span> <span class="sa">b</span><span class="s">''</span><span class="p">,</span> <span class="n">payload1</span><span class="p">])</span>
<span class="n">sig_struct9</span> <span class="o">=</span> <span class="n">cbor2</span><span class="p">.</span><span class="n">dumps</span><span class="p">([</span><span class="s">"Signature1"</span><span class="p">,</span> <span class="sa">b</span><span class="s">'</span><span class="se">\xa1\x01</span><span class="s">&amp;'</span><span class="p">,</span> <span class="sa">b</span><span class="s">''</span><span class="p">,</span> <span class="n">payload2</span><span class="p">])</span>

<span class="c1"># hash payloads (m1, m2)
</span><span class="n">h1</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">sig_struct7</span><span class="p">).</span><span class="n">digest</span><span class="p">(),</span> <span class="s">'big'</span><span class="p">)</span>
<span class="n">h2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="n">sig_struct9</span><span class="p">).</span><span class="n">digest</span><span class="p">(),</span> <span class="s">'big'</span><span class="p">)</span>

<span class="c1"># Recover  d
</span><span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">s2</span><span class="o">*</span><span class="n">h1</span> <span class="o">-</span> <span class="n">s1</span><span class="o">*</span><span class="n">h2</span><span class="p">)</span> <span class="o">*</span> <span class="nb">pow</span><span class="p">((</span><span class="n">r</span><span class="o">*</span><span class="p">(</span><span class="n">s1</span><span class="o">-</span><span class="n">s2</span><span class="p">)),</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Flag: </span><span class="si">{</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">d</span><span class="p">)[</span><span class="mi">2</span><span class="si">:</span><span class="p">]).</span><span class="n">decode</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="ECDSA" /><category term="Reused Nonce" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Signert Betaling (HelseCTF 2025)</title><link href="http://localhost:4000/signert-betaling/" rel="alternate" type="text/html" title="Signert Betaling (HelseCTF 2025)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/signert-betaling</id><content type="html" xml:base="http://localhost:4000/signert-betaling/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are provided with a link to a web-store and its source code. The store is a simple fruit shop where the user starts with a balance of 100, but to purchase the flag the balance must reach 110. The source code clearly shows the list of products including the flag, which costs 110, and the backend implementation. The code snippet defining the products is as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">varer</span> <span class="o">=</span> <span class="p">[</span>
    <span class="n">Vare</span><span class="p">(</span><span class="s">"Banan"</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="s">"God og gul"</span><span class="p">),</span>
    <span class="n">Vare</span><span class="p">(</span><span class="s">"Eple"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="s">"Sunt og godt"</span><span class="p">),</span>
    <span class="n">Vare</span><span class="p">(</span><span class="s">"Appelsin"</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="s">"Søt og saftig"</span><span class="p">),</span>
    <span class="n">Vare</span><span class="p">(</span><span class="s">"Pære"</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="s">"Saftig og god"</span><span class="p">),</span>
    <span class="n">Vare</span><span class="p">(</span><span class="s">"Kiwi"</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="s">"Grønn og god"</span><span class="p">),</span>
    <span class="n">Vare</span><span class="p">(</span><span class="s">"Ananas"</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="s">"Stor og rund"</span><span class="p">),</span>
    <span class="n">Vare</span><span class="p">(</span><span class="s">"Mango"</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="s">"Søt og god"</span><span class="p">),</span>
    <span class="n">Vare</span><span class="p">(</span><span class="s">"Drue"</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="s">"Liten og søt"</span><span class="p">),</span>
    <span class="n">Vare</span><span class="p">(</span><span class="s">"Flagg"</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">"FLAGG"</span><span class="p">])</span>
<span class="p">]</span>
</code></pre></div></div>

<p>The vulnerability stems from the cryptographic implementation in the session management code. The server uses AES-GCM for encrypting and signing session tokens, but the nonce is generated only once and then reused across all sessions. The relevant portion of the source code is:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nøkkel</span> <span class="o">=</span> <span class="n">byte_fra_ekte_slumptallsgenerator</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
<span class="n">engangsord</span> <span class="o">=</span> <span class="n">byte_fra_ekte_slumptallsgenerator</span><span class="p">(</span><span class="mi">12</span><span class="p">)</span>

<span class="n">klasse</span> <span class="n">AESGCMGrensesnitt</span><span class="p">(</span><span class="n">ØktGrensesnitt</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">open_session</span><span class="p">(</span><span class="n">selv</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">spørring</span><span class="p">):</span>
        <span class="n">økt</span> <span class="o">=</span> <span class="n">Økt</span><span class="p">({</span><span class="s">"saldo"</span><span class="p">:</span> <span class="mi">100</span><span class="p">})</span>
        <span class="n">hvis</span> <span class="s">'økt'</span><span class="p">.</span><span class="n">enkod</span><span class="p">().</span><span class="n">dekod</span><span class="p">(</span><span class="s">"latin-1"</span><span class="p">)</span> <span class="n">inni</span> <span class="n">spørring</span><span class="p">.</span><span class="n">cookies</span><span class="p">:</span>
            <span class="n">chiffer</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">nøkkel</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_GCM</span><span class="p">,</span> <span class="n">nonce</span><span class="o">=</span><span class="n">engangsord</span><span class="p">)</span>
            <span class="n">kryptert_økt</span><span class="p">,</span> <span class="n">økt_tagg</span> <span class="o">=</span> <span class="n">spørring</span><span class="p">.</span><span class="n">cookies</span><span class="p">[</span><span class="s">'økt'</span><span class="p">.</span><span class="n">enkod</span><span class="p">().</span><span class="n">dekod</span><span class="p">(</span><span class="s">"latin-1"</span><span class="p">)].</span><span class="n">splitt</span><span class="p">(</span><span class="s">"."</span><span class="p">)</span>
            <span class="n">prøv</span><span class="p">:</span>
                <span class="n">økt_data</span> <span class="o">=</span> <span class="n">chiffer</span><span class="p">.</span><span class="n">decrypt_and_verify</span><span class="p">(</span><span class="n">b64dekod</span><span class="p">(</span><span class="n">kryptert_økt</span> <span class="o">+</span> <span class="s">"=="</span><span class="p">),</span> <span class="n">b64dekod</span><span class="p">(</span><span class="n">økt_tagg</span> <span class="o">+</span> <span class="s">"=="</span><span class="p">))</span>
            <span class="n">unntatt</span> <span class="n">Verdifeil</span><span class="p">:</span>
                <span class="n">returner</span> <span class="n">økt</span>
            <span class="n">prøv</span><span class="p">:</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">last_json</span><span class="p">(</span><span class="n">økt_data</span><span class="p">.</span><span class="n">dekod</span><span class="p">())</span>
            <span class="n">unntatt</span> <span class="n">JSONDekodingsfeil</span><span class="p">:</span>
                <span class="n">returner</span> <span class="n">økt</span>
            <span class="n">økt</span><span class="p">.</span><span class="n">update</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
        <span class="n">returner</span> <span class="n">økt</span>
    
    <span class="k">def</span> <span class="nf">save_session</span><span class="p">(</span><span class="n">selv</span><span class="p">,</span> <span class="n">app</span><span class="p">,</span> <span class="n">økt</span><span class="p">,</span> <span class="n">svar</span><span class="p">):</span>
        <span class="n">chiffer</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">nøkkel</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_GCM</span><span class="p">,</span> <span class="n">nonce</span><span class="o">=</span><span class="n">engangsord</span><span class="p">)</span>
        <span class="n">kryptert_økt</span> <span class="o">=</span> <span class="n">chiffer</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">dump_json</span><span class="p">(</span><span class="n">økt</span><span class="p">).</span><span class="n">enkod</span><span class="p">())</span>
        <span class="n">økt_tagg</span> <span class="o">=</span> <span class="n">chiffer</span><span class="p">.</span><span class="n">digest</span><span class="p">()</span>
        <span class="n">svar</span><span class="p">.</span><span class="n">set_cookie</span><span class="p">(</span><span class="s">'økt'</span><span class="p">,</span> <span class="p">(</span><span class="n">b64enkod</span><span class="p">(</span><span class="n">kryptert_økt</span><span class="p">).</span><span class="n">stripp</span><span class="p">(</span><span class="sa">b</span><span class="s">"="</span><span class="p">)</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"."</span> <span class="o">+</span> <span class="n">b64enkod</span><span class="p">(</span><span class="n">økt_tagg</span><span class="p">).</span><span class="n">stripp</span><span class="p">(</span><span class="sa">b</span><span class="s">"="</span><span class="p">)).</span><span class="n">dekod</span><span class="p">())</span>
        <span class="n">returner</span> <span class="n">svar</span>  
</code></pre></div></div>

<p>Because the same nonce is reused for every session, the same keystream is produced for every encryption. This is detrimental for AES-GCM, and can allow for an attacker to encrypt and sign arbitrary plaintexts. We could for instance encrypt a plaintext cookie where the flag is in the cart.</p>

<h5 id="attack-overview">Attack overview</h5>

<p>The attack is carried out in several stages. First, a known plaintext-ciphertext pair is used to recover the keystream using the XOR operation.</p>

\[\large \text{keystream} = \text{plaintext} \oplus \text{ciphertext}\]

<p>This keystream is then used to produce the ciphertext for an arbitrary plaintext. Next, two messages encrypted with the same nonce yield authentication tags $T_1$ and $T_{2}$. In AES-GCM the authentication tag is computed as:</p>

\[\large T = GHASH \oplus E_k(y_0)\]

<p>where $GHASH$ is a polynomial hash over $GF(2^{128})$, and $E_k(y_0)$ is the encryption of the initial counter block. In our vulnerable implementation the nonce is reused, so the initial counter block $y_0$ remains constant between messages. This implies that $E_k(y_0)$ is the same for all messages.</p>

<p>Consider two messages with tags $T_1$ and $T_2$. Their tags are computed as:</p>

\[\large \begin{align}
\nonumber T_1 = GHASH_1 \oplus E_k(y_0) \\
\nonumber T_2 = GHASH_2 \oplus E_k(y_0)
\end{align}\]

<p>where $GHASH_1$ and $GHASH_2$ are the polynomial hashes of the corresponding ciphertexts.
Since $E_k(y_0)$ is identical for both messages, XORing the two equations cancels this term:</p>

\[\large T_1 \oplus T_2 = GHASH_1 \oplus GHASH_2\]

<p>The $GHASH$ function is defined by interpreting the ciphertext (and a length block) as coefficients of a polynomial in $H$. For example, a typical computation might be structured as:</p>

\[\large GHASH = C_0 \cdot H^4 \oplus C_1 \cdot H^3 \oplus C_2 \cdot H^2 \oplus L \cdot H\]

<p>where $C_i$ are the ciphertext blocks and $L$ is a constant derived from the lengths of the ciphertext and any associated data.
When the difference $GHASH_1 \oplus GHASH_2$ is computed, the result is a polynomial $P(H)$ in $H$ such that $P(H)=0$. This equation encapsulates the differences between the two message authentications and depends solely on $H$. By expressing the known values (the ciphertext blocks and the tags) in polynomial form, the resulting equation is solved over $GF(2^{128})$. Once the correct $H$ is recovered, it can be used to compute valid authentication tags for any forged message. This allows an attacker to create a session token that appears valid to the server, effectively bypassing the integrity of AES-GCM when the nonce is reused.</p>

<h5 id="attack-implementation">Attack Implementation</h5>

<p>The attack will require two ciphertexts $C_{1}$ and $C_{2}$, their tags $T_{1}$ and $T_{2}$, as well as the forged ciphertext $C_{3}$. <code class="language-plaintext highlighter-rouge">Flagg</code> is 5 characters, so we can put another 5-character item like <code class="language-plaintext highlighter-rouge">Banan</code> in our cart to get $C_{1}$ and forge $C_{3}$ like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">xor</span>
<span class="kn">import</span> <span class="nn">base64</span>

<span class="n">P1</span> <span class="o">=</span> <span class="s">"{'saldo': 90, 'varer': ['Banan']}"</span>
<span class="n">C1</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s">"BmKtIdhBoEBaFnYVEwou8RaQhFL8rZIZax/w+t0VBNLr=="</span><span class="p">)</span>
<span class="n">keystream</span> <span class="o">=</span> <span class="n">xor</span><span class="p">(</span><span class="n">C1</span><span class="p">,</span><span class="n">P1</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>

<span class="n">C3</span> <span class="o">=</span> <span class="s">"{'saldo': 99, 'varer': ['Flagg']}"</span>
<span class="k">print</span><span class="p">(</span><span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">xor</span><span class="p">(</span><span class="n">C3</span><span class="p">,</span> <span class="n">keystream</span><span class="p">)).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># BmKtIdhBoEBaFnYcEwou8RaQhFL8rZIZaxv99dscBNLr
</span></code></pre></div></div>

<p>We also get $C_{2}$ for the item <code class="language-plaintext highlighter-rouge">Mango</code>. We can now follow the SageMath approach in https://meowmeowxw.gitlab.io/ctf/utctf-2020-crypto/.</p>

<p>The script automates the attack by converting the ciphertext blocks into polynomials, constructing the GHASH polynomial equations, and solving for the GHASH key $H$. The function that converts a 16-byte block into a polynomial is defined as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bytes_to_polynomial</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
    <span class="n">poly</span> <span class="o">=</span> <span class="mi">0</span> 
    <span class="n">bin_block</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">block</span><span class="p">))[</span><span class="mi">2</span> <span class="p">:].</span><span class="n">zfill</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bin_block</span><span class="p">)):</span>
        <span class="n">poly</span> <span class="o">+=</span> <span class="n">a</span><span class="o">^</span><span class="n">i</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">bin_block</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">poly</span>
</code></pre></div></div>

<p>This conversion enables arithmetic in the finite field where XOR corresponds to addition and carry-less multiplication corresponds to polynomial multiplication. The script also splits ciphertexts into 16-byte blocks for conversion:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">convert_to_blocks</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">ciphertext</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">16</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span> <span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">),</span> <span class="mi">16</span><span class="p">)]</span>
</code></pre></div></div>

<p>For each message the script constructs a polynomial representing the GHASH computation using the ciphertext blocks, a length block, and the authentication tag. It then adds the polynomials from two messages to cancel the constant term, forming a polynomial equation with H as roots. For every candidate root, a new tag $T_3$ is computed for the forged message (the session containing the flag) as follows:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">H</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">P</span><span class="p">.</span><span class="n">roots</span><span class="p">():</span>
    <span class="n">EJ</span> <span class="o">=</span> <span class="n">G_1</span><span class="p">(</span><span class="n">H</span><span class="p">)</span>
    <span class="n">T3</span> <span class="o">=</span> <span class="n">G_3</span><span class="p">(</span><span class="n">H</span><span class="p">)</span> <span class="o">+</span> <span class="n">EJ</span>
    <span class="n">tag</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">polynomial_to_bytes</span><span class="p">(</span><span class="n">T3</span><span class="p">)).</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">(</span><span class="s">"="</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Potential cookie: BmKtIdhBoEBaFnYcEwou8RaQhFL8rZIZaxv99dscBNLr.</span><span class="si">{</span><span class="n">tag</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="c1"># Potential cookie: BmKtIdhBoEBaFnYcEwou8RaQhFL8rZIZaxv99dscBNLr.oMavgKEW1cPwEbQYN7kR+g
</span></code></pre></div></div>

<p>We can then set this cookie manually and visit <code class="language-plaintext highlighter-rouge">/mine_varer</code>, and the flag will be in our cart!</p>

<p>Flag: <code class="language-plaintext highlighter-rouge">helsectf{1kk3_r3s1rkul3r_d1n3_3ng4ng50rd}</code></p>

<h5 id="solvesage">Solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sage.all</span> <span class="kn">import</span> <span class="o">*</span>  
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span>
<span class="kn">import</span> <span class="nn">struct</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">xor</span>
<span class="kn">import</span> <span class="nn">base64</span>

<span class="k">def</span> <span class="nf">bytes_to_polynomial</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">a</span><span class="p">):</span>
    <span class="n">poly</span> <span class="o">=</span> <span class="mi">0</span> 
    <span class="n">bin_block</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">block</span><span class="p">))[</span><span class="mi">2</span> <span class="p">:].</span><span class="n">zfill</span><span class="p">(</span><span class="mi">128</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">bin_block</span><span class="p">)):</span>
        <span class="n">poly</span> <span class="o">+=</span> <span class="n">a</span><span class="o">^</span><span class="n">i</span> <span class="o">*</span> <span class="nb">int</span><span class="p">(</span><span class="n">bin_block</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">poly</span>

<span class="k">def</span> <span class="nf">polynomial_to_bytes</span><span class="p">(</span><span class="n">poly</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="nb">bin</span><span class="p">(</span><span class="n">poly</span><span class="p">.</span><span class="n">to_integer</span><span class="p">())[</span><span class="mi">2</span><span class="p">:].</span><span class="n">zfill</span><span class="p">(</span><span class="mi">128</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="mi">2</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">convert_to_blocks</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">ciphertext</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">16</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span> <span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">),</span> <span class="mi">16</span><span class="p">)]</span>

<span class="n">F</span><span class="p">,</span> <span class="n">a</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="mi">2</span><span class="o">^</span><span class="mi">128</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"a"</span><span class="p">,</span> <span class="n">modulus</span><span class="o">=</span><span class="n">x</span><span class="o">^</span><span class="mi">128</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">7</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">).</span><span class="n">objgen</span><span class="p">()</span>
<span class="n">R</span><span class="p">,</span> <span class="n">x</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">"x"</span><span class="p">).</span><span class="n">objgen</span><span class="p">()</span>

<span class="n">C1</span> <span class="o">=</span> <span class="n">convert_to_blocks</span><span class="p">(</span><span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s">"BmKtIdhBoEBaFnYVEwou8RaQhFL8rZIZax/w+t0VBNLr=="</span><span class="p">))</span> <span class="c1"># {'saldo': 90, 'varer': ['Banan']}
</span><span class="n">T1</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s">"xUnFMnilk9J9z+1goZYcdA=="</span><span class="p">)</span> <span class="c1"># Tag for C1
</span><span class="n">C2</span> <span class="o">=</span> <span class="n">convert_to_blocks</span><span class="p">(</span><span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s">"BmKtIdhBoEBaFncVEwou8RaQhFL8rZIZaxDw+tsUBNLr=="</span><span class="p">))</span> <span class="c1"># {'saldo': 80, 'varer': ['Mango']}
</span><span class="n">T2</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s">"hK4GROnNzWz38mQMV9WaYA=="</span><span class="p">)</span> <span class="c1"># Tag for C2
</span><span class="n">C3</span> <span class="o">=</span> <span class="n">convert_to_blocks</span><span class="p">(</span><span class="n">base64</span><span class="p">.</span><span class="n">b64decode</span><span class="p">(</span><span class="s">"BmKtIdhBoEBaFnYcEwou8RaQhFL8rZIZaxv99dscBNLr=="</span><span class="p">))</span> <span class="c1"># {'saldo': 99, 'varer': ['Flagg']}
</span>
<span class="n">L</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">pack</span><span class="p">(</span><span class="s">"&gt;QQ"</span><span class="p">,</span> <span class="mi">0</span> <span class="o">*</span> <span class="mi">8</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">C1</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span><span class="p">)</span>
<span class="n">C1_p</span> <span class="o">=</span> <span class="p">[</span><span class="n">bytes_to_polynomial</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">C1</span><span class="p">]</span>
<span class="n">C2_p</span> <span class="o">=</span> <span class="p">[</span><span class="n">bytes_to_polynomial</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">C2</span><span class="p">]</span>
<span class="n">C3_p</span> <span class="o">=</span> <span class="p">[</span><span class="n">bytes_to_polynomial</span><span class="p">(</span><span class="n">block</span><span class="p">,</span> <span class="n">a</span><span class="p">)</span> <span class="k">for</span> <span class="n">block</span> <span class="ow">in</span> <span class="n">C3</span><span class="p">]</span>
<span class="n">T1_p</span> <span class="o">=</span>  <span class="n">bytes_to_polynomial</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span>    <span class="n">a</span><span class="p">)</span>
<span class="n">T2_p</span> <span class="o">=</span>  <span class="n">bytes_to_polynomial</span><span class="p">(</span><span class="n">T2</span><span class="p">,</span>    <span class="n">a</span><span class="p">)</span>
<span class="n">L_p</span>  <span class="o">=</span>  <span class="n">bytes_to_polynomial</span><span class="p">(</span><span class="n">L</span><span class="p">,</span>     <span class="n">a</span><span class="p">)</span>

<span class="n">G_1</span> <span class="o">=</span> <span class="p">(</span><span class="n">C1_p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">C1_p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">C1_p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">L_p</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">T1_p</span>
<span class="n">G_2</span> <span class="o">=</span> <span class="p">(</span><span class="n">C2_p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">C2_p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">C2_p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">L_p</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="n">T2_p</span>
<span class="n">G_3</span> <span class="o">=</span> <span class="p">(</span><span class="n">C3_p</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">C3_p</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">C3_p</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">L_p</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span>
<span class="n">P</span>   <span class="o">=</span> <span class="n">G_1</span> <span class="o">+</span> <span class="n">G_2</span>

<span class="k">for</span> <span class="n">H</span><span class="p">,</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">P</span><span class="p">.</span><span class="n">roots</span><span class="p">():</span>
    <span class="n">EJ</span> <span class="o">=</span> <span class="n">G_1</span><span class="p">(</span><span class="n">H</span><span class="p">)</span>
    <span class="n">T3</span> <span class="o">=</span> <span class="n">G_3</span><span class="p">(</span><span class="n">H</span><span class="p">)</span> <span class="o">+</span> <span class="n">EJ</span>
    <span class="n">tag</span> <span class="o">=</span> <span class="n">base64</span><span class="p">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">polynomial_to_bytes</span><span class="p">(</span><span class="n">T3</span><span class="p">)).</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">(</span><span class="s">"="</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Potential cookie: BmKtIdhBoEBaFnYcEwou8RaQhFL8rZIZaxv99dscBNLr.</span><span class="si">{</span><span class="n">tag</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="AES-GCM" /><category term="Reused Nonce" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Learning with Elliptic Curves (HelseCTF 2025)</title><link href="http://localhost:4000/learning-with-elliptic-curves/" rel="alternate" type="text/html" title="Learning with Elliptic Curves (HelseCTF 2025)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/learning-with-elliptic-curves</id><content type="html" xml:base="http://localhost:4000/learning-with-elliptic-curves/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the following python source code, along with the output.txt</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">sage.all</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">random</span> <span class="kn">import</span> <span class="n">randint</span>
<span class="kn">from</span> <span class="nn">hemmelig</span> <span class="kn">import</span> <span class="n">flagg</span>

<span class="n">p</span> <span class="o">=</span> <span class="mi">39761755302725183918693591729206126391094688519137850931996389197052105934335057950945885109127019315116708698582684135940731</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">37470413545164594923241940723449977961814431955261347161951289533994732796785078955994373335971437954627235171462939970255523</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">33862474237826219764283873646917712191796653587975971730267794592641857158089029148517141460472220490573591617494610494543421</span> 

<span class="n">gf</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">gf</span><span class="p">,</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">])</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">gen</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"G = </span><span class="si">{</span><span class="n">G</span><span class="p">.</span><span class="n">xy</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">offentlig_nøkkel</span> <span class="o">=</span> <span class="p">[</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">*</span> <span class="n">G</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">flagg</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"offentlig_nøkkel = </span><span class="si">{</span><span class="p">[</span><span class="n">P</span><span class="p">.</span><span class="n">xy</span><span class="p">()</span> <span class="k">for</span> <span class="n">P</span> <span class="ow">in</span> <span class="n">offentlig_nøkkel</span><span class="p">]</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="n">hemmelighet</span> <span class="o">=</span> <span class="p">[</span><span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">flagg</span><span class="p">]</span>
<span class="n">error</span> <span class="o">=</span> <span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span> <span class="o">*</span> <span class="n">G</span>

<span class="n">resultat</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">o</span> <span class="o">*</span> <span class="n">h</span> <span class="k">for</span> <span class="n">o</span><span class="p">,</span> <span class="n">h</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">offentlig_nøkkel</span><span class="p">,</span> <span class="n">hemmelighet</span><span class="p">))</span> <span class="o">+</span> <span class="n">error</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"resultat = </span><span class="si">{</span><span class="n">resultat</span><span class="p">.</span><span class="n">xy</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>This is a Learning with Errors type of challenge, but based on elliptic curve arithmetic. We are given the public key consisting of a random point on the curve $E$ for each character in the flag. We are also given point $resultat$ from the LWE-looking equation. The encryption is essentially:</p>

\[\large resultat = \left( \sum_{i=0}^{n-1} o_{i}\cdot h_{i} \right) + error\]

<p>But since $h_{i}$ is just a small integer value, and each point in the public key is computed as</p>

\[\large r_{i}\cdot G\]

<p>Where $r_{i}$ is a random integer, we can rewrite as</p>

\[\large resultat = \left( \sum_{i=0}^{n-1} r_{i}\cdot h_{i} + e\right) \cdot G\]

<p>This means we could potentially compute the discrete logarithm for $resultat$ to unwrap the elliptic curve arithmetic back into an integer equation. We can also compute the discrete logarithm of the public key points $o_{i}$ with respect to $G$ to recover $r_{i}$, which would leave us with an equation of the form</p>

\[\large X = \sum_{i=0}^{n-1} r_{i}\cdot h_{i}+e \mod order(G)\]

<p>The equation is a modular linear equation with small unknowns. We can utilize this solver: https://github.com/nneonneo/pwn-stuff/blob/main/math/solvelinmod.py, but we need to make some preparations first.</p>

<p>Normally, the discrete logarithm problem can be quite tricky to solve. However, in our case, the order of curve $E$ is very smooth:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">factor</span><span class="p">(</span><span class="n">E</span><span class="p">.</span><span class="n">order</span><span class="p">())</span>
<span class="mi">2</span><span class="o">^</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">7</span> <span class="o">*</span> <span class="mi">11</span> <span class="o">*</span> <span class="mi">13</span> <span class="o">*</span> <span class="mi">19</span> <span class="o">*</span> <span class="mi">31</span> <span class="o">*</span> <span class="mi">59</span> <span class="o">*</span> <span class="mi">67</span> <span class="o">*</span> <span class="mi">79</span> <span class="o">*</span> <span class="mi">101</span> <span class="o">*</span> <span class="mi">103</span> <span class="o">*</span> <span class="mi">139</span> <span class="o">*</span> <span class="mi">179</span> <span class="o">*</span> <span class="mi">233</span> <span class="o">*</span> <span class="mi">241</span> <span class="o">*</span> <span class="mi">269</span> <span class="o">*</span> <span class="mi">271</span> <span class="o">*</span> <span class="mi">283</span><span class="o">^</span><span class="mi">4</span> <span class="o">*</span> <span class="mi">419</span> <span class="o">*</span> <span class="mi">431</span> <span class="o">*</span> <span class="mi">439</span> <span class="o">*</span> <span class="mi">463</span> <span class="o">*</span> <span class="mi">509</span> <span class="o">*</span> <span class="mi">563</span> <span class="o">*</span> <span class="mi">571</span> <span class="o">*</span> <span class="mi">617</span><span class="o">^</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">641</span><span class="o">^</span><span class="mi">3</span> <span class="o">*</span> <span class="mi">659</span> <span class="o">*</span> <span class="mi">691</span> <span class="o">*</span> <span class="mi">719</span> <span class="o">*</span> <span class="mi">733</span><span class="o">^</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">739</span> <span class="o">*</span> <span class="mi">743</span><span class="o">^</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">761</span> <span class="o">*</span> <span class="mi">773</span> <span class="o">*</span> <span class="mi">797</span> <span class="o">*</span> <span class="mi">821</span> <span class="o">*</span> <span class="mi">823</span><span class="o">^</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">829</span> <span class="o">*</span> <span class="mi">929</span> <span class="o">*</span> <span class="mi">937</span> <span class="o">*</span> <span class="mi">977</span>
</code></pre></div></div>

<p>meaning it is easy to solve with something like Pohlig-Hellman.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Computing discrete logs for public keys ..."</span><span class="p">)</span>
<span class="n">r_values</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">P</span> <span class="ow">in</span> <span class="n">offentlig_nøkkel</span><span class="p">:</span>
	<span class="n">r</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">operation</span><span class="o">=</span><span class="s">"+"</span><span class="p">)</span>
	<span class="n">r_values</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>

<span class="n">order</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="n">order</span><span class="p">()</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">resultat</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">operation</span><span class="o">=</span><span class="s">"+"</span><span class="p">)</span>
</code></pre></div></div>

<p>We can now begin to set up the equation for $X$ where we wish to solve for the unknown flag characters $h_{i}$.
Firstly, we must define some variables to represent the unknowns:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">r_values</span><span class="p">)</span>
<span class="n">flag_vars</span> <span class="o">=</span> <span class="p">[</span><span class="n">var</span><span class="p">(</span><span class="sa">f</span><span class="s">"x</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">e_var</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">"e"</span><span class="p">)</span>
</code></pre></div></div>

<p>We can now express our equation as</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">equation</span> <span class="o">=</span> <span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">r_values</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">flag_vars</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="o">+</span> <span class="n">e_var</span> <span class="o">==</span> <span class="n">X</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<p>Lastly, we need to define the bounds of possible values for the unknowns. We know $h_{i}$ are the numerical ascii codes for the flag characters, which means the possible values are between $0, 256$ (we could in reality assume that its between $32, 126$ for printable characters). And from the source code, we already know the error value $e$ is between $-1000, 1000$.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">flag_vars</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)}</span>
<span class="n">bounds</span><span class="p">[</span><span class="n">e_var</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span> <span class="c1"># (min, expected, max)
</span></code></pre></div></div>

<p>And with everything set up, we can now utilize the linmod solver after it has been imported:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Solving modular linear equation using lattice reduction..."</span><span class="p">)</span>
<span class="n">solution</span> <span class="o">=</span> <span class="n">solve_linear_mod</span><span class="p">([</span><span class="n">equation</span><span class="p">],</span> <span class="n">bounds</span><span class="p">)</span>
<span class="n">recovered_flag</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">solution</span><span class="p">[</span><span class="n">flag_vars</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Recovered flag: </span><span class="si">{</span><span class="n">recovered_flag</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="c1">#Recovered flag: helsectf{Ell1pt15k3_kurv3r_3r_l1vet!}
</span></code></pre></div></div>

<h5 id="solvesage">Solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">collections.abc</span> <span class="kn">import</span> <span class="n">Sequence</span>
<span class="kn">import</span> <span class="nn">math</span>
<span class="kn">import</span> <span class="nn">operator</span>
<span class="kn">from</span> <span class="nn">typing</span> <span class="kn">import</span> <span class="n">List</span><span class="p">,</span> <span class="n">Tuple</span>

<span class="kn">from</span> <span class="nn">sage.all</span> <span class="kn">import</span> <span class="n">ZZ</span><span class="p">,</span> <span class="n">gcd</span><span class="p">,</span> <span class="n">matrix</span><span class="p">,</span> <span class="n">prod</span><span class="p">,</span> <span class="n">var</span>

<span class="c1"># Solver from: https://github.com/nneonneo/pwn-stuff/blob/main/math/solvelinmod.py
</span><span class="k">def</span> <span class="nf">_process_linear_equations</span><span class="p">(</span><span class="n">equations</span><span class="p">,</span> <span class="nb">vars</span><span class="p">,</span> <span class="n">guesses</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">List</span><span class="p">[</span><span class="n">Tuple</span><span class="p">[</span><span class="n">List</span><span class="p">[</span><span class="nb">int</span><span class="p">],</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">int</span><span class="p">]]:</span>
    <span class="n">result</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">for</span> <span class="n">rel</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">equations</span><span class="p">:</span>
        <span class="n">op</span> <span class="o">=</span> <span class="n">rel</span><span class="p">.</span><span class="n">operator</span><span class="p">()</span>
        <span class="k">if</span> <span class="n">op</span> <span class="ow">is</span> <span class="ow">not</span> <span class="n">operator</span><span class="p">.</span><span class="n">eq</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">TypeError</span><span class="p">(</span><span class="sa">f</span><span class="s">"relation </span><span class="si">{</span><span class="n">rel</span><span class="si">}</span><span class="s">: not an equality relation"</span><span class="p">)</span>

        <span class="n">expr</span> <span class="o">=</span> <span class="p">(</span><span class="n">rel</span> <span class="o">-</span> <span class="n">rel</span><span class="p">.</span><span class="n">rhs</span><span class="p">()).</span><span class="n">lhs</span><span class="p">().</span><span class="n">expand</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="n">expr</span><span class="p">.</span><span class="n">variables</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">var</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">vars</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s">"relation </span><span class="si">{</span><span class="n">rel</span><span class="si">}</span><span class="s">: variable </span><span class="si">{</span><span class="n">var</span><span class="si">}</span><span class="s"> is not bounded"</span><span class="p">)</span>

        <span class="c1"># Fill in eqns block of B
</span>        <span class="n">coeffs</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="nb">vars</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">expr</span><span class="p">.</span><span class="n">degree</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s">"relation </span><span class="si">{</span><span class="n">rel</span><span class="si">}</span><span class="s">: equation is not linear in </span><span class="si">{</span><span class="n">var</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
            <span class="n">coeff</span> <span class="o">=</span> <span class="n">expr</span><span class="p">.</span><span class="n">coefficient</span><span class="p">(</span><span class="n">var</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">coeff</span><span class="p">.</span><span class="n">is_constant</span><span class="p">():</span>
                <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s">"relation </span><span class="si">{</span><span class="n">rel</span><span class="si">}</span><span class="s">: coefficient of </span><span class="si">{</span><span class="n">var</span><span class="si">}</span><span class="s"> is not constant (equation is not linear)"</span><span class="p">)</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">coeff</span><span class="p">.</span><span class="n">is_integer</span><span class="p">():</span>
                <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s">"relation </span><span class="si">{</span><span class="n">rel</span><span class="si">}</span><span class="s">: coefficient of </span><span class="si">{</span><span class="n">var</span><span class="si">}</span><span class="s"> is not an integer"</span><span class="p">)</span>

            <span class="n">coeff</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">coeff</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
                <span class="n">coeff</span> <span class="o">%=</span> <span class="n">m</span>
            <span class="n">coeffs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">coeff</span><span class="p">)</span>

        <span class="c1"># Shift variables towards their guesses to reduce the (expected) length of the solution vector
</span>        <span class="n">const</span> <span class="o">=</span> <span class="n">expr</span><span class="p">.</span><span class="n">subs</span><span class="p">({</span><span class="n">var</span><span class="p">:</span> <span class="n">guesses</span><span class="p">[</span><span class="n">var</span><span class="p">]</span> <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="nb">vars</span><span class="p">})</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">const</span><span class="p">.</span><span class="n">is_constant</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s">"relation </span><span class="si">{</span><span class="n">rel</span><span class="si">}</span><span class="s">: failed to extract constant"</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">const</span><span class="p">.</span><span class="n">is_integer</span><span class="p">():</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s">"relation </span><span class="si">{</span><span class="n">rel</span><span class="si">}</span><span class="s">: constant is not integer"</span><span class="p">)</span>

        <span class="n">const</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">const</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="n">const</span> <span class="o">%=</span> <span class="n">m</span>

        <span class="n">result</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">coeffs</span><span class="p">,</span> <span class="n">const</span><span class="p">,</span> <span class="n">m</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">result</span>


<span class="k">def</span> <span class="nf">solve_linear_mod</span><span class="p">(</span><span class="n">equations</span><span class="p">,</span> <span class="n">bounds</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">use_flatter</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="o">**</span><span class="n">lll_args</span><span class="p">):</span>
    <span class="s">"""Solve an arbitrary system of modular linear equations over different moduli.

    equations: A sequence of (lhs == rhs, M) pairs, where lhs and rhs are expressions and M is the modulus.
        M may be None to indicate that the equation is not modular.
    bounds: A dictionary of {var: B} entries, where var is a variable and B is the bounds on that variable.
        Bounds may be specified in one of three ways:
        - A single integer X: Variable is assumed to be uniformly distributed in [0, X] with an expected value of X/2.
        - A tuple of integers (X, Y): Variable is assumed to be uniformly distributed in [X, Y] with an expected value of (X + Y)/2.
        - A tuple of integers (X, E, Y): Variable is assumed to be bounded within [X, Y] with an expected value of E.
        All variables used in the equations must be bounded.
    verbose: set to True to enable additional output
    use_flatter: set to True to use [flatter](https://github.com/keeganryan/flatter), which is much faster
    lll_args: Additional arguments passed to LLL, for advanced usage.

    NOTE: Bounds are *soft*. This function may return solutions above the bounds. If this happens, and the result
    is incorrect, make some bounds tighter and try again.

    Tip: if you get an unwanted solution, try setting the expected values to that solution to force this function
    to produce a different solution.

    Tip: if your bounds are loose and you just want small solutions, set the expected values to zero for all
    loosely-bounded variables.

    &gt;&gt;&gt; k = var('k')
    &gt;&gt;&gt; # solve CRT
    &gt;&gt;&gt; solve_linear_mod([(k == 2, 3), (k == 4, 5), (k == 3, 7)], {k: 3*5*7})
    {k: 59}

    &gt;&gt;&gt; x,y = var('x,y')
    &gt;&gt;&gt; solve_linear_mod([(2*x + 3*y == 7, 11), (3*x + 5*y == 3, 13), (2*x + 5*y == 6, 143)], {x: 143, y: 143})
    {x: 62, y: 5}

    &gt;&gt;&gt; x,y = var('x,y')
    &gt;&gt;&gt; # we can also solve homogenous equations, provided the guesses are zeroed
    &gt;&gt;&gt; solve_linear_mod([(2*x + 5*y == 0, 1337)], {x: 5, y: 5}, guesses={x: 0, y: 0})
    {x: 5, y: -2}
    """</span>

    <span class="c1"># The general idea is to set up an integer matrix equation Ax=y by introducing extra variables for the quotients,
</span>    <span class="c1"># then use LLL to solve the equation. We introduce extra axes in the lattice to observe the actual solution x,
</span>    <span class="c1"># which works so long as the solutions are known to be bounded (which is of course the case for modular equations).
</span>    <span class="c1"># Scaling factors are configured to generally push the smallest vectors to have zeros for the relations, and to
</span>    <span class="c1"># scale disparate variables to approximately the same base.
</span>
    <span class="nb">vars</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">bounds</span><span class="p">)</span>
    <span class="n">guesses</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">var_scale</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">var</span> <span class="ow">in</span> <span class="nb">vars</span><span class="p">:</span>
        <span class="n">bound</span> <span class="o">=</span> <span class="n">bounds</span><span class="p">[</span><span class="n">var</span><span class="p">]</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">bound</span><span class="p">,</span> <span class="p">(</span><span class="nb">tuple</span><span class="p">,</span> <span class="nb">list</span><span class="p">)):</span>
            <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">bound</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">bound</span><span class="p">)</span>
                <span class="n">guess</span> <span class="o">=</span> <span class="p">(</span><span class="n">xmax</span> <span class="o">-</span> <span class="n">xmin</span><span class="p">)</span> <span class="o">//</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">xmin</span>
            <span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="n">bound</span><span class="p">)</span> <span class="o">==</span> <span class="mi">3</span><span class="p">:</span>
                <span class="n">xmin</span><span class="p">,</span> <span class="n">guess</span><span class="p">,</span> <span class="n">xmax</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">bound</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">raise</span> <span class="nb">TypeError</span><span class="p">(</span><span class="s">"Bounds must be integers, 2-tuples or 3-tuples"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">xmin</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">xmax</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">bound</span><span class="p">)</span>
            <span class="n">guess</span> <span class="o">=</span> <span class="n">xmax</span> <span class="o">//</span> <span class="mi">2</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">xmin</span> <span class="o">&lt;=</span> <span class="n">guess</span> <span class="o">&lt;=</span> <span class="n">xmax</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="s">"Bound for variable </span><span class="si">{</span><span class="n">var</span><span class="si">}</span><span class="s"> is invalid (</span><span class="si">{</span><span class="n">xmin</span><span class="o">=</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">guess</span><span class="o">=</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">xmax</span><span class="o">=</span><span class="si">}</span><span class="s">)"</span><span class="p">)</span>
        <span class="n">var_scale</span><span class="p">[</span><span class="n">var</span><span class="p">]</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">xmax</span> <span class="o">-</span> <span class="n">guess</span><span class="p">,</span> <span class="n">guess</span> <span class="o">-</span> <span class="n">xmin</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">guesses</span><span class="p">[</span><span class="n">var</span><span class="p">]</span> <span class="o">=</span> <span class="n">guess</span>

    <span class="n">var_bits</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">log2</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">prod</span><span class="p">(</span><span class="n">var_scale</span><span class="p">.</span><span class="n">values</span><span class="p">())))</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="nb">vars</span><span class="p">)</span>
    <span class="n">mod_bits</span> <span class="o">=</span> <span class="n">math</span><span class="p">.</span><span class="n">log2</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">prod</span><span class="p">(</span><span class="n">m</span> <span class="k">for</span> <span class="n">rel</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">equations</span> <span class="k">if</span> <span class="n">m</span><span class="p">)))</span>
    <span class="k">if</span> <span class="n">verbose</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"verbose: variable entropy: </span><span class="si">{</span><span class="n">var_bits</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> bits"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"verbose: modulus entropy: </span><span class="si">{</span><span class="n">mod_bits</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s"> bits"</span><span class="p">)</span>

    <span class="c1"># Extract coefficients from equations
</span>    <span class="n">equation_coeffs</span> <span class="o">=</span> <span class="n">_process_linear_equations</span><span class="p">(</span><span class="n">equations</span><span class="p">,</span> <span class="nb">vars</span><span class="p">,</span> <span class="n">guesses</span><span class="p">)</span>

    <span class="n">is_inhom</span> <span class="o">=</span> <span class="nb">any</span><span class="p">(</span><span class="n">const</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">coeffs</span><span class="p">,</span> <span class="n">const</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">equation_coeffs</span><span class="p">)</span>
    <span class="n">mod_count</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="mi">1</span> <span class="k">for</span> <span class="n">coeffs</span><span class="p">,</span> <span class="n">const</span><span class="p">,</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">equation_coeffs</span> <span class="k">if</span> <span class="n">m</span><span class="p">)</span>

    <span class="n">NR</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">equation_coeffs</span><span class="p">)</span>
    <span class="n">NV</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="nb">vars</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">is_inhom</span><span class="p">:</span>
        <span class="c1"># Add one dummy variable for the constant term.
</span>        <span class="n">NV</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="n">ZZ</span><span class="p">,</span> <span class="n">mod_count</span> <span class="o">+</span> <span class="n">NV</span><span class="p">,</span> <span class="n">NR</span> <span class="o">+</span> <span class="n">NV</span><span class="p">)</span>

    <span class="c1"># B format (rows are the basis for the lattice):
</span>    <span class="c1"># [ mods:NRxNR 0
</span>    <span class="c1">#   eqns:NVxNR vars:NVxNV ]
</span>    <span class="c1"># eqns correspond to equation axes, fi(...) = yi mod mi
</span>    <span class="c1"># vars correspond to variable axes, which effectively "observe" elements of the solution vector (x in Ax=y)
</span>    <span class="c1"># mods and vars are diagonal, so this matrix is lower triangular.
</span>
    <span class="c1"># Compute maximum scale factor over all variables
</span>    <span class="n">S</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">var_scale</span><span class="p">.</span><span class="n">values</span><span class="p">())</span>

    <span class="c1"># Compute equation scale such that the bounded solution vector (equation columns all zero)
</span>    <span class="c1"># will be shorter than any vector that has a nonzero equation column
</span>    <span class="n">eqS</span> <span class="o">=</span> <span class="n">S</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">NR</span> <span class="o">+</span> <span class="n">NV</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="c1"># If the equation is underconstrained, add additional scaling to find a solution anyway
</span>    <span class="k">if</span> <span class="n">var_bits</span> <span class="o">&gt;</span> <span class="n">mod_bits</span><span class="p">:</span>
        <span class="n">eqS</span> <span class="o">&lt;&lt;=</span> <span class="nb">int</span><span class="p">((</span><span class="n">var_bits</span> <span class="o">-</span> <span class="n">mod_bits</span><span class="p">)</span> <span class="o">/</span> <span class="n">NR</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">col_scales</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="n">mi</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">ri</span><span class="p">,</span> <span class="p">(</span><span class="n">coeffs</span><span class="p">,</span> <span class="n">const</span><span class="p">,</span> <span class="n">m</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">equation_coeffs</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">vi</span><span class="p">,</span> <span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">coeffs</span><span class="p">):</span>
            <span class="n">B</span><span class="p">[</span><span class="n">mod_count</span> <span class="o">+</span> <span class="n">vi</span><span class="p">,</span> <span class="n">ri</span><span class="p">]</span> <span class="o">=</span> <span class="n">c</span>
        <span class="k">if</span> <span class="n">is_inhom</span><span class="p">:</span>
            <span class="n">B</span><span class="p">[</span><span class="n">mod_count</span> <span class="o">+</span> <span class="n">NV</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ri</span><span class="p">]</span> <span class="o">=</span> <span class="n">const</span>
        <span class="k">if</span> <span class="n">m</span><span class="p">:</span>
            <span class="n">B</span><span class="p">[</span><span class="n">mi</span><span class="p">,</span> <span class="n">ri</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span>
            <span class="n">mi</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">col_scales</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">eqS</span><span class="p">)</span>

    <span class="c1"># Compute per-variable scale such that the variable axes are scaled roughly equally
</span>    <span class="k">for</span> <span class="n">vi</span><span class="p">,</span> <span class="n">var</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">vars</span><span class="p">):</span>
        <span class="n">col_scales</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">S</span> <span class="o">//</span> <span class="n">var_scale</span><span class="p">[</span><span class="n">var</span><span class="p">])</span>
        <span class="c1"># Fill in vars block of B
</span>        <span class="n">B</span><span class="p">[</span><span class="n">mod_count</span> <span class="o">+</span> <span class="n">vi</span><span class="p">,</span> <span class="n">NR</span> <span class="o">+</span> <span class="n">vi</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">if</span> <span class="n">is_inhom</span><span class="p">:</span>
        <span class="c1"># Const block: effectively, this is a bound of 1 on the constant term
</span>        <span class="n">col_scales</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">S</span><span class="p">)</span>
        <span class="n">B</span><span class="p">[</span><span class="n">mod_count</span> <span class="o">+</span> <span class="n">NV</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">if</span> <span class="n">verbose</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"verbose: scaling shifts:"</span><span class="p">,</span> <span class="p">[</span><span class="n">math</span><span class="p">.</span><span class="n">log2</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">))</span> <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">col_scales</span><span class="p">])</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"verbose: matrix dimensions:"</span><span class="p">,</span> <span class="n">B</span><span class="p">.</span><span class="n">dimensions</span><span class="p">())</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"verbose: unscaled matrix before:"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">B</span><span class="p">.</span><span class="n">n</span><span class="p">())</span>

    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">col_scales</span><span class="p">):</span>
        <span class="n">B</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span> <span class="o">*=</span> <span class="n">s</span>
    <span class="k">if</span> <span class="n">use_flatter</span><span class="p">:</span>
        <span class="kn">from</span> <span class="nn">re</span> <span class="kn">import</span> <span class="n">findall</span>
        <span class="kn">from</span> <span class="nn">subprocess</span> <span class="kn">import</span> <span class="n">check_output</span>

        <span class="c1"># compile https://github.com/keeganryan/flatter and put it in $PATH
</span>        <span class="n">z</span> <span class="o">=</span> <span class="s">"[["</span> <span class="o">+</span> <span class="s">"]</span><span class="se">\n</span><span class="s">["</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">row</span><span class="p">))</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">B</span><span class="p">)</span> <span class="o">+</span> <span class="s">"]]"</span>
        <span class="n">ret</span> <span class="o">=</span> <span class="n">check_output</span><span class="p">([</span><span class="s">"flatter"</span><span class="p">],</span> <span class="nb">input</span><span class="o">=</span><span class="n">z</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
        <span class="n">B</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="n">B</span><span class="p">.</span><span class="n">nrows</span><span class="p">(),</span> <span class="n">B</span><span class="p">.</span><span class="n">ncols</span><span class="p">(),</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">findall</span><span class="p">(</span><span class="sa">b</span><span class="s">"-?</span><span class="se">\\</span><span class="s">d+"</span><span class="p">,</span> <span class="n">ret</span><span class="p">)))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">B</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">LLL</span><span class="p">(</span><span class="o">**</span><span class="n">lll_args</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">s</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">col_scales</span><span class="p">):</span>
        <span class="n">B</span><span class="p">[:,</span> <span class="n">i</span><span class="p">]</span> <span class="o">/=</span> <span class="n">s</span>

    <span class="c1"># Negate rows for more readable output
</span>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">B</span><span class="p">.</span><span class="n">nrows</span><span class="p">()):</span>
        <span class="k">if</span> <span class="nb">sum</span><span class="p">(</span><span class="n">x</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="p">:])</span> <span class="o">&gt;</span> <span class="nb">sum</span><span class="p">(</span><span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="p">:]):</span>
            <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="p">:]</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>
        <span class="k">if</span> <span class="n">is_inhom</span> <span class="ow">and</span> <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="p">:]</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span>

    <span class="k">if</span> <span class="n">verbose</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="s">"verbose: unscaled matrix after:"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">B</span><span class="p">.</span><span class="n">n</span><span class="p">())</span>

    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">B</span><span class="p">:</span>
        <span class="k">if</span> <span class="nb">any</span><span class="p">(</span><span class="n">x</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">row</span><span class="p">[:</span><span class="n">NR</span><span class="p">]):</span>
            <span class="c1"># invalid solution: some relations are nonzero
</span>            <span class="k">continue</span>

        <span class="k">if</span> <span class="n">is_inhom</span><span class="p">:</span>
            <span class="c1"># Each row is a potential solution, but some rows may not carry a constant.
</span>            <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">verbose</span><span class="p">:</span>
                    <span class="k">print</span><span class="p">(</span>
                        <span class="s">"verbose: zero solution"</span><span class="p">,</span>
                        <span class="p">{</span><span class="n">var</span><span class="p">:</span> <span class="n">row</span><span class="p">[</span><span class="n">NR</span> <span class="o">+</span> <span class="n">vi</span><span class="p">]</span> <span class="k">for</span> <span class="n">vi</span><span class="p">,</span> <span class="n">var</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">vars</span><span class="p">)</span> <span class="k">if</span> <span class="n">row</span><span class="p">[</span><span class="n">NR</span> <span class="o">+</span> <span class="n">vi</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">},</span>
                    <span class="p">)</span>
                <span class="k">continue</span>

        <span class="n">res</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">vi</span><span class="p">,</span> <span class="n">var</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">vars</span><span class="p">):</span>
            <span class="n">res</span><span class="p">[</span><span class="n">var</span><span class="p">]</span> <span class="o">=</span> <span class="n">row</span><span class="p">[</span><span class="n">NR</span> <span class="o">+</span> <span class="n">vi</span><span class="p">]</span> <span class="o">+</span> <span class="n">guesses</span><span class="p">[</span><span class="n">var</span><span class="p">]</span>

        <span class="k">return</span> <span class="n">res</span>


<span class="n">p</span> <span class="o">=</span> <span class="mi">39761755302725183918693591729206126391094688519137850931996389197052105934335057950945885109127019315116708698582684135940731</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">37470413545164594923241940723449977961814431955261347161951289533994732796785078955994373335971437954627235171462939970255523</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">33862474237826219764283873646917712191796653587975971730267794592641857158089029148517141460472220490573591617494610494543421</span> 

<span class="n">gf</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">gf</span><span class="p">,</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">])</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">gen</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"G ="</span><span class="p">,</span> <span class="n">G</span><span class="p">.</span><span class="n">xy</span><span class="p">())</span>

<span class="n">offentlig_nokkel_coords</span> <span class="o">=</span> <span class="p">[</span>
<span class="p">(</span><span class="mi">19344995651025956194741672391212032148363490396937400401146819955355580393176808369173184320136313448134647998758831966754736</span><span class="p">,</span><span class="mi">34020826004970877240134787872651656341416368729440458356772758698852519328204528888078873163885699991764853721479123610703057</span><span class="p">),(</span><span class="mi">38966172409616242154304141143709898301034470122461722607712942742033687783643301247009025399729745022556064024850518869451975</span><span class="p">,</span><span class="mi">5981020799362018596735936290285344387211688865092193941491931169619830103374376973760714068642118719362457727239510914584312</span><span class="p">),</span> <span class="p">(</span><span class="mi">7012878627760257841132118070607478265284965240349652309759124191322573986096551843751246689024934516739883838453379849725751</span><span class="p">,</span> <span class="mi">21649710842932323285463795978767807324556917210964041962739790237236275762823921746606063379573395895459130209397906892095198</span><span class="p">),(</span><span class="mi">16507820273786900224618748750477369369775435705316765856004067873105139579722596955551099931764203698774088259217970865323799</span><span class="p">,</span><span class="mi">9928713485305875739506130889554325411729009153463022555918280976553112545014442785040986950316547911895874494514074098917894</span><span class="p">),</span> <span class="p">(</span><span class="mi">14055726663591292873961297946052533592325700065779495995571239086780922293043115049640092519426435728577412970964860502584449</span><span class="p">,</span><span class="mi">30485748320816380831514092554721453382052900140209991279839693184940939803544687454557399278030782153436443843797878162131674</span><span class="p">),(</span><span class="mi">19284533584902441535038251888281949359237393762112655572077569950661307649081647225051558606183700516352557183155082396507339</span><span class="p">,</span><span class="mi">31789499814834902156506651897418657730851979924342092149083494301240879566203258318324279812405062325758883084316388028234579</span><span class="p">),(</span><span class="mi">28563743478892127827438135408124657877593631512851235793560586090530615354590467727997486849059095488933932291824423145715989</span><span class="p">,</span><span class="mi">25665200201155002744035128647945633598163319971421639263108985895408409856469875694440510114104190480548047704288193118501977</span><span class="p">),(</span><span class="mi">8237411227822132038206373512614285405591981546461995832779339333592557055834188155984551094441805050462771868300394115224375</span><span class="p">,</span> <span class="mi">9885852244328856561608785982938660796665507504121412998798975798901881787628711681405954967253476772481210173364953121589569</span><span class="p">),</span> <span class="p">(</span><span class="mi">21181985550811301835779112200376346636025418520808320184931262305958073757014994270429006350952950798310763860866304539428929</span><span class="p">,</span><span class="mi">6884701502844069177625971506999045981345995595705569692948922952369734751204260690491272933693975446873824249524309618970166</span><span class="p">),</span> <span class="p">(</span><span class="mi">6788587008462034943410368611241496145015831006919232554367954799108989568960420306961801801625921628580097121258960350700616</span><span class="p">,</span> <span class="mi">7635783031494681408229331516727445970079910973779703487539674574209624228670655658114668541055090475326537403610663421717055</span><span class="p">),</span> <span class="p">(</span><span class="mi">34698918716321067804863000464018663206020680011298961086526003259750622996268085071858633541035040445940040693707640153655632</span><span class="p">,</span><span class="mi">16384492064938169922484926227544844042674774692541434008770082166704569520085415713559690586140748815044546227319134849083937</span><span class="p">),(</span><span class="mi">10658974785580326054433035059311986417475084708116100695444229265131486566672126986110855036056235411708879953276778915747801</span><span class="p">,</span> <span class="mi">512033780990944074185563748626730709761992606831859714133668839103428371946017012458822632270307898211602256126273987669132</span><span class="p">),</span> <span class="p">(</span><span class="mi">8622011872253081660673091782773585822060637051075312656402567659535855409821932333482382411981983992572035293537198471300443</span><span class="p">,</span> <span class="mi">39022515826644233788881586619347250212977673395132189646832370764675062592750514668680322547648802196304673254653571721291831</span><span class="p">),</span> <span class="p">(</span><span class="mi">733746435861052343265423986364461942348676907044568071574314976256865094935712580652635360676426823887304743127942655669737</span><span class="p">,</span> <span class="mi">35699658584837934841721507175186736204106629480007391268786882614665034436247870540906673672955477842345407758711255421701272</span><span class="p">),(</span><span class="mi">37939426890774994620687639386442335504804214910213475108653073835175095782887561413623491816689117769855921083421601000351221</span><span class="p">,</span><span class="mi">35484662781609586835666968283377268002573421586505838429006735486351151941782347671265691433508246152630679857286434611823446</span><span class="p">),(</span><span class="mi">27671434794626920166815769310586909573137141964976057656198980121930015805040405450922076489265137388163898643646828570297312</span><span class="p">,</span><span class="mi">15804008446744328534974710571663042229605689599724078001882369669149290404107074338305844058792073815442376248853911841614426</span><span class="p">),(</span><span class="mi">20950482645513610873765064128356556647853383897087887862635288029551420919838051885419671413603809323953440287910086578994272</span><span class="p">,</span><span class="mi">13179730620551517421814470850730448699505360331488970430430199559692709864311666620597196650579997342340297429683266669665805</span><span class="p">),(</span><span class="mi">38209802766336036826548158011858091566763499319755339954976644987497178193491031815701219011999258731732565706983754522742860</span><span class="p">,</span><span class="mi">32075952411759489640105226466556224741572861015631622764015731585347955580393913886424341362200247972419249692718256292405497</span><span class="p">),(</span><span class="mi">29715879263362133992147038430203964295629513055492327942093840791136536190075611961658831084719071107836887811583662865879707</span><span class="p">,</span><span class="mi">13919539779082633178483137734805867250894605291219091326819707826267111628567784026617883661947346871050484166323317372092681</span><span class="p">),(</span><span class="mi">17596448059924478922611374900453610553302087678439808939152903825727511660677906979887680120862442594782190195990376480227247</span><span class="p">,</span><span class="mi">18848917550521531970852496369038841222855249240611234505174458309342823960300837116527482677611242707548544929064942808521326</span><span class="p">),(</span><span class="mi">11694674951617050896888126743690058647375337519424427182693314257629019803360357415031340224437750579664116587883003716347322</span><span class="p">,</span><span class="mi">23769034524399304221482377572880603810420827986816819410647124240381458717464137504868299950648504922208277820779862263213253</span><span class="p">),(</span><span class="mi">28044352636044165142531892612483278790309014066998469173880740484234864937824324353622678955699284335850641632696218607711105</span><span class="p">,</span><span class="mi">36852342519447641222459786922480459165554935411917926715070142361516598240249543218059044962301159233451421107516861058931350</span><span class="p">),(</span><span class="mi">39472716548612380290361977865584209019941773021001278034808705016371847732706310749561371415767551848024898140778002489761104</span><span class="p">,</span><span class="mi">13778771389568946804361056265311684945284062484739422530826916480764877337518958508982589095578772377611594544422376483705189</span><span class="p">),(</span><span class="mi">12383735787832868736512166373154971015290898726854325082693549282798933504244296605160216975903246810620642146814345310554245</span><span class="p">,</span><span class="mi">14606252906250500651763421535808607189949773824275233075682901325789088277988476921580364063054361211058708760529784757163069</span><span class="p">),(</span><span class="mi">7911163544792784677994220674429320832525623274395272821492773307062011009307739889205201720778512712202950737090638605306941</span><span class="p">,</span> <span class="mi">32328838849120475224173379425480516068696470208616385098516834929939549599336938286263319475085712307078669689264043940279300</span><span class="p">),(</span><span class="mi">6806084376297874363978666332947512148582907530266444061137669650799184257952980294236356891605898752326730504084259266607078</span><span class="p">,</span> <span class="mi">4086053235856464049299978367263407974062293925257987675966363058200510421805899650679492916373893962060529530866829744661115</span><span class="p">),</span> <span class="p">(</span><span class="mi">20068421201757796406821504148184756417915558249894999425509689063181453172284226606798981021385347488384527499616803388564798</span><span class="p">,</span><span class="mi">10471301146159400545932616687757275132945443353048424290724629816042012731619948044876834966798469450294545018272842518767039</span><span class="p">),(</span><span class="mi">37732339642517665660573396789456436211371585579156819026373871223024196528579359580573460397737420382889142185220947626429988</span><span class="p">,</span><span class="mi">35588564732766799911411770707054827045426121818169585798083508100212146760878114879993716618460747691986999221885780988213939</span><span class="p">),(</span><span class="mi">18994922082342729210669842066574295649621438440922345176100372319975853401945330951612964095074112154449538291135263645795633</span><span class="p">,</span><span class="mi">7421835481723385629627683542845775174176654429284456417903254652848254644501526524277397274456927128375951677872783186544197</span><span class="p">),</span> <span class="p">(</span><span class="mi">10936179747633490187048811205659632385493108913888571448351520692827861401235904055783909618959144801043869111517493064450813</span><span class="p">,</span><span class="mi">37767515592460780812692994627273499472840828310356287804193220268370806467963587115872332370607004725228518423275190521909036</span><span class="p">),(</span><span class="mi">15578363357360720656604318751099363826610190567191944249530552187368108247234937882283894395989015950625087477601990604613568</span><span class="p">,</span><span class="mi">12944764605838608945255892796385860090328827583817839716418744552699643658761977975421689813669953770928326326679477989760425</span><span class="p">),(</span><span class="mi">18465487551066678587591230816929918491636227429489142712426400860471604878959497312492289805250369784518246291043516743718314</span><span class="p">,</span><span class="mi">33048932538804853453137676161648323915507524602563070414028513687897002445778522892502931139172408593517572601654502257710179</span><span class="p">),(</span><span class="mi">36405447831709193796097960326620635017451602614074697050898363305471353306230658731010486585219737953570079593165399424640077</span><span class="p">,</span><span class="mi">39408299074343594603359628294024899354312805473493079470807758263096873347563725962734813169017704613381036169912740705802415</span><span class="p">),(</span><span class="mi">31489959783721349126832583793042849991821734712454827062803050435506164238311383809821966356053124230213468581001961871705240</span><span class="p">,</span><span class="mi">1370610624414638548357272623280330236940111440345356060614790482301844799622501923372464196490616842945705405162689484422131</span><span class="p">),</span> <span class="p">(</span><span class="mi">38410418347480905434105603211519555470978675975416499460761655754318826230236231759067316884038352846297919716523834617388809</span><span class="p">,</span><span class="mi">38373076908014641207743595020405645972279538291511910579173338937672642301553739809924261109302942930372828119645211569180371</span><span class="p">),(</span><span class="mi">18699249088920525263336529579250720339651996780233633707443800456666031211347230017240747302897271985757953958425270369197271</span><span class="p">,</span><span class="mi">15810499777345670198178975014724801539468143573738090921792268760133300634100091531087694924391974063121939953084474417068575</span><span class="p">),(</span><span class="mi">26959780058637657932043291551863273749284276382492090808843948794474433894425495846938331234168041540969970436897968026924422</span><span class="p">,</span> <span class="mi">1575063286522455595288872157965487016380397319130447521930183949162108900735380591336731890417444500695552903110119195898094</span><span class="p">)]</span>

<span class="n">offentlig_nøkkel</span> <span class="o">=</span> <span class="p">[</span><span class="n">E</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="ow">in</span> <span class="n">offentlig_nokkel_coords</span><span class="p">]</span>
<span class="n">resultat</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="mi">20651818137470466933477728509072550437756475330872536030571099768051457046843355623709212804930440099044049040144879241690983</span><span class="p">,</span><span class="mi">35600016854460355091451342763877862314510764810503386770058531389353025412814465374425619239887352848890007571085094884466047</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Computing discrete logs for public keys ..."</span><span class="p">)</span>
<span class="n">r_values</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">P</span> <span class="ow">in</span> <span class="n">offentlig_nøkkel</span><span class="p">:</span>
	<span class="n">r</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">operation</span><span class="o">=</span><span class="s">"+"</span><span class="p">)</span>
	<span class="n">r_values</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">r</span><span class="p">)</span>

<span class="n">order</span> <span class="o">=</span> <span class="n">G</span><span class="p">.</span><span class="n">order</span><span class="p">()</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">resultat</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">operation</span><span class="o">=</span><span class="s">"+"</span><span class="p">)</span>

<span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">r_values</span><span class="p">)</span>
<span class="n">flag_vars</span> <span class="o">=</span> <span class="p">[</span><span class="n">var</span><span class="p">(</span><span class="sa">f</span><span class="s">"x</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">"</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">e_var</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">"e"</span><span class="p">)</span>

<span class="n">equation</span> <span class="o">=</span> <span class="p">(</span><span class="nb">sum</span><span class="p">(</span><span class="n">r_values</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">flag_vars</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">))</span> <span class="o">+</span> <span class="n">e_var</span> <span class="o">==</span> <span class="n">X</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">flag_vars</span><span class="p">[</span><span class="n">i</span><span class="p">]:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)}</span>
<span class="n">bounds</span><span class="p">[</span><span class="n">e_var</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">1000</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Solving modular linear equation using lattice reduction..."</span><span class="p">)</span>
<span class="n">solution</span> <span class="o">=</span> <span class="n">solve_linear_mod</span><span class="p">([</span><span class="n">equation</span><span class="p">],</span> <span class="n">bounds</span><span class="p">)</span>
<span class="n">recovered_flag</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">chr</span><span class="p">(</span><span class="n">solution</span><span class="p">[</span><span class="n">flag_vars</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Recovered flag: </span><span class="si">{</span><span class="n">recovered_flag</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Flag: <code class="language-plaintext highlighter-rouge">helsectf{Ell1pt15k3_kurv3r_3r_l1vet!}</code></p>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Elliptic Curves" /><category term="ECDLP" /><category term="LWE" /><category term="Lattice" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">My Signed Nonsense (HelseCTF 2025)</title><link href="http://localhost:4000/my-signed-nonsense/" rel="alternate" type="text/html" title="My Signed Nonsense (HelseCTF 2025)" /><published>2025-03-09T11:00:00+01:00</published><updated>2025-03-09T11:00:00+01:00</updated><id>http://localhost:4000/my-signed-nonsense</id><content type="html" xml:base="http://localhost:4000/my-signed-nonsense/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given a GitHub repository and an SSH key to verify signatures. The repository contains quite a lot of files:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>encrypt_flag.py  file13.txt  file18.txt  file22.txt  file27.txt  file31.txt  file36.txt  file40.txt  file45.txt  file5.txt   file54.txt  file6.txt
file1.txt        file14.txt  file19.txt  file23.txt  file28.txt  file32.txt  file37.txt  file41.txt  file46.txt  file50.txt  file55.txt  file7.txt
file10.txt       file15.txt  file2.txt   file24.txt  file29.txt  file33.txt  file38.txt  file42.txt  file47.txt  file51.txt  file56.txt  file8.txt
file11.txt       file16.txt  file20.txt  file25.txt  file3.txt   file34.txt  file39.txt  file43.txt  file48.txt  file52.txt  file57.txt  file9.txt
file12.txt       file17.txt  file21.txt  file26.txt  file30.txt  file35.txt  file4.txt   file44.txt  file49.txt  file53.txt  file58.txt  flag.enc.txt
</code></pre></div></div>

<p>Inspecting some of the files, the majority look quite uninteresting:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ cat file13.txt                                                      
just a number: 13

└─$ cat file37.txt                                                      
just a number: 37
</code></pre></div></div>

<p>But we are given an encryption script in <code class="language-plaintext highlighter-rouge">encrypt_flag.py</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">long_to_bytes</span><span class="p">,</span> <span class="n">inverse</span>
<span class="kn">from</span> <span class="nn">Crypto.PublicKey.ECC</span> <span class="kn">import</span> <span class="n">EccPoint</span>
<span class="kn">from</span> <span class="nn">Crypto.PublicKey._nist_ecc</span> <span class="kn">import</span> <span class="n">p521_curve</span>
<span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.serialization</span> <span class="kn">import</span> <span class="n">load_ssh_private_key</span>

<span class="n">FLAG</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">"../flag.txt"</span><span class="p">,</span><span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">())</span>

<span class="c1"># calculate y point given x using the weierstrass equation: y^2 = x^3 + a*x + b
</span><span class="k">def</span> <span class="nf">lift_x</span><span class="p">(</span><span class="n">x</span><span class="p">):</span> <span class="k">return</span> <span class="nb">pow</span><span class="p">((</span><span class="n">x</span><span class="o">**</span><span class="mi">3</span> <span class="o">+</span> <span class="n">a</span><span class="o">*</span><span class="n">x</span> <span class="o">+</span> <span class="n">b</span><span class="p">)</span><span class="o">%</span><span class="n">p</span><span class="p">,</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">3</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>

<span class="c1"># NIST-p521 curve
</span><span class="n">a</span> <span class="o">=</span> <span class="o">-</span><span class="mi">3</span>
<span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p521_curve</span><span class="p">().</span><span class="n">b</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p521_curve</span><span class="p">().</span><span class="n">p</span><span class="p">)</span>
<span class="n">order</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">p521_curve</span><span class="p">().</span><span class="n">order</span><span class="p">)</span>

<span class="c1"># using SSH private key as ECC secret
</span><span class="n">key</span> <span class="o">=</span> <span class="n">load_ssh_private_key</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s">"/root/.ssh/id_ecdsa"</span><span class="p">,</span><span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">(),</span><span class="sa">b</span><span class="s">""</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">key</span><span class="p">.</span><span class="n">private_numbers</span><span class="p">().</span><span class="n">private_value</span>

<span class="c1"># load the flag as x-point on a curve, find y-point by lifting x and then encrypt the point using our secret
</span><span class="n">P</span> <span class="o">=</span> <span class="n">EccPoint</span><span class="p">(</span><span class="n">FLAG</span><span class="p">,</span> <span class="n">lift_x</span><span class="p">(</span><span class="n">FLAG</span><span class="p">),</span> <span class="s">"p521"</span><span class="p">)</span>
<span class="n">Q</span> <span class="o">=</span> <span class="n">P</span><span class="o">*</span><span class="n">d</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Q=</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="si">}</span><span class="s">,</span><span class="si">{</span><span class="nb">hex</span><span class="p">(</span><span class="n">Q</span><span class="p">.</span><span class="n">y</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span> 
</code></pre></div></div>

<p>And the encrypted flag in <code class="language-plaintext highlighter-rouge">flag.enc.txt</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Q=0x15f0683537d9a6ff956284fd77f96b5c2060d7334b8c419188fe8d8df00fb6ee88a7bd7e3653860af84c41f951961e36eec3dbde669a40b953dcec6f9d5c148a94a,0x11e37ad3acaf57a4a905213023f70f93375c1022e78a9a57a7621a709104e7276c60fd6c65f9e8c3ba866abc5ce263db163502103bf1cf448be24aa4eb3b466e305
</code></pre></div></div>

<p>The encryption script loads in the SSH private key $d$, calculates $Q = d \cdot P$ where $P.x$ is the flag converted to a long. To recover the flag, we would have to calculate the multiplicative inverse of $d$ with respect to the curve order. This means we must recover the SSH private key $d$.</p>

<h5 id="understanding-the-vulnerability">Understanding the vulnerability</h5>

<p>In April 2024, a cryptographic vulnerability in PuTTY was discovered where an attacker could recover a NIST P-521 SSH private key from only around 60 signatures. The vulnerability (CVE-2024-31497) stems from how PuTTY handled nonce generation:</p>

\[\large k = \text{SHA512} ( \text{SHA512}(d)||\text{SHA1}(m) ) \mod q\]

<p>where $k$ is the nonce, $d$ is the private key, $m$ is the message, and $q$ is the curve order. For most curves, this nonce generation is fine. However, for curve P-521 with a 521-bit curve order, the 512-bit hash $k$ won’t be reduced modulo $q$. That means the nonce $k$ will always be a 512-bit value.</p>

<p>In ECDSA, the randomness of the nonce is critical for the security of the algorithm. In our case, the 512-bit nonce will in reality be a 521-bit number with 9 bits of leading zeroes. This is true for all nonces generated in this fashion. Nonces with predictable bits are called <em>biased</em> nonces. With enough signatures, the nonces can be recovered. If the nonce is known, the private key can be recovered in a trivial manner.</p>

<p>An ECDSA signature is comprised of two integer values $(R,S)$ generated like such:</p>

\[\large\begin{aligned}
R &amp;= (k \cdot G).x \\
S &amp;\equiv k^{-1} \cdot (h + d \cdot R) \mod q
\end{aligned}\]

<p>Where $k$ is the nonce, $h$ is the hash of the message to be signed, $q$ is the order of the curve, $d$ is the private key, and $G$ is the generator point of the curve. We can therefore recover the private key by calculating:</p>

\[\large d = (S \cdot k - h) \cdot R^{-1} \mod q\]

<p>Like previously mentioned, the nonce $k$ can be recovered with enough signatures. This is done by using advanced cryptanalysis to set up and solve the “Hidden Number Problem”</p>

<h5 id="the-hidden-number-problem-math-warning">The Hidden Number Problem (math warning)</h5>
<p><em>Note, a lot of this math is sourced from Joseph Surin’s “A Gentle Tutorial for Lattice-Based Cryptanalysis”. I recommend reading it if you are interested in learning more about lattices!</em></p>

<p>Let $p$ be a prime and let $\alpha \in [1, p-1]$ be a secret integer. Recover $\alpha$ given $m$ pairs of integers ${(t_{i},a_{i})}^{m}_{i=1}$ such that:</p>

\[\large\beta_{i} - t_{i} \cdot \alpha + a_{i} \equiv 0 \mod p\]

<p>Where the $\beta_{i}$ are unknown and satisfy $|\beta| &lt; B$ for some $B &lt; p$. We can set up the following lattice basis $B’$:</p>

\[\large B' = \begin{bmatrix}
p &amp;  &amp;  &amp;  &amp;  &amp; \\
 &amp; p &amp;  &amp;  &amp;  &amp; \\
 &amp;  &amp; \ddots &amp;  &amp;  &amp; \\
 &amp;  &amp;  &amp; p &amp;  &amp; \\
t_{1} &amp; t_{2} &amp; \dots &amp; t_{m} &amp; B/p  \\
a_{1} &amp; a_{2} &amp; \dots &amp; a_{m} &amp;  &amp; B
\end{bmatrix}\]

<p>Running $LLL$ on $B’$ will recover $\alpha$.</p>

<p>For ECDSA with “biased” nonces (here biased means zeroed MSBs), we assume that the nonces are generated such that the top $l$ bits of each nonce $k_{i}$ are zero. Therefore, we have:</p>

\[\large |k_{i}| &lt; 2^{\log_{2}\cdot q-l}\]

<p>And so:</p>

\[\large\begin{align}
\nonumber s_{i} \cdot k_{i} &amp;\equiv h_{i} + r_{i} \cdot d &amp;\mod q \\
\nonumber k_{i} - (s_{i}^{-1} \cdot r_{i}) \cdot d + (-s_{i}^{-1} \cdot h_{i}) &amp;\equiv 0 &amp;\mod q
\end{align}\]

<p>Which is precisely a hidden number problem instance which can be solved, given large enough $l$ and $\ell$, where $\ell$ is the number of signatures, and $l$ is again the number of most significant bits of $k_{i}$ that are zero.</p>

<p>While this math can be intimidating, it actually isn’t really needed to solve this particular challenge as implementations for this CVE already exist.</p>

<h5 id="recovering-the-signatures-from-the-handout">Recovering the signatures from the handout</h5>

<p>For this particular PuTTY CVE, we need approximately 60 signatures in order to recover the key. In our given repository, we have exactly 60 signed commits:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ git reflog
fc539ef (HEAD -&gt; master) HEAD@{0}: commit: my signed git commit 58
cbd843a HEAD@{1}: commit: my signed git commit 57
b188d36 HEAD@{2}: commit: my signed git commit 56
[...]
2cfff33 HEAD@{55}: commit: my signed git commit 3
8b91d9f HEAD@{56}: commit: my signed git commit 2
95a2ccf HEAD@{57}: commit: my signed git commit 1
bc7b769 HEAD@{58}: commit: added encrypted flag point
23e2beb HEAD@{59}: commit (initial): added encrypt_flag.py
</code></pre></div></div>

<p>And each of these commits are signed with the SSH key:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ git cat-file commit fc539ef
tree 354058dc6762047002089dccd967ae9f8f5986b9
parent cbd843aa544dcf87b8052a56e7fc45c2ac27c9e2
author Paxton Peppers &lt;paxton.peppers@myorg.local&gt; 1738052956 +0000
committer Paxton Peppers &lt;paxton.peppers@myorg.local&gt; 1738052956 +0000
gpgsig -----BEGIN SSH SIGNATURE-----
 U1NIU0lHAAAAAQAAAKwAAAATZWNkc2Etc2hhMi1uaXN0cDUyMQAAAAhuaXN0cDUyMQAAAI
 UEAIgr1autRfCQyHE7gHVI5Uo4z1vrPbdYvJLdNtHpXwd3HZ21OG1TCsKiiYvAECEF4l8Z
 iARY0wZgHFaA/Zw85X4pARwtlsFPVltjIYdFtvO7pZTCeQHmUm2NBh4Os5qqcjwUl0XvXB
 cxnF8XWpb9RFqbqyZDxWSp8hUouMa3JEgP9vj2AAAAA2dpdAAAAAAAAAAGc2hhNTEyAAAA
 pwAAABNlY2RzYS1zaGEyLW5pc3RwNTIxAAAAjAAAAEIA59LudM8hw3uDlXtX2UoG98n58R
 EMiAhV4Rxbr9SVH4Tr9UTiqjkcACObwAtUjnQsUWNsywKYh9p6LTx9M1ypleoAAABCAA1n
 ArtBef3FOCdH+0u9x8dZC/omIYEM0BOdO3D2ADMmMXoqjFeMjtbYs2pnbS2/GsOBtdbgOx
 Lxdpu5ajMKPPFy
 -----END SSH SIGNATURE-----

my signed git commit 58
</code></pre></div></div>

<p>We need to extract $R$, $S$ and $h$ for each signature. We must therefore begin by investigating how the SSH signature is structured. We can refer to the official signature protocol definition: https://github.com/openssh/openssh-portable/blob/master/PROTOCOL.sshsig</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#define MAGIC_PREAMBLE "SSHSIG"
#define SIG_VERSION    0x01
        byte[6]   MAGIC_PREAMBLE
        uint32    SIG_VERSION
        string    publickey
        string    namespace
        string    reserved
        string    hash_algorithm
        string    signature
</code></pre></div></div>

<p>So it seems like the signature is comprised of numerous fields. Each string is prefixed with four bytes denoting the length of the subsequent string. If we strip the signature “armor”, decode from base64, and hex-encode the raw bytes, we can analyse how our signature compares to the protocol definition:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ cat signature.txt | base64 -d | xxd -p               
53534853494700000001000000ac0000001365636473612d736861322d6e
69737470353231000000086e69737470353231000000850400882bd5abad
45f090c8713b807548e54a38cf5beb3db758bc92dd36d1e95f07771d9db5
386d530ac2a2898bc0102105e25f19880458d306601c5680fd9c3ce57e29
011c2d96c14f565b63218745b6f3bba594c27901e6526d8d061e0eb39aaa
723c149745ef5c17319c5f175a96fd445a9bab2643c564a9f21528b8c6b7
24480ff6f8f6000000036769740000000000000006736861353132000000
a70000001365636473612d736861322d6e697374703532310000008c0000
004200e7d2ee74cf21c37b83957b57d94a06f7c9f9f1110c880855e11c5b
afd4951f84ebf544e2aa391c00239bc00b548e742c51636ccb029887da7a
2d3c7d335ca995ea00000042000d6702bb4179fdc5382747fb4bbdc7c759
0bfa2621810cd0139d3b70f6003326317a2a8c578c8ed6d8b36a676d2dbf
1ac381b5d6e03b12f1769bb96a330a3cf172
</code></pre></div></div>

<p>Breaking it up and ignoring the length-specifications, we have the following values:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># byte[6] MAGIC_PREAMBLE - 535348534947 (SSHSIG)
# uint32 SIG_VERSION     - 00000001     (0x01)
# string publickey       - 0000001365636473612d736861322d6e
#                        - 69737470353231000000086e69737470353231000000850400882bd5abad
#                        - 45f090c8713b807548e54a38cf5beb3db758bc92dd36d1e95f07771d9db5
#                        - 386d530ac2a2898bc0102105e25f19880458d306601c5680fd9c3ce57e29
#                        - 011c2d96c14f565b63218745b6f3bba594c27901e6526d8d061e0eb39aaa
#                        - 723c149745ef5c17319c5f175a96fd445a9bab2643c564a9f21528b8c6b7
#                        - 24480ff6f8f6
# string namespace       - 676974 (git)
# string reserved        - 00000000
# string hash_algorithm  - 736861353132 (sha512)
# string signature       - 0000001365636473612d736861322d6e697374703532310000008c0000
#                        - 004200e7d2ee74cf21c37b83957b57d94a06f7c9f9f1110c880855e11c5b
#                        - afd4951f84ebf544e2aa391c00239bc00b548e742c51636ccb029887da7a
#                        - 2d3c7d335ca995ea00000042000d6702bb4179fdc5382747fb4bbdc7c759
#                        - 0bfa2621810cd0139d3b70f6003326317a2a8c578c8ed6d8b36a676d2dbf
#                        - 1ac381b5d6e03b12f1769bb96a330a3cf172 (ecdsa-sha2-nistp521, r, s)
</code></pre></div></div>

<p>The signature part contains the curve name, $R$, and $S$:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># string signature       - 0000001365636473612d736861322d6e69737470353231
# string R               - 00e7d2ee74cf21c37b83957b57d94a06f7c9f9f1110c880855e11c5baf
#                        - d4951f84ebf544e2aa391c00239bc00b548e742c51636ccb029887da7a
#                        - 2d3c7d335ca995ea
# string S               - 000d6702bb4179fdc5382747fb4bbdc7c7590bfa2621810cd0139d3b70
#                        - f6003326317a2a8c578c8ed6d8b36a676d2dbf1ac381b5d6e03b12f176
#                        - 9bb96a330a3cf172
</code></pre></div></div>

<p>We can confirm that both values are <em>around</em> 521-bits:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="mh">0xe7d2ee74cf21c37b83957b57d94a06f7c9f9f1110c880855e11c5bafd4951f84ebf544e2aa391c00239bc00b548e742c51636ccb029887da7a2d3c7d335ca995ea</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">r</span><span class="p">.</span><span class="n">nbits</span><span class="p">()</span>
<span class="mi">520</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">s</span> <span class="o">=</span> <span class="mh">0xd6702bb4179fdc5382747fb4bbdc7c7590bfa2621810cd0139d3b70f6003326317a2a8c578c8ed6d8b36a676d2dbf1ac381b5d6e03b12f1769bb96a330a3cf172</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">s</span><span class="p">.</span><span class="n">nbits</span><span class="p">()</span>
<span class="mi">516</span>
</code></pre></div></div>

<p>We can repeat the same process for each of the 60 signatures to retrieve all $(R,S)$ pairs.</p>

<p>Now, we “just” need to recover all the corresponding hashes $h$!</p>

<h5 id="recovering-the-hashes">Recovering the hashes</h5>

<p>Unlike the signature values, the hash messages are not stored in the signatures themselves. In order to recover them, we must construct each hash ourselves. We can once again refer to the SSHSIG protocol definition to see how the hashes are constructed:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1. Signed Data, of which the signature goes into the blob above
#define MAGIC_PREAMBLE "SSHSIG"
        byte[6]   MAGIC_PREAMBLE
        string    namespace
        string    reserved
        string    hash_algorithm
        string    H(message)
</code></pre></div></div>

<p>Following the signature scheme, we can assume the hash will look something like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># byte[6] MAGIC_PREAMBLE - 535348534947 (SSHSIG)
# string namespace       - 676974 (git)
# string reserved        - 00000000
# string hash_algorithm  - 736861353132 (sha512)
# string H(message)      - SHA512(???)
</code></pre></div></div>

<p>And with the string lengths included:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span>  <span class="o">=</span> <span class="sa">b</span><span class="s">"SSHSIG"</span>                           <span class="c1"># MAGIC_PREAMBLE
</span><span class="n">m</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x00\x00\x03</span><span class="s">git"</span>              <span class="c1"># namespace, length is 3 bytes
</span><span class="n">m</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x00\x00\x00</span><span class="s">"</span>                 <span class="c1"># reserved
</span><span class="n">m</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x00\x00\x06</span><span class="s">sha512"</span>           <span class="c1"># algorithm, length is 6 bytes 
</span><span class="n">m</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x00\x00\x40</span><span class="s">"</span> <span class="o">+</span> <span class="n">commit_sha512</span> <span class="c1"># hash, length is 64 bytes
</span><span class="n">h</span>  <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha512</span><span class="p">(</span><span class="n">m</span><span class="p">).</span><span class="n">hexdigest</span><span class="p">()</span>       <span class="c1"># P-521 uses SHA512 for h
</span></code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">commit_sha512</code> is the SHA512-sum of the original message to be signed. In our case, the commit object to be hashed and used for signing will naturally not include the yet-to-be created signature. We will therefore have to remove the gpg-sign section:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ cat commit                   
tree 354058dc6762047002089dccd967ae9f8f5986b9
parent cbd843aa544dcf87b8052a56e7fc45c2ac27c9e2
author Paxton Peppers &lt;paxton.peppers@myorg.local&gt; 1738052956 +0000
committer Paxton Peppers &lt;paxton.peppers@myorg.local&gt; 1738052956 +0000

my signed git commit 58

</code></pre></div></div>

<p>We can then easily find the commit hash:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ sha512sum commit
75dde82973e901de91e66b3c647ef541892836eb21f3ba8c1093c5ba9613455a7a35a7c41f742b837ccb24b5cdfb6713f39c736c5983822f16fa1b0f9cec9aec
</code></pre></div></div>

<p>With this, we can finally compute the hash $h$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">commit_sha512</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="mh">0x75dde82973e901de91e66b3c647ef541892836eb21f3ba8c1093c5ba9613455a7a35a7c41f742b837ccb24b5cdfb6713f39c736c5983822f16fa1b0f9cec9aec</span><span class="p">)</span>
<span class="n">m</span>  <span class="o">=</span> <span class="sa">b</span><span class="s">"SSHSIG"</span>
<span class="n">m</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x00\x00\x03</span><span class="s">git"</span>              <span class="c1"># length is 3 bytes
</span><span class="n">m</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x00\x00\x00</span><span class="s">"</span>
<span class="n">m</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x00\x00\x06</span><span class="s">sha512"</span>           <span class="c1"># length is 6 bytes 
</span><span class="n">m</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00\x00\x00\x40</span><span class="s">"</span> <span class="o">+</span> <span class="n">commit_sha512</span> <span class="c1"># length is 64 bytes
</span><span class="n">h</span>  <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha512</span><span class="p">(</span><span class="n">m</span><span class="p">).</span><span class="n">hexdigest</span><span class="p">()</span>       <span class="c1"># P-521 uses SHA512 for h
# 0x9197b8dfa0936f527174ff6fd0011f65cead004310022cdfa203a44e30794e2321870d34a7c3c4b77a72b13c9426d888a332dd19e02f7fec9e057c9d9888b464
</span></code></pre></div></div>

<p>To ensure all values are correctly extracted, we can verify with the public key (which can be parsed from either the signature or the allowed-signers file). Mathematically, verifying an ECDSA signature is done by computing:</p>

\[\large
\begin{aligned}
P = S^{-1}\cdot h \cdot G + S^{-1} \cdot R \cdot pubkey
\end{aligned}\]

<p>The signature is considered to be valid if the point $P$’s x-coordinate is equal to $R$.
We can create a short SageMath script to verify:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="c1"># P-521 Curve Parameters from https://neuromancer.sk/std/nist/P-521
</span><span class="n">p</span> <span class="o">=</span> <span class="mh">0x01ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>
<span class="n">K</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">K</span><span class="p">(</span><span class="mh">0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">K</span><span class="p">(</span><span class="mh">0x0051953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00</span><span class="p">)</span>
<span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="mh">0x00c6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66</span><span class="p">,</span> <span class="mh">0x011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650</span><span class="p">)</span>
<span class="n">E</span><span class="p">.</span><span class="n">set_order</span><span class="p">(</span><span class="mh">0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409</span><span class="p">)</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">order</span><span class="p">()</span>

<span class="c1"># Public key parsed from allowed-signers file
</span><span class="n">Qx</span> <span class="o">=</span> <span class="mh">0x00882bd5abad45f090c8713b807548e54a38cf5beb3db758bc92dd36d1e95f07771d9db5386d530ac2a2898bc0102105e25f19880458d306601c5680fd9c3ce57e29</span>
<span class="n">Qy</span> <span class="o">=</span> <span class="mh">0x011c2d96c14f565b63218745b6f3bba594c27901e6526d8d061e0eb39aaa723c149745ef5c17319c5f175a96fd445a9bab2643c564a9f21528b8c6b724480ff6f8f6</span>
<span class="n">Q</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="n">Qx</span><span class="p">,</span> <span class="n">Qy</span><span class="p">)</span>

<span class="n">r</span> <span class="o">=</span> <span class="mh">0xe7d2ee74cf21c37b83957b57d94a06f7c9f9f1110c880855e11c5bafd4951f84ebf544e2aa391c00239bc00b548e742c51636ccb029887da7a2d3c7d335ca995ea</span>
<span class="n">s</span> <span class="o">=</span> <span class="mh">0xd6702bb4179fdc5382747fb4bbdc7c7590bfa2621810cd0139d3b70f6003326317a2a8c578c8ed6d8b36a676d2dbf1ac381b5d6e03b12f1769bb96a330a3cf172</span>
<span class="n">h</span> <span class="o">=</span> <span class="mh">0x9197b8dfa0936f527174ff6fd0011f65cead004310022cdfa203a44e30794e2321870d34a7c3c4b77a72b13c9426d888a332dd19e02f7fec9e057c9d9888b464</span>

<span class="n">sinv</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="n">P</span> <span class="o">=</span> <span class="p">(</span><span class="n">sinv</span> <span class="o">*</span> <span class="n">h</span><span class="p">)</span> <span class="o">*</span> <span class="n">G</span> <span class="o">+</span> <span class="p">(</span><span class="n">sinv</span> <span class="o">*</span> <span class="n">r</span><span class="p">)</span> <span class="o">*</span> <span class="n">Q</span>

<span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="n">P</span><span class="p">.</span><span class="n">xy</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span> <span class="o">%</span> <span class="n">n</span> <span class="o">==</span> <span class="n">r</span> <span class="o">%</span> <span class="n">n</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Valid Signature!!!!"</span><span class="p">)</span>

<span class="c1"># Valid Signature!!!!
</span></code></pre></div></div>

<p>And the signature is valid! This means the extracted values for $R$, $S$ and $h$ are correct! We can repeat the same process to retrieve all 60 hashes (through scripting ofcourse, as this would be quite tedious manually).</p>

<h5 id="recovering-the-private-key-and-getting-the-flag">Recovering the private key and getting the flag</h5>

<p>Finally, with all parameters retrieved, we can retrieve the private key d. I spent many many hours trying to set up the Hidden Number Problem instance in sagemath. Approaches I have used for previous cryptography challenges, and approaches from writeups I read online did not work. Instead, I found this proof-of-concept GitHub repository: https://github.com/HugoBond/CVE-2024-31497-POC</p>

<p>To use this, we need to do a couple of things first. Firstly, we need to convert our public key into PEM format:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives.serialization</span> <span class="kn">import</span> <span class="p">(</span>
    <span class="n">load_ssh_public_key</span><span class="p">,</span>
    <span class="n">Encoding</span><span class="p">,</span>
    <span class="n">PublicFormat</span>
<span class="p">)</span>

<span class="n">allowed_signers_path</span> <span class="o">=</span> <span class="s">"../repo/allowed_signers"</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">allowed_signers_path</span><span class="p">,</span> <span class="s">"r"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	<span class="n">line</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">().</span><span class="n">strip</span><span class="p">().</span><span class="n">splitlines</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>

<span class="n">parts</span> <span class="o">=</span> <span class="n">line</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">parts</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">:</span>
	<span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"Unexpected allowed_signers format."</span><span class="p">)</span>

<span class="n">key_type</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>        <span class="c1"># ecdsa-sha2-nistp521
</span><span class="n">key_blob</span> <span class="o">=</span> <span class="n">parts</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>        <span class="c1"># base64-encoded key blob
</span>
<span class="n">ssh_key_line</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">key_type</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="n">key_blob</span><span class="si">}</span><span class="s">"</span>
<span class="n">ssh_key</span> <span class="o">=</span> <span class="n">load_ssh_public_key</span><span class="p">(</span><span class="n">ssh_key_line</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
<span class="n">pem_data</span> <span class="o">=</span> <span class="n">ssh_key</span><span class="p">.</span><span class="n">public_bytes</span><span class="p">(</span><span class="n">Encoding</span><span class="p">.</span><span class="n">PEM</span><span class="p">,</span> <span class="n">PublicFormat</span><span class="p">.</span><span class="n">SubjectPublicKeyInfo</span><span class="p">)</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"pubkey.pub"</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">out</span><span class="p">:</span>
	<span class="n">out</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">pem_data</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="s">"Public key replaced successfully in pubkey.pub."</span><span class="p">)</span>
</code></pre></div></div>

<p>Which gives us our <code class="language-plaintext highlighter-rouge">pubkey.pub</code> file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-----BEGIN PUBLIC KEY-----
MIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAiCvVq61F8JDIcTuAdUjlSjjPW+s9
t1i8kt020elfB3cdnbU4bVMKwqKJi8AQIQXiXxmIBFjTBmAcVoD9nDzlfikBHC2W
wU9WW2Mhh0W287ullMJ5AeZSbY0GHg6zmqpyPBSXRe9cFzGcXxdalv1EWpurJkPF
ZKnyFSi4xrckSA/2+PY=
-----END PUBLIC KEY-----
</code></pre></div></div>

<p>Then, we need to format the signatures so that each line consists of the hash, a space, and the signature values r and s concatenated. It is also important to ensure all values are padded with leading zeroes to a total of 66 bytes. This is a requirement for the tool to work.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ cat signatures.txt
9197b8dfa0936f527174ff6fd0011f65cead004310022cdfa203a44e30794e2321870d34a7c3c4b77a72b13c9426d888a332dd19e02f7fec9e057c9d9888b464 00e7d2ee74cf21c37b83957b57d94a06f7c9f9f1110c880855e11c5bafd4951f84ebf544e2aa391c00239bc00b548e742c51636ccb029887da7a2d3c7d335ca995ea000d6702bb4179fdc5382747fb4bbdc7c7590bfa2621810cd0139d3b70f6003326317a2a8c578c8ed6d8b36a676d2dbf1ac381b5d6e03b12f1769bb96a330a3cf172
57d95227769b9e63c26b9bd23aef7532e794332a67bb5f430ac6b2561fe7d6ae83b968bcf5ab6eb20da9a4d84bb79c9beb13b825ad5e6f9d4cef93c4005552f7 00504ee72a86f56b7f1c0c2828f3bb03bf068e71fe3fa909b9e2a9587fc3f677345e8c6943848bd553872cec55b20fd82d0a5474e4f4e0870e49c5a21641aedde79f018f8b5f96d55df8d0354932cc46e7536fef1d3afe2c0ee12174e2b956a2016beeb616be602a2bd8622a81c003752281b27e37aa94d5c428378772e46d607926afb8
83940acb319efc1f3d6bb6d356a3713beaba23ca05ec1924a8bd4a5e42f0c5d836aa2ec8fee8b75fa73b372ab10d45d9160d63bde66a71b198627e2a189167ee 01b30607e91c8c5b31f8b4fbecb58370b676763da368a266f2a24300c639546aff94e56520b6c0286104b8ce2264229a681dadd8a7d921b9cd92b050c7ff40480a7a002d5284b8edb2e23b716c1466e9ee0d702defc540acf2abb88e0abb85ed80aade0f1123a8047660ab1bd4cc5ea5bc9c2813a16cdaac63d0316e8ec6642aeb972144
[...]
</code></pre></div></div>

<p>We can now run the attack:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>└─$ sage --python3 main.py -s signatures.txt -pk pubkey.pub -o key.txt
/home/user/sage/sage/local/var/lib/sage/venv-python3.11/lib/python3.11/site-packages/g6k/__init__.py:23: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
  from .siever_params import SieverParams  # noqa

     ██████ ██    ██ ███████       ██████   ██████  ██████  ██   ██       ██████   ██ ██   ██  █████  ███████ 
    ██      ██    ██ ██                 ██ ██  ████      ██ ██   ██            ██ ███ ██   ██ ██   ██      ██ 
    ██      ██    ██ █████   █████  █████  ██ ██ ██  █████  ███████ █████  █████   ██ ███████  ██████     ██  
    ██       ██  ██  ██            ██      ████  ██ ██           ██            ██  ██      ██      ██    ██   
     ██████   ████   ███████       ███████  ██████  ███████      ██       ██████   ██      ██  █████     ██   
                                                                                                          
    Author: @𝐻𝓊𝑔𝑜𝐵𝑜𝓃𝒹 
                
    
Starting private key recovery...
Private key recovered successfully!
Saved in key.txt
</code></pre></div></div>

<p>With the private key recovered in <code class="language-plaintext highlighter-rouge">key.txt</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-----BEGIN PRIVATE KEY-----
MIHuAgEAMBAGByqGSM49AgEGBSuBBAAjBIHWMIHTAgEBBEIAfl4xP4UyGmir+PKR
8X6Tzwz2oO3nAESBu+vHuCDF9+GD1LWZGXdxlp+3REGLYPd0Y6xh9nA15sDudfY1
QZIDFj+hgYkDgYYABADGhY4GtwQE6c2ePstmI5W0QpxkgTkFP7Uh+CivYGtNPbqh
S1537+dZKP4dwSei/6jeM0izwYVqQpv5fn4xwuW9ZgEYOSlqeJo7wARcil+0LH0b
2Zj1RElXm0RoF6+9Fyc+ZiyX7nKZXvQmQMVQuQE/rQdhNTxwhqJywkCIvpR2n9Fm
UA==
-----END PRIVATE KEY----- 
</code></pre></div></div>

<p>We can now finally decrypt the flag. We simply calculate the modular inverse of $d$ with respect to the curve order, then</p>

\[\large d^{-1}\cdot Q = P\]

<p>And $P.x$ is our flag!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">cryptography.hazmat.primitives</span> <span class="kn">import</span> <span class="n">serialization</span>
<span class="kn">from</span> <span class="nn">cryptography.hazmat.backends</span> <span class="kn">import</span> <span class="n">default_backend</span>
<span class="kn">from</span> <span class="nn">Crypto.PublicKey.ECC</span> <span class="kn">import</span> <span class="n">EccPoint</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"key.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">)</span> <span class="k">as</span> <span class="n">key_file</span><span class="p">:</span>
	<span class="n">private_key</span> <span class="o">=</span> <span class="n">serialization</span><span class="p">.</span><span class="n">load_pem_private_key</span><span class="p">(</span>
		<span class="n">key_file</span><span class="p">.</span><span class="n">read</span><span class="p">(),</span>
		<span class="n">password</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
		<span class="n">backend</span><span class="o">=</span><span class="n">default_backend</span><span class="p">()</span>
	<span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="n">private_key</span><span class="p">.</span><span class="n">private_numbers</span><span class="p">().</span><span class="n">private_value</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Extracted d:"</span><span class="p">,</span> <span class="nb">hex</span><span class="p">(</span><span class="n">d</span><span class="p">))</span>

<span class="n">n</span> <span class="o">=</span> <span class="mh">0x01fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa51868783bf2f966b7fcc0148f709a5d03bb5c9b8899c47aebb6fb71e91386409</span>

<span class="n">d_inv</span> <span class="o">=</span> <span class="n">inverse_mod</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

<span class="n">Qx</span> <span class="o">=</span> <span class="mh">0x15f0683537d9a6ff956284fd77f96b5c2060d7334b8c419188fe8d8df00fb6ee88a7bd7e3653860af84c41f951961e36eec3dbde669a40b953dcec6f9d5c148a94a</span>
<span class="n">Qy</span> <span class="o">=</span> <span class="mh">0x11e37ad3acaf57a4a905213023f70f93375c1022e78a9a57a7621a709104e7276c60fd6c65f9e8c3ba866abc5ce263db163502103bf1cf448be24aa4eb3b466e305</span>
<span class="n">Q</span> <span class="o">=</span> <span class="n">EccPoint</span><span class="p">(</span><span class="n">Qx</span><span class="p">,</span> <span class="n">Qy</span><span class="p">,</span> <span class="s">"P-521"</span><span class="p">)</span>

<span class="n">P</span> <span class="o">=</span> <span class="n">d_inv</span> <span class="o">*</span> <span class="n">Q</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="nb">int</span><span class="p">(</span><span class="n">P</span><span class="p">.</span><span class="n">x</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">'</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1">#Extracted d: 0x7e5e313f85321a68abf8f291f17e93cf0cf6a0ede7004481bbebc7b820c5f7e183d4b599197771969fb744418b60f77463ac61f67035e6c0ee75f635419203163f
#helsectf{b14sEd_ECDSA_n0nSEns3!}
</span></code></pre></div></div>

<p>Flag: <code class="language-plaintext highlighter-rouge">helsectf{b14sEd_ECDSA_n0nSEns3!}</code></p>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="ECDSA" /><category term="Biased Nonces" /><category term="Hidden Number Problem" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry></feed>