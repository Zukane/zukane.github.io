<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://zukane.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://zukane.github.io/" rel="alternate" type="text/html" /><updated>2025-08-31T18:23:07+02:00</updated><id>https://zukane.github.io/feed.xml</id><title type="html">Zukane CTF</title><subtitle>Cryptography CTF Writeups</subtitle><author><name>Zukane</name></author><entry><title type="html">Crypto Party (NNS CTF 2025)</title><link href="https://zukane.github.io/crypto-party/" rel="alternate" type="text/html" title="Crypto Party (NNS CTF 2025)" /><published>2025-08-31T12:00:00+02:00</published><updated>2025-08-31T12:00:00+02:00</updated><id>https://zukane.github.io/crypto-party</id><content type="html" xml:base="https://zukane.github.io/crypto-party/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the source code of a signature service:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span>
<span class="kn">from</span> <span class="nn">secrets</span> <span class="kn">import</span> <span class="n">randbits</span>
<span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">sha384</span>
<span class="kn">from</span> <span class="nn">ecdsa</span> <span class="kn">import</span> <span class="n">curves</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="n">secret_key</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getenv</span><span class="p">(</span><span class="s">"FLAG"</span><span class="p">,</span> <span class="s">"NNS{fake_flag}"</span><span class="p">).</span><span class="n">encode</span><span class="p">())</span>
<span class="n">MAX_INVITES</span> <span class="o">=</span> <span class="mi">15</span>

<span class="n">curve_obj</span> <span class="o">=</span> <span class="n">curves</span><span class="p">.</span><span class="n">NIST384p</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">curve_obj</span><span class="p">.</span><span class="n">generator</span>
<span class="n">n</span> <span class="o">=</span> <span class="n">curve_obj</span><span class="p">.</span><span class="n">order</span>

<span class="k">def</span> <span class="nf">invite</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
    <span class="n">h</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">sha384</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">())</span>
    <span class="n">k</span> <span class="o">=</span> <span class="n">randbits</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="n">bit_length</span><span class="p">())</span>
    <span class="n">P</span> <span class="o">=</span> <span class="n">k</span> <span class="o">*</span> <span class="n">G</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">x</span><span class="p">()</span> <span class="o">%</span> <span class="n">n</span>
    <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">h</span> <span class="o">+</span> <span class="n">r</span> <span class="o">*</span> <span class="n">secret_key</span><span class="p">))</span> <span class="o">%</span> <span class="n">n</span>
    <span class="k">return</span> <span class="n">r</span><span class="p">,</span> <span class="n">s</span>

<span class="k">try</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Wassup"</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"The guest list is a bit crammed, but you can invite up to </span><span class="si">{</span><span class="n">MAX_INVITES</span><span class="si">}</span><span class="s"> friends."</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">MAX_INVITES</span><span class="p">):</span>
        <span class="n">m</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="s">"Enter the name of your friend: "</span><span class="p">).</span><span class="n">strip</span><span class="p">()</span>
        <span class="n">r</span><span class="p">,</span> <span class="n">s</span> <span class="o">=</span> <span class="n">invite</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Alright, here is </span><span class="si">{</span><span class="n">m</span><span class="si">}</span><span class="s">'s invite code:"</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Invitation code = </span><span class="si">{</span><span class="n">r</span><span class="si">}</span><span class="s">:</span><span class="si">{</span><span class="n">s</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="k">pass</span>
</code></pre></div></div>

<p>We can sign 15 messages of our choice.</p>

<h5 id="cranking-up-the-bias">Cranking up the bias</h5>

<p>The nonce $k$ is a random $N$-bit number where $N$ is the number of bits in the hash $h$. SHA384 is used to hash the messages $m$. Since the value is converted to a long, leading zero-bits are not preserved. This means we can find messages that hash to low-bit values, giving us biased nonces.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">h</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">sha384</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">())</span>
<span class="n">k</span> <span class="o">=</span> <span class="n">randbits</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="n">bit_length</span><span class="p">())</span>
</code></pre></div></div>

<p>With 15 signatures and the P384 curve, the nonce requires $x$ biased bits for the hidden number problem to work:</p>

\[\large \log_{2}(B) \leq \left[ \frac{\log_{2}(n)\cdot (m-1)}{m} - \frac{\log_{2}(m)}{2} \right]\]

<p>where $B$ is the upper bound for the nonce $k$, $n$ is the order and $m$ is the number of signatures.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="mi">384</span> <span class="o">-</span> <span class="nb">float</span><span class="p">((</span><span class="n">log</span><span class="p">(</span><span class="n">n</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">MAX_INVITES</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">MAX_INVITES</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="n">log</span><span class="p">(</span><span class="n">MAX_INVITES</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))</span>
<span class="mf">27.553445297804274</span>
</code></pre></div></div>

<p>So we need around 28 bits of leading zeroes for the hashes. Such a message can be brute-forced in Python, but is a lot faster in a lower-level language like C++ or Rust. In reality, I found that 26 bits of leading zeroes works most of the time. One such message is:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">m</span> <span class="o">=</span> <span class="s">"5831510802864336587"</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">h</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">sha384</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">())</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">h</span><span class="p">.</span><span class="n">bit_length</span><span class="p">()</span>
<span class="mi">358</span>
</code></pre></div></div>

<p>The same message can be used across signatures, so finding $15$ such messages is not necessary.</p>

<h5 id="recovering-the-private-key">Recovering the private key</h5>

<p>With the message $m$, we can query the service for $15$ signatures:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">"5831510802864336587"</span><span class="p">]</span> <span class="o">*</span> <span class="mi">15</span>
<span class="n">h_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">r_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">s_list</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"redacted.chall.nnsc.tf"</span><span class="p">,</span> <span class="mi">41337</span><span class="p">,</span> <span class="n">ssl</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"friends.</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">m_list</span><span class="p">:</span>
    <span class="n">io</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
    <span class="n">r</span><span class="p">,</span><span class="n">s</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s">"="</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s">":"</span><span class="p">)</span>
    <span class="n">r_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">strip</span><span class="p">()))</span>
    <span class="n">s_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">strip</span><span class="p">()))</span>
    <span class="n">h_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">sha384</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()))</span>
<span class="n">io</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<p>With $(r,s,h)$ its just standard a standard hidden number problem instance with zero-msb. I used the implementation from https://github.com/jvdsn/crypto-attacks/tree/master.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TOTAL_BITS</span> <span class="o">=</span> <span class="mi">384</span>
<span class="n">KNOWN_BITS</span> <span class="o">=</span> <span class="n">TOTAL_BITS</span> <span class="o">-</span> <span class="n">TARGET</span>
<span class="n">MASK_TOP</span> <span class="o">=</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">KNOWN_BITS</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">TOTAL_BITS</span> <span class="o">-</span> <span class="n">KNOWN_BITS</span><span class="p">)</span> 
<span class="n">KNOWN_VALUE</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># all top bits are 0
</span>
<span class="n">k_partial</span> <span class="o">=</span> <span class="p">[</span><span class="n">PartialInteger</span><span class="p">(</span><span class="n">KNOWN_VALUE</span><span class="p">,</span> <span class="n">MASK_TOP</span><span class="p">,</span> <span class="n">TOTAL_BITS</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">r_list</span><span class="p">))]</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">dsa_known_msb</span><span class="p">(</span><span class="n">E</span><span class="p">.</span><span class="n">order</span><span class="p">(),</span> <span class="n">h_list</span><span class="p">,</span> <span class="n">r_list</span><span class="p">,</span> <span class="n">s_list</span><span class="p">,</span> <span class="n">k_partial</span><span class="p">))[</span><span class="mi">0</span><span class="p">]))</span>
<span class="c1"># b'NNS{cr4nk_up_th3_bi4s5_y0_354910379ead}'
</span></code></pre></div></div>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">sha384</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span><span class="p">,</span> <span class="n">bytes_to_long</span>
<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">process</span><span class="p">,</span> <span class="n">remote</span>

<span class="n">p</span> <span class="o">=</span> <span class="mh">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000ffffffff</span>
<span class="n">a</span> <span class="o">=</span> <span class="mh">0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeffffffff0000000000000000fffffffc</span>
<span class="n">b</span> <span class="o">=</span> <span class="mh">0xb3312fa7e23ee7e4988e056be3f82d19181d9c6efe8141120314088f5013875ac656398d8a2ed19d2a85c8edd3ec2aef</span>
<span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">))</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="mh">0xaa87ca22be8b05378eb1c71ef320ad746e1d3b628ba79b9859f741e082542a385502f25dbf55296c3a545e3872760ab7</span><span class="p">,</span> <span class="mh">0x3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f</span><span class="p">)</span>

<span class="n">TARGET</span> <span class="o">=</span> <span class="mi">384</span> <span class="o">-</span> <span class="mi">26</span>
<span class="n">MAX_SIGNS</span> <span class="o">=</span> <span class="mi">15</span>

<span class="c1"># Bruteforced message in c++, 26 leading 0s in sha384(m)
</span><span class="n">m_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">"5831510802864336587"</span><span class="p">]</span> <span class="o">*</span> <span class="mi">15</span>
<span class="n">h_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">r_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">s_list</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="s">"redacted.chall.nnsc.tf"</span><span class="p">,</span> <span class="mi">41337</span><span class="p">,</span> <span class="n">ssl</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"friends.</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">m_list</span><span class="p">:</span>
    <span class="n">io</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">encode</span><span class="p">())</span>
    <span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">()</span>
    <span class="n">r</span><span class="p">,</span><span class="n">s</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s">"="</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">split</span><span class="p">(</span><span class="sa">b</span><span class="s">":"</span><span class="p">)</span>
    <span class="n">r_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">strip</span><span class="p">()))</span>
    <span class="n">s_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="n">strip</span><span class="p">()))</span>
    <span class="n">h_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">sha384</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()))</span>
<span class="n">io</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">shortest_vectors</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">LLL</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">B</span><span class="p">.</span><span class="n">rows</span><span class="p">():</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">row</span><span class="p">.</span><span class="n">is_zero</span><span class="p">():</span>
            <span class="k">yield</span> <span class="n">row</span>

<span class="k">class</span> <span class="nc">PartialInteger</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">bits</span><span class="p">):</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">v</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">m</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">.</span><span class="n">bit_length</span> <span class="o">=</span> <span class="n">bits</span>

    <span class="k">def</span> <span class="nf">get_known_msb</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">msb_val</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="n">msb_len</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">reversed</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">bit_length</span><span class="p">)):</span>
            <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">:</span>       
                <span class="n">msb_val</span> <span class="o">=</span> <span class="p">(</span><span class="n">msb_val</span> <span class="o">&lt;&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span>
                <span class="n">msb_len</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>                                
                <span class="k">break</span>
        <span class="k">return</span> <span class="n">msb_val</span><span class="p">,</span> <span class="n">msb_len</span>

    <span class="k">def</span> <span class="nf">get_unknown_lsb</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">lsb_len</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">bit_length</span><span class="p">):</span>
            <span class="k">if</span> <span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">:</span>        
                <span class="k">break</span>
            <span class="n">lsb_len</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">return</span> <span class="n">lsb_len</span>

    <span class="k">def</span> <span class="nf">sub</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">parts</span><span class="p">):</span>
        <span class="n">low</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">parts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">lsb_len</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">get_unknown_lsb</span><span class="p">())</span>
        <span class="n">mask_lsb</span> <span class="o">=</span> <span class="nb">int</span><span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">lsb_len</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>      
        <span class="k">return</span> <span class="n">Integer</span><span class="p">((</span><span class="nb">int</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">v</span><span class="p">)</span> <span class="o">&amp;</span> <span class="o">~</span><span class="n">mask_lsb</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">low</span> <span class="o">&amp;</span> <span class="n">mask_lsb</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">bits</span> <span class="o">=</span> <span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">reversed</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">to_bits_le</span><span class="p">()))</span>
        <span class="k">return</span> <span class="sa">f</span><span class="s">"&lt;PartialInteger </span><span class="si">{</span><span class="n">bits</span><span class="si">}</span><span class="s">&gt;"</span>

    <span class="k">def</span> <span class="nf">to_bits_le</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span>
            <span class="nb">str</span><span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">v</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="p">((</span><span class="bp">self</span><span class="p">.</span><span class="n">m</span> <span class="o">&gt;&gt;</span> <span class="n">i</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="k">else</span> <span class="s">'?'</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">bit_length</span><span class="p">)</span>
        <span class="p">]</span>

<span class="k">def</span> <span class="nf">attack</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
    <span class="n">n1</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">n2</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">a</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">B</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n1</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n2</span><span class="p">):</span>
            <span class="n">B</span><span class="p">[</span><span class="n">n1</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="n">j</span><span class="p">]</span>

        <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span>
        <span class="n">B</span><span class="p">[</span><span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="n">X</span> <span class="o">//</span> <span class="mi">2</span>

    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n2</span><span class="p">):</span>
        <span class="n">B</span><span class="p">[</span><span class="n">n1</span> <span class="o">+</span> <span class="n">j</span><span class="p">,</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span> <span class="o">/</span> <span class="n">QQ</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>

    <span class="n">B</span><span class="p">[</span><span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="p">,</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="p">]</span> <span class="o">=</span> <span class="n">X</span>

    <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">shortest_vectors</span><span class="p">(</span><span class="n">B</span><span class="p">):</span>
        <span class="n">xs</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">X</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n1</span><span class="p">)]</span>
        <span class="n">ys</span> <span class="o">=</span> <span class="p">[(</span><span class="nb">int</span><span class="p">(</span><span class="n">v</span><span class="p">[</span><span class="n">n1</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">m</span><span class="p">)</span> <span class="o">//</span> <span class="n">X</span><span class="p">)</span> <span class="o">%</span> <span class="n">m</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n2</span><span class="p">)]</span>
        <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="n">y</span> <span class="o">!=</span> <span class="mi">0</span> <span class="k">for</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">ys</span><span class="p">)</span> <span class="ow">and</span> <span class="n">v</span><span class="p">[</span><span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="p">]</span> <span class="o">==</span> <span class="n">X</span><span class="p">:</span>
            <span class="k">yield</span> <span class="n">xs</span><span class="p">,</span> <span class="n">ys</span>


<span class="k">def</span> <span class="nf">dsa_known_msb</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
    <span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">b</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">X</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">hi</span><span class="p">,</span> <span class="n">ri</span><span class="p">,</span> <span class="n">si</span><span class="p">,</span> <span class="n">ki</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
        <span class="n">msb</span><span class="p">,</span> <span class="n">msb_bit_length</span> <span class="o">=</span> <span class="n">ki</span><span class="p">.</span><span class="n">get_known_msb</span><span class="p">()</span>
        <span class="n">shift</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">**</span> <span class="n">ki</span><span class="p">.</span><span class="n">get_unknown_lsb</span><span class="p">()</span>
        <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">([(</span><span class="nb">pow</span><span class="p">(</span><span class="n">si</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">ri</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">])</span>
        <span class="n">b</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="nb">pow</span><span class="p">(</span><span class="n">si</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="o">*</span> <span class="n">hi</span> <span class="o">-</span> <span class="n">shift</span> <span class="o">*</span> <span class="n">msb</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">)</span>
        <span class="n">X</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">shift</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">k_</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">attack</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">X</span><span class="p">):</span>
        <span class="k">yield</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="n">ki</span><span class="p">.</span><span class="n">sub</span><span class="p">([</span><span class="n">ki_</span><span class="p">])</span> <span class="k">for</span> <span class="n">ki</span><span class="p">,</span> <span class="n">ki_</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">k</span><span class="p">,</span> <span class="n">k_</span><span class="p">)]</span>


<span class="n">TOTAL_BITS</span> <span class="o">=</span> <span class="mi">384</span>
<span class="n">KNOWN_BITS</span> <span class="o">=</span> <span class="n">TOTAL_BITS</span> <span class="o">-</span> <span class="n">TARGET</span>
<span class="n">MASK_TOP</span> <span class="o">=</span> <span class="p">((</span><span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="n">KNOWN_BITS</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="n">TOTAL_BITS</span> <span class="o">-</span> <span class="n">KNOWN_BITS</span><span class="p">)</span> 
<span class="n">KNOWN_VALUE</span> <span class="o">=</span> <span class="mi">0</span>  <span class="c1"># all top bits are 0
</span>
<span class="n">k_partial</span> <span class="o">=</span> <span class="p">[</span><span class="n">PartialInteger</span><span class="p">(</span><span class="n">KNOWN_VALUE</span><span class="p">,</span> <span class="n">MASK_TOP</span><span class="p">,</span> <span class="n">TOTAL_BITS</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">r_list</span><span class="p">))]</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">dsa_known_msb</span><span class="p">(</span><span class="n">E</span><span class="p">.</span><span class="n">order</span><span class="p">(),</span> <span class="n">h_list</span><span class="p">,</span> <span class="n">r_list</span><span class="p">,</span> <span class="n">s_list</span><span class="p">,</span> <span class="n">k_partial</span><span class="p">))[</span><span class="mi">0</span><span class="p">]))</span>
</code></pre></div></div>

<h5 id="cheese">Cheese</h5>

<p>because of a skill issue on my part, i overlooked the possibility of just reconnecting to the instance to get as many signatures as you want. This means the message $m$ does not need to be bruteforced. This isn’t too big of a cheese though</p>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="ECDSA" /><category term="Biased Nonces" /><category term="Hidden Number Problem" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">One Point Wonder (NNS CTF 2025)</title><link href="https://zukane.github.io/one-point-wonder/" rel="alternate" type="text/html" title="One Point Wonder (NNS CTF 2025)" /><published>2025-08-31T12:00:00+02:00</published><updated>2025-08-31T12:00:00+02:00</updated><id>https://zukane.github.io/one-point-wonder</id><content type="html" xml:base="https://zukane.github.io/one-point-wonder/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>oops, I left the codomain at home
</code></pre></div></div>

<p>In this crypto CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getPrime</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span>
<span class="kn">import</span> <span class="nn">hashlib</span><span class="p">,</span> <span class="n">os</span>

<span class="n">A</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">216</span>
<span class="n">B</span> <span class="o">=</span> <span class="mi">3</span><span class="o">^</span><span class="mi">137</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">A</span><span class="o">*</span><span class="n">B</span><span class="o">-</span><span class="mi">1</span>  
<span class="n">F</span><span class="p">.</span><span class="o">&lt;</span><span class="n">i</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="o">^</span><span class="mi">2</span><span class="p">,</span> <span class="n">modulus</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>
<span class="n">E</span>  <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>

<span class="n">P</span><span class="p">,</span> <span class="n">Q</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="n">B</span> <span class="o">*</span> <span class="n">E</span><span class="p">.</span><span class="n">random_point</span><span class="p">(),</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="n">B</span> <span class="o">*</span> <span class="n">E</span><span class="p">.</span><span class="n">random_point</span><span class="p">()</span>

<span class="n">n</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">192</span><span class="p">)</span>
<span class="n">R</span> <span class="o">=</span> <span class="n">P</span><span class="o">+</span><span class="n">n</span><span class="o">*</span><span class="n">Q</span>
<span class="n">phi</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">isogeny</span><span class="p">(</span><span class="n">R</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"factored"</span><span class="p">)</span>
<span class="n">E1</span> <span class="o">=</span> <span class="n">phi</span><span class="p">.</span><span class="n">codomain</span><span class="p">()</span>
<span class="n">phi_Q</span> <span class="o">=</span> <span class="n">phi</span><span class="p">(</span><span class="n">Q</span><span class="p">)</span>  

<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"NNS{????????????????????????????????????????}"</span>
<span class="n">iv</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">).</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">(),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
<span class="n">ct</span>     <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">pad</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="mi">16</span><span class="p">)).</span><span class="nb">hex</span><span class="p">()</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"j = </span><span class="si">{</span><span class="n">E1</span><span class="p">.</span><span class="n">j_invariant</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"phi_Q = </span><span class="si">{</span><span class="n">phi_Q</span><span class="p">.</span><span class="n">xy</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Px = </span><span class="si">{</span><span class="n">P</span><span class="p">.</span><span class="n">x</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"iv = 0x</span><span class="si">{</span><span class="n">iv</span><span class="p">.</span><span class="nb">hex</span><span class="p">()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"ct = 0x</span><span class="si">{</span><span class="n">ct</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output.txt:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>j = 18163004825157450466842625431561808301580119032536690641389327607343782773061546639751762998393779196539875597064310424073920961685*i + 10476361833492339295306564304815024338976340768866376334255986099098584965912219696568648092211110609272091912464632625421909839215
phi_Q = (22257315184457286111748155005425025792825802063434466962473902411614730361444321425941165084133078904123470449975579476128819778071*i + 18061845855380636312674581051317565846290213869393739515881756589750971883163716804746762468096421853876338415747328404551860424738, 21239731363163147620981043943699308042763543730631463607019787471251640856215020805155900823401536718518291296362081601409379355568*i + 8779826832019778481255845391809051816439178142702979062563902351719032536488132695732061179503752527439223190037985972241319740694)
P.x = 5742624188458182376342316433128292705785222467523243855400928831210046626067548089223190334236246885842905182649500944382581000934*i + 7663161849826271980659169578693116528205934627239444675180416649810833094415206594178398886032480427742749796072416769297624604592
iv = 0x7da8f855ac70f87cc7fabc60f559047b
ct = 0x70914c9c205858e6cdffa72b5c5cabe45e0a85fda2e1caf3e511a8181a971525ec3a9da2e5bbaa0d158feff5c81f
</code></pre></div></div>

<p>We are given $\phi(Q)$ and $P.x$, and it seems like we have to solve a DLP to recover the AES key.</p>

<h5 id="recovering-the-curve-parameters">Recovering the curve parameters</h5>

<p>Firstly, we need to recover the curve parameters of the codomain $E_{1}$ using the j-invariant and point $\phi_{Q}$. Recall the formula for the j-invariant:</p>

\[\large j = 1728 \frac{4a^{3}}{4a^{3}+27b^{2}}\]

<p>And the short Weierstrass equation for $\phi_{Q}$:</p>

\[\large y_{Q}^{2} = x_{Q}^{3} + ax_{Q} + b\]

<p>Since we have two equations with two unknowns $a$ and $b$, we can solve for the curve parameters. We begin by writing $b$ in terms of $a$ by rearranging the short Weierstrass equation:</p>

\[\large b = y_Q^{2} - x_Q^{3} - ax_Q\]

<p>We then rearrange the equation for the j-invariant, to move everything to one side:</p>

\[\large 4a^{3}(j-1728)+27jb^{2}=0\]

<p>By plugging in the expression for $b$, we create a cubic polynomial in $a$. We can test each root, and for each candidate $a$, check if the resulting curve has our desired order. In this case, there is only one root, so we use it directy:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">poly</span>  <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1728</span><span class="p">)</span><span class="o">*</span><span class="n">a</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">27</span><span class="o">*</span><span class="n">j</span><span class="o">*</span><span class="n">b</span><span class="o">^</span><span class="mi">2</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">poly</span><span class="p">.</span><span class="n">roots</span><span class="p">()[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">E1</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">])</span>
<span class="n">Q_</span> <span class="o">=</span> <span class="n">E1</span><span class="p">(</span><span class="n">Qx</span><span class="p">,</span> <span class="n">Qy</span><span class="p">)</span>
<span class="k">assert</span> <span class="p">(</span><span class="n">B</span><span class="o">*</span><span class="n">Q_</span><span class="p">).</span><span class="n">is_zero</span><span class="p">()</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">((</span><span class="n">B</span><span class="o">//</span><span class="mi">3</span><span class="p">)</span><span class="o">*</span><span class="n">Q_</span><span class="p">).</span><span class="n">is_zero</span><span class="p">()</span>
</code></pre></div></div>

<h5 id="recovering-the-isogeny">Recovering the isogeny</h5>

<p>With the codomain $E_{1}$ recovered, we can use it along with the image point $\phi(Q)$ to recover the isogeny $\phi$.</p>

<p>We want $\phi$ so we can evaluate $\phi(P)$, because it will allow us to set up the discrete logarithm problem to recover $n$. $R$ is the kernel, so we  have $\phi(R) = O$. We observe the following:</p>

\[\large
\begin{align}
\phi(R) &amp;= \phi(P + nQ) \\
O &amp;= \phi(P) + n \cdot \phi(Q) \\
-\phi(P) &amp;= n \cdot \phi(Q)
\end{align}\]

<p>We have found the co-domain $E_{1}$ of curve $E_{0}$. We can try to find the isogeny $\hat{\phi}: E_{1} \rightarrow E_{0}$, where we then find it’s dual in order to recover $\phi$.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phi_hat</span> <span class="o">=</span> <span class="n">E1</span><span class="p">.</span><span class="n">isogeny</span><span class="p">(</span><span class="n">phi_Q</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"factored"</span><span class="p">)</span>
</code></pre></div></div>

<p>This only gives us an isogeny $\hat{\phi}: E_{1} \rightarrow E_{0}’$, where $E_{0}’$ is isomorphic to $E_{0}$ but not actually equal to $E_{0}$. We need the co-domain of $\hat{\phi}$ to be exactly $E_{0}$. We could find the unique isomorphism $\psi: E_{0}’ \rightarrow E_{0}$ and then use the composition $\psi \circ \hat{\phi} : E_{1} \rightarrow E_{0}$, however, SageMath lets us specify the desired codomain directly:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phi_hat</span> <span class="o">=</span> <span class="n">E1</span><span class="p">.</span><span class="n">isogeny</span><span class="p">(</span><span class="n">phi_Q</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"factored"</span><span class="p">,</span> <span class="n">codomain</span><span class="o">=</span><span class="n">E0</span><span class="p">)</span>
</code></pre></div></div>

<p>Now that we have an isogeny whose co-domain is exactly $E_{0}$, we can take the dual in order to recover $\phi$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">phi</span> <span class="o">=</span> <span class="n">phi_hat</span><span class="p">.</span><span class="n">dual</span><span class="p">()</span>
</code></pre></div></div>

<p>From here, we calculate $\phi(P)$ and insert it in the discrete logarithm problem to solve for $n$. However, since we are only given $P.x$, we have to lift the x-coordinate on the curve $E_{0}$ and test both possible points.</p>

<h5 id="decrypting-the-flag">Decrypting the flag</h5>

<p>By solving the DLP for both $\phi(P)$ and $\phi(-P)$, the recovered value $n$ is the AES key which can be used to decrypt the ciphertext:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">phi</span><span class="p">(</span><span class="n">P</span><span class="p">),</span> <span class="n">phi_Q</span><span class="p">,</span> <span class="n">operation</span><span class="o">=</span><span class="s">'+'</span><span class="p">,</span> <span class="nb">ord</span><span class="o">=</span><span class="n">B</span><span class="p">)</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">).</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">(),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">iv</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">unpad</span><span class="p">(</span><span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="n">ct</span><span class="p">)),</span><span class="mi">16</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
</code></pre></div></div>

<p>This gives us our flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NNS{bu1lD_CuRv3_r3c0v3r_1s0g3ny_d3cRyp7_fl4g}
</code></pre></div></div>

<h5 id="solvesage">solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">unpad</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="n">proof</span><span class="p">.</span><span class="nb">all</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

<span class="n">A</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">216</span>
<span class="n">B</span> <span class="o">=</span> <span class="mi">3</span><span class="o">^</span><span class="mi">137</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">A</span><span class="o">*</span><span class="n">B</span> <span class="o">-</span> <span class="mi">1</span>
<span class="n">F</span><span class="p">.</span><span class="o">&lt;</span><span class="n">i</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="o">^</span><span class="mi">2</span><span class="p">,</span> <span class="n">modulus</span><span class="o">=</span><span class="n">x</span><span class="o">^</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
<span class="n">E0</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>

<span class="n">Px</span> <span class="o">=</span> <span class="mi">7154845853584465773274560285556998041316880875933428625989508840930540660640386605518629576825395103283629863864475785639190189540</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="mi">7055760255797631743070087750378584646385412285826739992132686291867615676943829419672853502757913189891063696683042430994015726061</span>
<span class="n">j</span> <span class="o">=</span> <span class="mi">13897943968670627028821175800566083246788250194739801184755379106763256231540209142346577809447217378788456971272445373264849010133</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="mi">23780011362891232032543058818843206569075289330860563525186623156946237644042578939371224060623299802446529270938546128646375815042</span>
<span class="n">phi_Q</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1438336939527776473524156661440334137208701955112492905069323395488777827834790134059116893010523111877971455504309886416495150015</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="mi">3427726008556100688888416236611350024877356838402910936483689909032270130497153660883916133984220069248107328366037201206313414045</span><span class="p">,</span> <span class="mi">6796549415058176434426312807671630923318528924038107427972821512510845938594581102460415477288633003544443376494889850457469057366</span><span class="o">*</span><span class="n">i</span> <span class="o">+</span> <span class="mi">22484510185502283667379549736147041418927205110085658279406360321295482559193327870894913536669477509036655550593482159665400332205</span><span class="p">)</span>
<span class="n">iv</span> <span class="o">=</span> <span class="mh">0xd1b026cb22769d8e3ee4a8bfcd16d6e4</span>
<span class="n">ct</span> <span class="o">=</span> <span class="mh">0xe6c19149e1e8f9b8f7b2cf16233d5b2f19c96b011521114d352d9d6925b4e444c1280eea906716fb3da1080d0194f8db</span>

<span class="n">Qx</span><span class="p">,</span> <span class="n">Qy</span> <span class="o">=</span> <span class="n">phi_Q</span>
<span class="n">R</span><span class="p">.</span><span class="o">&lt;</span><span class="n">a</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">F</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">Qy</span><span class="o">^</span><span class="mi">2</span> <span class="o">-</span> <span class="n">Qx</span><span class="o">^</span><span class="mi">3</span> <span class="o">-</span> <span class="n">a</span><span class="o">*</span><span class="n">Qx</span>
<span class="n">poly</span>  <span class="o">=</span> <span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="n">j</span><span class="o">-</span><span class="mi">1728</span><span class="p">)</span><span class="o">*</span><span class="n">a</span><span class="o">^</span><span class="mi">3</span> <span class="o">+</span> <span class="mi">27</span><span class="o">*</span><span class="n">j</span><span class="o">*</span><span class="n">b</span><span class="o">^</span><span class="mi">2</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">poly</span><span class="p">.</span><span class="n">roots</span><span class="p">()[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
<span class="n">E1</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">F</span><span class="p">,</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">])</span>
<span class="n">Q_</span> <span class="o">=</span> <span class="n">E1</span><span class="p">(</span><span class="n">Qx</span><span class="p">,</span> <span class="n">Qy</span><span class="p">)</span>
<span class="k">assert</span> <span class="p">(</span><span class="n">B</span><span class="o">*</span><span class="n">Q_</span><span class="p">).</span><span class="n">is_zero</span><span class="p">()</span> <span class="ow">and</span> <span class="ow">not</span> <span class="p">((</span><span class="n">B</span><span class="o">//</span><span class="mi">3</span><span class="p">)</span><span class="o">*</span><span class="n">Q_</span><span class="p">).</span><span class="n">is_zero</span><span class="p">()</span>

<span class="n">phi_Q</span> <span class="o">=</span> <span class="n">E1</span><span class="p">(</span><span class="n">phi_Q</span><span class="p">)</span>
<span class="n">phi_Q</span><span class="p">.</span><span class="n">set_order</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
<span class="n">phi_hat</span> <span class="o">=</span> <span class="n">E1</span><span class="p">.</span><span class="n">isogeny</span><span class="p">(</span><span class="n">phi_Q</span><span class="p">,</span> <span class="n">algorithm</span><span class="o">=</span><span class="s">"factored"</span><span class="p">,</span> <span class="n">codomain</span><span class="o">=</span><span class="n">E0</span><span class="p">)</span>
<span class="n">phi</span> <span class="o">=</span> <span class="n">phi_hat</span><span class="p">.</span><span class="n">dual</span><span class="p">()</span>

<span class="k">for</span> <span class="n">P</span> <span class="ow">in</span> <span class="n">E0</span><span class="p">.</span><span class="n">lift_x</span><span class="p">(</span><span class="n">Px</span><span class="p">,</span> <span class="nb">all</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">phi</span><span class="p">(</span><span class="n">P</span><span class="p">),</span> <span class="n">phi_Q</span><span class="p">,</span> <span class="n">operation</span><span class="o">=</span><span class="s">'+'</span><span class="p">,</span> <span class="nb">ord</span><span class="o">=</span><span class="n">B</span><span class="p">)</span>
        <span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">).</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">(),</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">iv</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="n">unpad</span><span class="p">(</span><span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="n">ct</span><span class="p">)),</span><span class="mi">16</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">continue</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Isogeny" /><category term="DLP" /><category term="Parameter recovery" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Origami (NNS CTF 2025)</title><link href="https://zukane.github.io/origami/" rel="alternate" type="text/html" title="Origami (NNS CTF 2025)" /><published>2025-08-31T12:00:00+02:00</published><updated>2025-08-31T12:00:00+02:00</updated><id>https://zukane.github.io/origami</id><content type="html" xml:base="https://zukane.github.io/origami/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Origami is a ntruly marvellous artform
</code></pre></div></div>

<p>In this CTF challenge, we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">long_to_bytes</span>

<span class="n">n</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">df</span><span class="p">,</span><span class="n">dg</span><span class="p">,</span><span class="n">dr</span><span class="o">=</span><span class="p">[</span><span class="mi">512</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">127</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">35</span><span class="p">,</span><span class="mi">22</span><span class="p">]</span>
<span class="n">R</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span>  <span class="o">=</span> <span class="n">ZZ</span><span class="p">[]</span>
<span class="n">Rq</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Integers</span><span class="p">(</span><span class="n">q</span><span class="p">)[]</span>
<span class="n">Rqn</span> <span class="o">=</span> <span class="n">Rq</span><span class="p">.</span><span class="n">quotient</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">Rp</span><span class="p">.</span><span class="o">&lt;</span><span class="n">w</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Integers</span><span class="p">(</span><span class="n">p</span><span class="p">)[]</span>
<span class="n">Rpn</span> <span class="o">=</span> <span class="n">Rp</span><span class="p">.</span><span class="n">quotient</span><span class="p">(</span><span class="n">w</span><span class="o">^</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">random_poly</span><span class="p">(</span><span class="n">d</span><span class="p">):</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">sample</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">),</span><span class="n">d</span><span class="p">):</span>
        <span class="n">f</span> <span class="o">+=</span> <span class="n">R</span><span class="p">(</span><span class="n">x</span><span class="o">**</span><span class="n">i</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">f</span>

<span class="k">def</span> <span class="nf">secretkey_gen</span><span class="p">():</span>
    <span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">while</span> <span class="ow">not</span> <span class="n">Rpn</span><span class="p">(</span><span class="n">f</span><span class="p">).</span><span class="n">is_unit</span><span class="p">()</span> <span class="ow">or</span> <span class="ow">not</span> <span class="n">Rqn</span><span class="p">(</span><span class="n">f</span><span class="p">).</span><span class="n">is_unit</span><span class="p">():</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">random_poly</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
        <span class="n">g</span> <span class="o">=</span> <span class="n">random_poly</span><span class="p">(</span><span class="n">dg</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">f</span><span class="p">,</span><span class="n">g</span>

<span class="k">def</span> <span class="nf">publickey_gen</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">g</span><span class="p">):</span>
    <span class="n">h</span> <span class="o">=</span> <span class="n">Rqn</span><span class="p">(</span><span class="n">g</span><span class="p">)</span><span class="o">/</span><span class="n">Rqn</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">h</span>

<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">h</span><span class="p">,</span><span class="n">m</span><span class="p">):</span>
    <span class="n">r</span> <span class="o">=</span> <span class="n">random_poly</span><span class="p">(</span><span class="n">dr</span><span class="p">)</span>
    <span class="n">c</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">h</span> <span class="o">*</span> <span class="n">Rqn</span><span class="p">(</span><span class="n">r</span><span class="p">)</span> <span class="o">+</span> <span class="n">Rqn</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">c</span>
    
<span class="k">def</span> <span class="nf">encode</span><span class="p">(</span><span class="n">val</span><span class="p">):</span>
    <span class="n">poly</span> <span class="o">=</span> <span class="n">R</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">poly</span> <span class="o">+=</span> <span class="p">(</span><span class="n">val</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">x</span><span class="o">^</span><span class="n">i</span>
        <span class="n">val</span> <span class="o">&gt;&gt;=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">poly</span>

<span class="n">f</span><span class="p">,</span><span class="n">g</span> <span class="o">=</span> <span class="n">secretkey_gen</span><span class="p">()</span>
<span class="n">pk</span> <span class="o">=</span> <span class="n">publickey_gen</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">g</span><span class="p">)</span>

<span class="n">flag</span> <span class="o">=</span> <span class="n">encode</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="sa">b</span><span class="s">"NNS{???????????????????????????????????????????????}"</span><span class="p">))</span>
<span class="n">ct</span> <span class="o">=</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">pk</span><span class="p">,</span><span class="n">flag</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"pk = </span><span class="si">{</span><span class="n">pk</span><span class="p">.</span><span class="n">lift</span><span class="p">().</span><span class="n">coefficients</span><span class="p">(</span><span class="n">sparse</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"ct = </span><span class="si">{</span><span class="n">ct</span><span class="p">.</span><span class="n">lift</span><span class="p">().</span><span class="n">coefficients</span><span class="p">(</span><span class="n">sparse</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output in output.txt:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pk = [126, 74, 108, 97, 86, 46, 112, 34, 101, 40, 119, 70, 112, 77, 71, 15, 77, 30, 102, 93, 64, 22, 1, 119, 35, 67, 70, 54, 45, 116, 67, 53, 55, 53, 6, 46, 72, 116, 113, 32, 55, 56, 83, 32, 10, 52, 77, 94, 61, 18, 99, 55, 65, 80, 13, 38, 17, 104, 88, 115, 24, 60, 1, 31, 65, 105, 120, 37, 91, 29, 113, 9, 108, 115, 66, 16, 33, 77, 40, 22, 122, 74, 18, 63, 6, 17, 124, 110, 71, 93, 106, 74, 25, 108, 24, 119, 96, 117, 10, 78, 65, 64, 115, 59, 3, 110, 39, 64, 93, 123, 88, 95, 48, 34, 86, 12, 82, 67, 117, 118, 90, 107, 12, 17, 102, 52, 0, 16, 71, 2, 26, 26, 43, 55, 113, 63, 15, 27, 48, 90, 115, 16, 25, 126, 104, 28, 12, 90, 108, 20, 108, 46, 45, 101, 88, 4, 126, 115, 32, 0, 72, 6, 5, 112, 14, 49, 58, 64, 21, 64, 90, 79, 96, 90, 71, 35, 3, 77, 5, 27, 72, 69, 70, 87, 38, 98, 46, 51, 15, 78, 90, 13, 14, 56, 120, 74, 59, 95, 56, 96, 52, 69, 45, 33, 82, 44, 111, 90, 105, 45, 45, 17, 111, 9, 58, 19, 106, 30, 66, 119, 95, 50, 21, 104, 10, 103, 93, 47, 109, 16, 5, 67, 98, 126, 13, 2, 105, 121, 40, 108, 91, 111, 96, 86, 41, 98, 10, 34, 114, 33, 15, 53, 121, 4, 115, 47]
ct = [89, 49, 11, 57, 106, 101, 122, 57, 34, 67, 63, 35, 21, 72, 84, 23, 65, 4, 91, 79, 51, 86, 68, 94, 81, 50, 102, 8, 18, 64, 28, 7, 69, 91, 82, 13, 2, 17, 29, 12, 88, 81, 98, 26, 94, 102, 18, 94, 82, 30, 79, 118, 55, 41, 101, 109, 44, 78, 124, 118, 9, 79, 110, 94, 75, 62, 52, 116, 46, 13, 55, 24, 43, 89, 46, 119, 11, 1, 33, 83, 117, 80, 35, 109, 39, 44, 114, 0, 59, 86, 13, 29, 14, 93, 124, 17, 30, 29, 67, 67, 79, 30, 46, 35, 38, 33, 58, 120, 112, 68, 74, 85, 110, 57, 27, 3, 107, 42, 70, 105, 12, 16, 101, 17, 4, 125, 19, 57, 70, 35, 114, 28, 111, 108, 123, 31, 49, 95, 74, 77, 82, 44, 123, 62, 47, 6, 87, 116, 17, 68, 39, 24, 26, 107, 75, 20, 33, 10, 17, 55, 101, 4, 115, 92, 98, 101, 22, 23, 95, 91, 19, 15, 111, 60, 29, 124, 113, 60, 28, 15, 74, 107, 76, 78, 81, 115, 118, 15, 93, 117, 72, 46, 81, 18, 44, 37, 126, 24, 77, 27, 31, 67, 99, 60, 96, 66, 93, 112, 13, 10, 91, 0, 80, 12, 67, 46, 115, 53, 37, 64, 43, 120, 116, 27, 58, 3, 62, 14, 79, 41, 39, 30, 103, 39, 50, 56, 123, 21, 2, 55, 110, 99, 100, 24, 62, 20, 10, 102, 80, 44, 51, 9, 100, 31, 79, 92]
</code></pre></div></div>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>The encryption script implements NTRUEncrypt with parameters:</p>

\[\large
\begin{align}
\nonumber N &amp;= 512 \\
\nonumber p &amp;= 2 \\
\nonumber q &amp;= 127 \\
\nonumber df, dg &amp;= 35 \\
\nonumber dr &amp;= 22
\end{align}\]

<p>The only notable part is the highly composite $N=512$. Reading around, it seems that a prime $N$ isn’t completely necessary, but it is recommended. Searching for some attacks against NTRU with a composite $N$, we stumble upon the paper <code class="language-plaintext highlighter-rouge">Key Recovery and Message Attacks on NTRU-Composite</code> by Craig Gentry https://www.iacr.org/archive/eurocrypt2001/20450181.pdf. This paper details what is known as a <code class="language-plaintext highlighter-rouge">folding attack</code>, which seems like an intended approach based on the challenge name <code class="language-plaintext highlighter-rouge">Origami</code>. Section 6 of Gentry’s paper explains results of the attack on NTRU-256, where Silverman had proposed choosing $N$ to be a power of 2. In our case, $N=512$ is indeed a power of two.</p>

<h5 id="ntru-recap">NTRU recap</h5>

<p>NTRU is a set of lattice-based public key algorithms (NTRUEncrypt, NTRUSign). It represents keys and ciphertexts as short polynomials in the quotient ring:</p>

\[\large \mathbb{Z}_{q}[x]/(x^{N}-1)\]

<p>The security in NTRU comes from the difficulty of finding a very short vector in the associated NTRU lattice. Key generation in NTRU works by picking two small ternary polynomials, $f$ and $g$ (ternary meaning coefficients in ${-1,0,1}$). We publish the public key $h$:</p>

\[\large h = p \cdot f_{q}^{-1}\cdot g \mod q\]

<p>Here, $f$ and $g$ make up the private key. Encryption in NTRUEncrypt works as follows:</p>

\[\large ct = h \cdot r + m \mod q\]

<p>$h$ is the public key, $m$ is the plaintext message, and $r$ is a small randomly generated polynomial, most often ternary too. $r$ must remain secret! We may also choose to include the factor $p$ in the ciphertext $ct$ instead of the public key $h$. 
Decryption in NTRUEncrypt works as follows:</p>

\[\large a = f \cdot e \mod q\]

<p>and the coefficients are recentered to $\left( -{q}/{2}, \;{q}/{2} \right)$. Then, we do:</p>

\[\large m = f_{p}^{-1} \cdot a \mod p\]

<p>which recovers the original plaintext message $m$.. If $N$ is very small, it may be possible to retrieve $f$ and $g$ trivially using the <code class="language-plaintext highlighter-rouge">NTRU lattice</code>:</p>

\[\large B = 
\begin{pmatrix}
qI_{N} &amp; 0 \\
H &amp; I_{N}
\end{pmatrix}\]

<p>Where $H$ is the $N \times N$ circulant convolution matrix of the public key $h$. Running LLL on this gives $g$ and $f$ (or $-g$ and $-f$) in the first row.</p>

<h5 id="gentrys-folding-attack">Gentry’s folding attack</h5>

<p>If $N$ is composite, there is a natural “folding” ring homomorphism:</p>

\[\large \theta_{d}: \mathbb{Z}_{q}[x]/(x^{N}-1) \quad \rightarrow \quad \mathbb{Z}_{q}[x]/(x^{d}-1)\]

<p>Since $x^{d}-1$ divides $x^{N}-1$ whenever $d$ divides $N$. Being a ring map, it preserves the convolution $f^{(d)} * h^{(d)} = g^{(d)} \bmod q$. This lets us replace the $2N$-dimensional NTRU lattice with a smaller $2d$-dimensional lattice which contains a shorter “folded” key $(f^{(d)}, g^{(d)})$.</p>

<p>It turns out that the folding gives us the linear relations:</p>

\[\large \begin{align}
\nonumber f^{(d)}_{i} &amp;= f_{i} + f_{i+d} \\
\nonumber f_{i+d} &amp;= f^{(d)}_{i} - f_{i}
\end{align}\]

<p>Which means that the second half of $f$ is determined by $f^{(d)}$ and the first half of $f$. This relation is the key for the attack. With the relations, we can build the following modified NTRU lattice:</p>

\[\large M = \begin{bmatrix}
0 &amp; t \\
I_{d} &amp; H_{i}-H_{i+d} \\
0 &amp; qI_{N}
\end{bmatrix}\]

<p>With $N=512$, the attack is comprised of four steps:</p>

<ul>
  <li>Step 1: $d=64$ to get $(f^{(64)},g^{(64)})$</li>
  <li>Step 2: $d=128$ to get $(f^{(128)},g^{(128)})$ and linear relations linking the two quarters of $f$</li>
  <li>Step 2: $d=256$ to get $(f^{(256)},g^{(256)})$ and linear relations linking the two halves of $f$</li>
  <li>Step 4: $d=512$, use the relations to build a $(2N+1) \times (2N)$ lattice with target $(u,v)$ corresponding to the first $d$ coefficients of $(f,g)$. Since $d=N$ in this step, we completely recover $(f,g)$.</li>
</ul>

<h5 id="attack-implementation">Attack implementation</h5>

<p>We are given the public key $h$. Step 1 of the attack can be done by just solving the normal NTRU lattice with BKZ on</p>

\[\large \mathbb{Z}_{q}[x]/(x^{64}-1)\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">prev</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Searching for fold..."</span><span class="p">)</span>
    <span class="n">H</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">circulant</span><span class="p">([</span><span class="n">hh</span><span class="p">.</span><span class="n">lift_centered</span><span class="p">()</span> <span class="k">for</span> <span class="n">hh</span> <span class="ow">in</span> <span class="n">h</span><span class="p">.</span><span class="n">lift</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="n">d</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)])</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">prev</span><span class="p">:</span> <span class="c1"># normal NTRULattice
</span>        <span class="k">return</span> <span class="n">block_matrix</span><span class="p">([</span>
            <span class="p">[</span><span class="n">identity_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">),</span> <span class="n">H</span><span class="p">],</span>
            <span class="p">[</span><span class="n">zero_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">),</span> <span class="n">q</span><span class="o">*</span><span class="n">identity_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">)]</span>
        <span class="p">])</span>
    <span class="p">[...]</span>

<span class="n">L3</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="mi">8</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
</code></pre></div></div>

<p>The resulting basis is then scanned for the folded secret $f^{(d)}$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">enum_basis</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">prev</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">L</span><span class="p">.</span><span class="n">nrows</span><span class="p">()):</span>
        <span class="n">v</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">][:</span><span class="n">L</span><span class="p">.</span><span class="n">ncols</span><span class="p">()</span><span class="o">//</span><span class="mi">2</span><span class="p">]</span>              
        <span class="k">if</span> <span class="nb">max</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">v</span> <span class="o">=</span> <span class="o">-</span><span class="n">v</span>
        <span class="k">if</span> <span class="nb">min</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>  
            <span class="n">c</span> <span class="o">=</span> <span class="n">v</span> <span class="k">if</span> <span class="n">prev</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">v</span><span class="p">.</span><span class="n">concatenate</span><span class="p">(</span><span class="n">prev</span> <span class="o">-</span> <span class="n">v</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">c</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">df</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">c</span>
    <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"No candidate found"</span><span class="p">)</span>

<span class="p">[...]</span>
<span class="n">f3</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L3</span><span class="p">)</span>
</code></pre></div></div>

<p>Subsequent steps are then solved and enumerated using the relations $f_{i+d} = f^{(d)}<em>{i} - f</em>{i}$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">prev</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Searching for fold..."</span><span class="p">)</span>
    <span class="n">H</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">circulant</span><span class="p">([</span><span class="n">hh</span><span class="p">.</span><span class="n">lift_centered</span><span class="p">()</span> <span class="k">for</span> <span class="n">hh</span> <span class="ow">in</span> <span class="n">h</span><span class="p">.</span><span class="n">lift</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="n">d</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)])</span>

	<span class="p">[...]</span>

    <span class="n">I</span> <span class="o">=</span> <span class="n">identity_matrix</span><span class="p">(</span><span class="n">d</span><span class="o">//</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">vector</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">prev</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">d</span><span class="o">//</span><span class="mi">2</span><span class="p">))</span> <span class="o">*</span> <span class="n">H</span>
    <span class="n">L_ug</span> <span class="o">=</span> <span class="n">block_matrix</span><span class="p">([</span>
        <span class="p">[</span><span class="n">I</span><span class="p">,</span> <span class="n">I</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="o">-</span><span class="n">I</span><span class="p">)</span> <span class="o">*</span> <span class="n">H</span><span class="p">],</span>
        <span class="p">[</span><span class="n">zero_matrix</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="o">//</span><span class="mi">2</span><span class="p">),</span> <span class="n">t</span><span class="p">.</span><span class="n">row</span><span class="p">()],</span>
        <span class="p">[</span><span class="n">zero_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">d</span><span class="o">//</span><span class="mi">2</span><span class="p">),</span> <span class="n">q</span><span class="o">*</span><span class="n">identity_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">)]</span>
    <span class="p">])</span>
    <span class="k">return</span> <span class="n">L_ug</span><span class="p">[:</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="p">:</span><span class="n">d</span><span class="p">]</span>

<span class="p">[...]</span>
<span class="n">L2</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">f3</span><span class="p">).</span><span class="n">delete_rows</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">f3</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
<span class="n">f2</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L2</span><span class="p">,</span> <span class="n">f3</span><span class="p">)</span>
</code></pre></div></div>

<p>The same is repeated until the entire key $f$ is recovered:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">attack</span><span class="p">(</span><span class="n">h</span><span class="p">):</span>
    <span class="n">L3</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="mi">8</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
    <span class="n">f3</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L3</span><span class="p">)</span>

    <span class="n">L2</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">f3</span><span class="p">).</span><span class="n">delete_rows</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">f3</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
    <span class="n">f2</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L2</span><span class="p">,</span> <span class="n">f3</span><span class="p">)</span>

    <span class="n">L1</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">f2</span><span class="p">).</span><span class="n">delete_rows</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">f2</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
    <span class="n">f1</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L1</span><span class="p">,</span> <span class="n">f2</span><span class="p">)</span>

    <span class="n">L0</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">f1</span><span class="p">).</span><span class="n">delete_rows</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
    <span class="n">f0</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L0</span><span class="p">,</span> <span class="n">f1</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">R</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">f0</span><span class="p">))</span>
</code></pre></div></div>

<p>For <code class="language-plaintext highlighter-rouge">L2, L1, L0</code>, we delete the rows that correspond to already known zero-positions in $f^{(d)}$, which shrinks the lattice and makes BKZ easier. This is because when $f_{i}^{(d)} = 0$, we know $f_{i}  = f_{i+d} = 0$ since $f_{i} \in [0, 1]$. This is also mentioned in the paper.</p>

<p>Finally, we recover the key $f$ and the ciphertext can be trivially decrypted:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
    <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span> <span class="n">Rqn</span><span class="p">(</span><span class="n">f</span><span class="p">)).</span><span class="n">lift</span><span class="p">()</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">Rpn</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">/</span><span class="n">Rpn</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">R</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">lift</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">poly</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">((</span><span class="n">c</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">poly</span><span class="p">.</span><span class="nb">list</span><span class="p">()))</span>

<span class="n">sk</span> <span class="o">=</span> <span class="n">attack</span><span class="p">(</span><span class="n">Rqn</span><span class="p">(</span><span class="n">pk</span><span class="p">))</span>
<span class="n">d</span>  <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span><span class="n">Rqn</span><span class="p">(</span><span class="n">ct</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">decode</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">').decode()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="c1"># NNS{k33p_f0ld1ng_4nd_f0ld1ng_l1k3_4n_0r1g4m1_m4st3r}
</span></code></pre></div></div>

<p>Which gives us our flag <code class="language-plaintext highlighter-rouge">NNS{k33p_f0ld1ng_4nd_f0ld1ng_l1k3_4n_0r1g4m1_m4st3r}</code>.</p>

<p>Some implementation aspects are borrowed from https://qiita.com/xagawa/items/0f97641e9c3ef0633f1f, some credit is due</p>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">n</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">df</span><span class="p">,</span> <span class="n">dg</span><span class="p">,</span> <span class="n">dr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">512</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">127</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">22</span><span class="p">]</span>
<span class="n">R</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span>  <span class="o">=</span> <span class="n">ZZ</span><span class="p">[]</span>
<span class="n">Rq</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Integers</span><span class="p">(</span><span class="n">q</span><span class="p">)[]</span>
<span class="n">Rqn</span> <span class="o">=</span> <span class="n">Rq</span><span class="p">.</span><span class="n">quotient</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">Rp</span><span class="p">.</span><span class="o">&lt;</span><span class="n">w</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">Integers</span><span class="p">(</span><span class="n">p</span><span class="p">)[]</span>
<span class="n">Rpn</span> <span class="o">=</span> <span class="n">Rp</span><span class="p">.</span><span class="n">quotient</span><span class="p">(</span><span class="n">w</span><span class="o">^</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">decrypt</span><span class="p">(</span><span class="n">f</span><span class="p">,</span><span class="n">c</span><span class="p">):</span>
    <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span> <span class="o">*</span> <span class="n">Rqn</span><span class="p">(</span><span class="n">f</span><span class="p">)).</span><span class="n">lift</span><span class="p">()</span>
    <span class="n">m</span> <span class="o">=</span> <span class="n">Rpn</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="o">/</span><span class="n">Rpn</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">R</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">lift</span><span class="p">())</span>

<span class="k">def</span> <span class="nf">decode</span><span class="p">(</span><span class="n">poly</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">sum</span><span class="p">((</span><span class="n">c</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">poly</span><span class="p">.</span><span class="nb">list</span><span class="p">()))</span>

<span class="c1"># Gentry's folding attack
</span><span class="k">def</span> <span class="nf">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">prev</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Searching for fold..."</span><span class="p">)</span>
    <span class="n">H</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">.</span><span class="n">circulant</span><span class="p">([</span><span class="n">hh</span><span class="p">.</span><span class="n">lift_centered</span><span class="p">()</span> <span class="k">for</span> <span class="n">hh</span> <span class="ow">in</span> <span class="n">h</span><span class="p">.</span><span class="n">lift</span><span class="p">()</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="n">d</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)])</span>

    <span class="k">if</span> <span class="ow">not</span> <span class="n">prev</span><span class="p">:</span> <span class="c1"># normal NTRULattice
</span>        <span class="k">return</span> <span class="n">block_matrix</span><span class="p">([</span>
            <span class="p">[</span><span class="n">identity_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">),</span> <span class="n">H</span><span class="p">],</span>
            <span class="p">[</span><span class="n">zero_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">),</span> <span class="n">q</span><span class="o">*</span><span class="n">identity_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">)]</span>
        <span class="p">])</span>

    <span class="n">I</span> <span class="o">=</span> <span class="n">identity_matrix</span><span class="p">(</span><span class="n">d</span><span class="o">//</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">t</span> <span class="o">=</span> <span class="n">vector</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">prev</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">d</span><span class="o">//</span><span class="mi">2</span><span class="p">))</span> <span class="o">*</span> <span class="n">H</span>
    <span class="n">L_ug</span> <span class="o">=</span> <span class="n">block_matrix</span><span class="p">([</span>
        <span class="p">[</span><span class="n">I</span><span class="p">,</span> <span class="n">I</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="o">-</span><span class="n">I</span><span class="p">)</span> <span class="o">*</span> <span class="n">H</span><span class="p">],</span>
        <span class="p">[</span><span class="n">zero_matrix</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">d</span><span class="o">//</span><span class="mi">2</span><span class="p">),</span> <span class="n">t</span><span class="p">.</span><span class="n">row</span><span class="p">()],</span>
        <span class="p">[</span><span class="n">zero_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">d</span><span class="o">//</span><span class="mi">2</span><span class="p">),</span> <span class="n">q</span><span class="o">*</span><span class="n">identity_matrix</span><span class="p">(</span><span class="n">d</span><span class="p">)]</span>
    <span class="p">])</span>
    <span class="k">return</span> <span class="n">L_ug</span><span class="p">[:</span><span class="n">d</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="p">:</span><span class="n">d</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">enum_basis</span><span class="p">(</span><span class="n">L</span><span class="p">,</span> <span class="n">prev</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">L</span><span class="p">.</span><span class="n">nrows</span><span class="p">()):</span>
        <span class="n">v</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">i</span><span class="p">][:</span><span class="n">L</span><span class="p">.</span><span class="n">ncols</span><span class="p">()</span><span class="o">//</span><span class="mi">2</span><span class="p">]</span>              
        <span class="k">if</span> <span class="nb">max</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span> <span class="n">v</span> <span class="o">=</span> <span class="o">-</span><span class="n">v</span>
        <span class="k">if</span> <span class="nb">min</span><span class="p">(</span><span class="n">v</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">:</span>  
            <span class="n">c</span> <span class="o">=</span> <span class="n">v</span> <span class="k">if</span> <span class="n">prev</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">v</span><span class="p">.</span><span class="n">concatenate</span><span class="p">(</span><span class="n">prev</span> <span class="o">-</span> <span class="n">v</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">c</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">df</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">c</span>
    <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"No candidate found"</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">attack</span><span class="p">(</span><span class="n">h</span><span class="p">):</span>
    <span class="n">L3</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="mi">8</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
    <span class="n">f3</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L3</span><span class="p">)</span>

    <span class="n">L2</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="mi">4</span><span class="p">,</span> <span class="n">f3</span><span class="p">).</span><span class="n">delete_rows</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">f3</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
    <span class="n">f2</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L2</span><span class="p">,</span> <span class="n">f3</span><span class="p">)</span>

    <span class="n">L1</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">f2</span><span class="p">).</span><span class="n">delete_rows</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">f2</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
    <span class="n">f1</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L1</span><span class="p">,</span> <span class="n">f2</span><span class="p">)</span>

    <span class="n">L0</span> <span class="o">=</span> <span class="n">fold_basis</span><span class="p">(</span><span class="n">h</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">f1</span><span class="p">).</span><span class="n">delete_rows</span><span class="p">(</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">c</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">f1</span><span class="p">)</span> <span class="k">if</span> <span class="n">c</span><span class="o">==</span><span class="mi">0</span><span class="p">).</span><span class="n">BKZ</span><span class="p">()</span>
    <span class="n">f0</span> <span class="o">=</span> <span class="n">enum_basis</span><span class="p">(</span><span class="n">L0</span><span class="p">,</span> <span class="n">f1</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">R</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">f0</span><span class="p">))</span>

<span class="n">pk</span> <span class="o">=</span> <span class="p">[</span><span class="mi">24</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">105</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">105</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">62</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">30</span><span class="p">]</span>
<span class="n">ct</span> <span class="o">=</span> <span class="p">[</span><span class="mi">79</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">90</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">72</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">105</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">115</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">77</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">97</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">85</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">79</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">61</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">119</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">111</span><span class="p">,</span> <span class="mi">114</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">92</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">110</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">105</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">89</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">104</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">43</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">67</span><span class="p">,</span> <span class="mi">24</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">49</span><span class="p">,</span> <span class="mi">86</span><span class="p">,</span> <span class="mi">124</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">55</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">93</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">88</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">63</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">103</span><span class="p">,</span> <span class="mi">53</span><span class="p">,</span> <span class="mi">121</span><span class="p">,</span> <span class="mi">46</span><span class="p">,</span> <span class="mi">87</span><span class="p">,</span> <span class="mi">105</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">123</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">68</span><span class="p">,</span> <span class="mi">84</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">113</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">106</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">108</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">26</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">83</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">78</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">112</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">109</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">73</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">38</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">36</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">52</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">70</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">101</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">91</span><span class="p">,</span> <span class="mi">122</span><span class="p">,</span> <span class="mi">96</span><span class="p">,</span> <span class="mi">19</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">116</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">76</span><span class="p">,</span> <span class="mi">48</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">105</span><span class="p">,</span> <span class="mi">81</span><span class="p">,</span> <span class="mi">117</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">125</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">39</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">37</span><span class="p">,</span> <span class="mi">107</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">95</span><span class="p">,</span> <span class="mi">47</span><span class="p">,</span> <span class="mi">102</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">41</span><span class="p">,</span> <span class="mi">71</span><span class="p">,</span> <span class="mi">42</span><span class="p">,</span> <span class="mi">126</span><span class="p">,</span> <span class="mi">66</span><span class="p">,</span> <span class="mi">44</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="mi">75</span><span class="p">,</span> <span class="mi">74</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">118</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">51</span><span class="p">,</span> <span class="mi">94</span><span class="p">,</span> <span class="mi">34</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">69</span><span class="p">,</span> <span class="mi">56</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">15</span><span class="p">]</span>

<span class="n">sk</span> <span class="o">=</span> <span class="n">attack</span><span class="p">(</span><span class="n">Rqn</span><span class="p">(</span><span class="n">pk</span><span class="p">))</span>
<span class="n">d</span>  <span class="o">=</span> <span class="n">decrypt</span><span class="p">(</span><span class="n">sk</span><span class="p">,</span><span class="n">Rqn</span><span class="p">(</span><span class="n">ct</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">decode</span><span class="p">(</span><span class="n">d</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">').decode()</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="NTRU" /><category term="Folding attack" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">dripfeed (DREAM 2025)</title><link href="https://zukane.github.io/dripfeed/" rel="alternate" type="text/html" title="dripfeed (DREAM 2025)" /><published>2025-08-09T13:00:00+02:00</published><updated>2025-08-09T13:00:00+02:00</updated><id>https://zukane.github.io/dripfeed</id><content type="html" xml:base="https://zukane.github.io/dripfeed/"><![CDATA[<h5 id="challenge-source">Challenge source</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">N</span> <span class="o">=</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span>
<span class="n">e</span> <span class="o">=</span> <span class="mh">0x10001</span>
<span class="n">z</span> <span class="o">=</span> <span class="mi">768</span>

<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"DREAM{???????????????????}"</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">),</span> <span class="n">e</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>

<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="n">dinv</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">d</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="n">N</span><span class="p">)</span>
<span class="n">hint1</span> <span class="o">=</span> <span class="n">dinv</span><span class="o">&gt;&gt;</span><span class="n">z</span>
<span class="n">hint2</span> <span class="o">=</span> <span class="n">d</span><span class="o">&gt;&gt;</span><span class="n">z</span>
<span class="n">hint3</span> <span class="o">=</span> <span class="p">(</span><span class="n">d</span><span class="o">+</span><span class="n">dinv</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="o">^</span><span class="n">z</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">c</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">N</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">hint1</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">hint2</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">hint3</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># c = 22157594335444536824539804957503224316011530105000213270082208221066593944954014666682649028694133674560156641233395573360668940167815220144267273966287820743390179842825813921564442940898448403649268126138366346541999383516847671392288475450503228921663055710261222736364832390636399799464290497677394001206519642230355468553180304124754273599272037090190669770012042290863893500557064375980418378974146770317534675349918371288413139540568026717131002910661522889107223072629684473816850628927719500755853803826053326864257172197282550241873511858288263828888477514571946188043879000715780664003346592804294011506971
# N = 25959541354095379330014211523736588310397407563027174748207817754002783083191533477890701227080867897432606754059572855046962831514143019657762820875501757389522439963278185424652050988351722479628525750386024849935812556785023617595192645219002837901875925863581668399339831969660066794677364550759132546080418952727814971975516789298857515890709426151641917337099113196461301621097058914304208257653769808452628154352488765790619868730683895851799316355220677011268783490458072512607009187871657751973095691749268293154373565622703034299847474396773677657530377712298202962607412888316384251050171382195892089032357
# hint1 = 15464998351280885049978241250677908550052088921543412055926782552569730114201666247473246055105315399223369010505411177494944031761554111167815968593847467862816540005306296674691731101951155559188695276576391852694850824877331682887724674655622324597900452774223029587809308492341771478213616624501365158861467752871506595868846315715135486074129927582766119159732319777572491731729171
# hint2 = 7029540180149905451539102727640301157454585448744864593652215724504532500936678968396248056235311937620576932024119332483872809008873452228603492327252210340060398181762267906930140059244295569523008698632999425529950595502067137205887611567798060711937625579291545624591051982915725104082620929153365192057370102698459062120006997479591134423962335183745677834764356654024492868260852
# hint3 = 190722270955073623160671606729858536606154237775586896348182992398405372984126236409160453609793655987256674610721019302148710014962419023950073167692224689931891238034456934018927853575507080194214703887834623936620950946151655803
</code></pre></div></div>

<p>We are given three hints about the RSA private key d.</p>

<h5 id="recovering-d">Recovering d</h5>

<p>Challenges involving partial information leaks are often solved by using coppersmith’s small roots method. The information given in this challenge is:</p>

<ul>
  <li>The MSBs of $d$ (1280/2048 bits)</li>
  <li>The MSBs of $d^{-1}$ (1280/2048 bits)</li>
  <li>The LSBs of the sum $d + d^{-1}$ (768/2048 bits)</li>
</ul>

<p>We can set up equations for these hints with the unknowns:</p>

\[\large \begin{align}
\nonumber d &amp;= 2^{768} \cdot \text{hint2} + x \\
\nonumber d^{-1} &amp;= 2^{768} \cdot \text{hint1} + y \\
\nonumber x+y &amp;= \text{hint3}
\end{align}\]

<p>We can utilize $hint_{3}$ to eliminate the variable $y$:</p>

\[\large \begin{align}
\nonumber d^{-1} &amp;= 2^{768} \cdot \text{hint1} + y \\
\nonumber d^{-1} &amp;= 2^{768} \cdot \text{hint1} + \text{hint3} - x 
\end{align}\]

<p>However, we must take into consideration that $hint_{3} \equiv d+d^{-1} \bmod 2^{768}$. There may be an extra $2^{768}$ term in $d^{-1}$ depending on the carry bit. In the case of the handout, this term is present:</p>

\[\large d^{-1} = 2^{768} \cdot \text{hint1} + \text{hint3} - x\]

<p>With an expression for $d$ and $d^{-1}$ in terms of $x$, we can set up the following univariate polynomial:</p>

\[\large d \cdot d^{-1} - 1\equiv 0 \mod N\]

<p>The root $x$ has an upper bound of $2^{768}$. This univariate case can easily be solved in SageMath:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">z</span> <span class="o">=</span> <span class="mi">768</span>
<span class="n">R</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">N</span><span class="p">))</span>

<span class="n">d</span>    <span class="o">=</span> <span class="p">(</span><span class="n">hint2</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span> <span class="o">+</span> <span class="n">x</span>
<span class="n">dinv</span> <span class="o">=</span> <span class="p">(</span><span class="n">hint1</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">hint3</span><span class="o">-</span><span class="n">x</span><span class="o">+</span><span class="mi">2</span><span class="o">^</span><span class="n">z</span><span class="p">)</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">d</span><span class="o">*</span><span class="n">dinv</span><span class="o">-</span><span class="mi">1</span>
<span class="n">roots</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">monic</span><span class="p">().</span><span class="n">small_roots</span><span class="p">(</span><span class="n">X</span><span class="o">=</span><span class="mi">2</span><span class="o">^</span><span class="n">z</span><span class="p">)</span>
</code></pre></div></div>

<p>And with the root recovered, $d$ can be reconstructed, letting us decrypt the ciphertext:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">hint2</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span> <span class="o">+</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">N</span><span class="p">)))</span>
<span class="c1"># b'DREAM{sm4ll_r00ts_2_sm4ll}'
</span></code></pre></div></div>

<h5 id="solvesage">solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>

<span class="n">c</span> <span class="o">=</span> <span class="mi">22157594335444536824539804957503224316011530105000213270082208221066593944954014666682649028694133674560156641233395573360668940167815220144267273966287820743390179842825813921564442940898448403649268126138366346541999383516847671392288475450503228921663055710261222736364832390636399799464290497677394001206519642230355468553180304124754273599272037090190669770012042290863893500557064375980418378974146770317534675349918371288413139540568026717131002910661522889107223072629684473816850628927719500755853803826053326864257172197282550241873511858288263828888477514571946188043879000715780664003346592804294011506971</span>
<span class="n">N</span> <span class="o">=</span> <span class="mi">25959541354095379330014211523736588310397407563027174748207817754002783083191533477890701227080867897432606754059572855046962831514143019657762820875501757389522439963278185424652050988351722479628525750386024849935812556785023617595192645219002837901875925863581668399339831969660066794677364550759132546080418952727814971975516789298857515890709426151641917337099113196461301621097058914304208257653769808452628154352488765790619868730683895851799316355220677011268783490458072512607009187871657751973095691749268293154373565622703034299847474396773677657530377712298202962607412888316384251050171382195892089032357</span>
<span class="n">hint1</span> <span class="o">=</span> <span class="mi">15464998351280885049978241250677908550052088921543412055926782552569730114201666247473246055105315399223369010505411177494944031761554111167815968593847467862816540005306296674691731101951155559188695276576391852694850824877331682887724674655622324597900452774223029587809308492341771478213616624501365158861467752871506595868846315715135486074129927582766119159732319777572491731729171</span>
<span class="n">hint2</span> <span class="o">=</span> <span class="mi">7029540180149905451539102727640301157454585448744864593652215724504532500936678968396248056235311937620576932024119332483872809008873452228603492327252210340060398181762267906930140059244295569523008698632999425529950595502067137205887611567798060711937625579291545624591051982915725104082620929153365192057370102698459062120006997479591134423962335183745677834764356654024492868260852</span>
<span class="n">hint3</span> <span class="o">=</span> <span class="mi">190722270955073623160671606729858536606154237775586896348182992398405372984126236409160453609793655987256674610721019302148710014962419023950073167692224689931891238034456934018927853575507080194214703887834623936620950946151655803</span>

<span class="n">z</span> <span class="o">=</span> <span class="mi">768</span>
<span class="n">R</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">Zmod</span><span class="p">(</span><span class="n">N</span><span class="p">))</span>

<span class="n">d</span>    <span class="o">=</span> <span class="p">(</span><span class="n">hint2</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span> <span class="o">+</span> <span class="n">x</span>
<span class="n">dinv</span> <span class="o">=</span> <span class="p">(</span><span class="n">hint1</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">hint3</span><span class="o">-</span><span class="n">x</span><span class="o">+</span><span class="mi">2</span><span class="o">^</span><span class="n">z</span><span class="p">)</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">d</span><span class="o">*</span><span class="n">dinv</span><span class="o">-</span><span class="mi">1</span>
<span class="n">roots</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">monic</span><span class="p">().</span><span class="n">small_roots</span><span class="p">(</span><span class="n">X</span><span class="o">=</span><span class="mi">2</span><span class="o">^</span><span class="n">z</span><span class="p">)</span>

<span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">hint2</span><span class="o">&lt;&lt;</span><span class="n">z</span><span class="p">)</span> <span class="o">+</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">N</span><span class="p">)))</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Coppersmith small roots" /><category term="RSA" /><summary type="html"><![CDATA[Challenge source]]></summary></entry><entry><title type="html">L-iptic Curve Gimmick (DREAM 2025)</title><link href="https://zukane.github.io/liptic-curve-gimmick/" rel="alternate" type="text/html" title="L-iptic Curve Gimmick (DREAM 2025)" /><published>2025-08-09T13:00:00+02:00</published><updated>2025-08-09T13:00:00+02:00</updated><id>https://zukane.github.io/liptic-curve-gimmick</id><content type="html" xml:base="https://zukane.github.io/liptic-curve-gimmick/"><![CDATA[<h5 id="challenge-overview">Challenge Overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">hashlib</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span>

<span class="n">p</span> <span class="o">=</span> <span class="mi">289938057806527723758225206013420438469</span> 
<span class="n">a</span> <span class="o">=</span> <span class="mi">131472054804376335219486973894036812363</span> 
<span class="n">b</span> <span class="o">=</span> <span class="mi">168821582640259041697285427337782028716</span>
<span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">])</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">gen</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">state</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span>
<span class="n">key</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">state</span><span class="p">).</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()</span>
<span class="n">iv</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">LCG</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">state</span>
    <span class="n">state</span> <span class="o">=</span> <span class="p">(</span><span class="mi">6364136223846793005</span><span class="o">*</span><span class="n">state</span> <span class="o">+</span> <span class="mi">1442695040888963407</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">64</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">state</span><span class="o">&gt;&gt;</span><span class="mi">32</span>

<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"DREAM{?????????????????????????????????}"</span>

<span class="c1"># mix it up!
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1337</span><span class="p">):</span>
    <span class="n">P</span> <span class="o">=</span> <span class="n">LCG</span><span class="p">()</span><span class="o">*</span><span class="n">G</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">P</span> <span class="o">=</span> <span class="n">LCG</span><span class="p">()</span><span class="o">*</span><span class="n">G</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"P</span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> = E(</span><span class="si">{</span><span class="n">P</span><span class="p">.</span><span class="n">x</span><span class="p">()</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">P</span><span class="p">.</span><span class="n">y</span><span class="p">()</span><span class="si">}</span><span class="s">)"</span><span class="p">)</span>

<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
<span class="n">ct</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">pad</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="mi">16</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"iv = '</span><span class="si">{</span><span class="n">iv</span><span class="p">.</span><span class="nb">hex</span><span class="p">()</span><span class="si">}</span><span class="s">'"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"ct = '</span><span class="si">{</span><span class="n">ct</span><span class="p">.</span><span class="nb">hex</span><span class="p">()</span><span class="si">}</span><span class="s">'"</span><span class="p">)</span>
</code></pre></div></div>

<p>As well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>P1 = E(122037775221140048457289031201689495704, 122951420735275891082341998031602353733)
P2 = E(184410941665585900129539390660771625087, 171416669794932710291436536477699627840)
P3 = E(273827286896900834170681338812413416705, 75421249071279152991789476076300962651)
iv = '3d7c4da2defd1b78a0feccbb553dd4da'
ct = '081393130914bdd8c625786160f8de0dfd0dd5a4f3c2ca946b803cfe565082849827c9c0794db358ee81bc734f0fb361'
</code></pre></div></div>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>The encryption script creates an Elliptic Curve with some non-standard curve parameters.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="mi">289938057806527723758225206013420438469</span> 
<span class="n">a</span> <span class="o">=</span> <span class="mi">131472054804376335219486973894036812363</span> 
<span class="n">b</span> <span class="o">=</span> <span class="mi">168821582640259041697285427337782028716</span>
<span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">])</span>
</code></pre></div></div>

<p>The first step is often to investigate properties of the curve parameters. In our case, it turns out that the curve order is quite smooth:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">factor</span><span class="p">(</span><span class="n">E</span><span class="p">.</span><span class="n">order</span><span class="p">())</span>
<span class="mi">11</span> <span class="o">*</span> <span class="mi">117101</span> <span class="o">*</span> <span class="mi">457517</span> <span class="o">*</span> <span class="mi">682657</span> <span class="o">*</span> <span class="mi">1814651</span> <span class="o">*</span> <span class="mi">6542287</span> <span class="o">*</span> <span class="mi">60704299</span>
</code></pre></div></div>

<p>A smooth curve order makes the discrete logarithm easy to solve by using a subgroup attack, for example by using the baby-step giant-step method.</p>

<p>The script also generates an initial state, hashes the state with SHA256 to generate a key, and generates an initialization vector. The key and IV are later used to encrypt the flag.</p>

<p>The encryption script also defines a Linear Congruential Generator</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">LCG</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">state</span>
    <span class="n">state</span> <span class="o">=</span> <span class="p">(</span><span class="mi">6364136223846793005</span><span class="o">*</span><span class="n">state</span> <span class="o">+</span> <span class="mi">1442695040888963407</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="mi">64</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span>
    <span class="k">return</span> <span class="n">state</span><span class="o">&gt;&gt;</span><span class="mi">32</span>
</code></pre></div></div>

<p>An LCG is a pseudo-random number generator which updates the state by multiplying, adding and then reducing modulo some number. We are given the LCG parameters, but the returned state is shifted by 32 bytes, giving us only half of the state. The LCG is iterated $1337$ times, before giving us three leaks:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">):</span>
    <span class="n">P</span> <span class="o">=</span> <span class="n">LCG</span><span class="p">()</span><span class="o">*</span><span class="n">G</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"P</span><span class="si">{</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> = E(</span><span class="si">{</span><span class="n">P</span><span class="p">.</span><span class="n">x</span><span class="p">()</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">P</span><span class="p">.</span><span class="n">y</span><span class="p">()</span><span class="si">}</span><span class="s">)"</span><span class="p">)</span>
<span class="c1"># P1 = E(122037775221140048457289031201689495704, 122951420735275891082341998031602353733)
# P2 = E(184410941665585900129539390660771625087, 171416669794932710291436536477699627840)
# P3 = E(273827286896900834170681338812413416705, 75421249071279152991789476076300962651)
</span></code></pre></div></div>

<p>We have to use these points to recover the initial state of the LCG, which we can hash to recover the AES encryption key and decrypt the flag.</p>

<h5 id="implementing-the-solution">Implementing the solution</h5>

<p>Like previously mentioned, the smooth order of the elliptic curve means that the discrete logarithm problem is easy to solve with a subgroup attack. We begin by defining our known values:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="mi">289938057806527723758225206013420438469</span> 
<span class="n">a</span> <span class="o">=</span> <span class="mi">131472054804376335219486973894036812363</span> 
<span class="n">b</span> <span class="o">=</span> <span class="mi">168821582640259041697285427337782028716</span>
<span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">])</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">gen</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">factors</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">117101</span><span class="p">,</span> <span class="mi">457517</span><span class="p">,</span> <span class="mi">682657</span><span class="p">,</span> <span class="mi">1814651</span><span class="p">,</span> <span class="mi">6542287</span><span class="p">,</span> <span class="mi">60704299</span><span class="p">]</span> <span class="c1"># factor(E.order())
</span>
<span class="n">P1</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="mi">122037775221140048457289031201689495704</span><span class="p">,</span> <span class="mi">122951420735275891082341998031602353733</span><span class="p">)</span>
<span class="n">P2</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="mi">184410941665585900129539390660771625087</span><span class="p">,</span> <span class="mi">171416669794932710291436536477699627840</span><span class="p">)</span>
<span class="n">P3</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="mi">273827286896900834170681338812413416705</span><span class="p">,</span> <span class="mi">75421249071279152991789476076300962651</span><span class="p">)</span>
</code></pre></div></div>

<p>The subgroup attack works by solving the discrete log for each individual factor, then combining the results with the Chinese Remainder Theorem.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">bsgs</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">primes</span><span class="p">):</span>
    <span class="n">dlogs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">fac</span> <span class="ow">in</span> <span class="n">primes</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Iteration for </span><span class="si">{</span><span class="n">fac</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">order</span><span class="p">()</span> <span class="o">//</span> <span class="n">fac</span>
        <span class="n">dlog</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span> <span class="n">Q</span><span class="p">,</span> <span class="n">t</span> <span class="o">*</span> <span class="n">P</span><span class="p">,</span> <span class="n">operation</span><span class="o">=</span><span class="s">"+"</span><span class="p">)</span>
        <span class="n">dlogs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dlog</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">crt</span><span class="p">(</span><span class="n">dlogs</span><span class="p">,</span> <span class="n">primes</span><span class="p">)</span>
</code></pre></div></div>

<p>By running this function on each $P_{1},P_{2},P_{3}$ and the curve’s generator point $G$, we can recover the three outputs of the <code class="language-plaintext highlighter-rouge">LCG()</code> function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">truncated_states</span> <span class="o">=</span> <span class="p">[</span><span class="n">bsgs</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">factors</span><span class="p">)</span> <span class="k">for</span> <span class="n">P</span> <span class="ow">in</span> <span class="p">[</span><span class="n">P1</span><span class="p">,</span><span class="n">P2</span><span class="p">,</span><span class="n">P3</span><span class="p">]]</span>
<span class="c1"># [1939624097, 3628133847, 3055123311]
</span></code></pre></div></div>

<p>These bit shifted states, or rather <code class="language-plaintext highlighter-rouge">truncated</code> states, can actually be used along with the LCG parameters to recover the complete states. Implementations for a <code class="language-plaintext highlighter-rouge">truncated state recovery attack</code> exist online, for example in https://github.com/jvdsn/crypto-attacks/blob/master/attacks/lcg/truncated_state_recovery.py. The details of this attack can be a bit complicated, but using the function is quite plug-and-play.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># https://github.com/jvdsn/crypto-attacks/blob/master/attacks/lcg/truncated_state_recovery.py
</span><span class="k">def</span> <span class="nf">truncated_lcg_attack</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
    <span class="n">diff_bit_length</span> <span class="o">=</span> <span class="n">k</span> <span class="o">-</span> <span class="n">s</span>

    <span class="n">delta</span> <span class="o">=</span> <span class="n">c</span> <span class="o">%</span> <span class="n">m</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">vector</span><span class="p">(</span><span class="n">ZZ</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)):</span>
        <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">diff_bit_length</span><span class="p">)</span> <span class="o">-</span> <span class="n">delta</span>
        <span class="n">delta</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">delta</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="o">%</span> <span class="n">m</span>

    <span class="n">B</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="n">ZZ</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
    <span class="n">B</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)):</span>
        <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span> <span class="o">**</span> <span class="n">i</span>
        <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>

    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">LLL</span><span class="p">()</span>

    <span class="n">b</span> <span class="o">=</span> <span class="n">B</span> <span class="o">*</span> <span class="n">y</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)):</span>
        <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">QQ</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">/</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="n">m</span> <span class="o">-</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="n">delta</span> <span class="o">=</span> <span class="n">c</span> <span class="o">%</span> <span class="n">m</span>
    <span class="n">x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">B</span><span class="p">.</span><span class="n">solve_right</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">state</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">state</span> <span class="o">+</span> <span class="n">delta</span><span class="p">)</span>
        <span class="n">delta</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">delta</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="o">%</span> <span class="n">m</span>

    <span class="k">return</span> <span class="n">x</span>

<span class="n">states</span> <span class="o">=</span> <span class="n">truncated_lcg_attack</span><span class="p">(</span><span class="n">truncated_states</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="mi">64</span><span class="p">,</span> <span class="mi">6364136223846793005</span><span class="p">,</span> <span class="mi">1442695040888963407</span><span class="p">)</span>
<span class="c1"># [8330622065471768203, 15582716220711197886, 13121654707256889525]
</span></code></pre></div></div>

<p>With the full states recovered, we can construct a function to perform the inverse steps of the LCG. The encryption script performed $1337$ iterations, then $3$ more for the elliptic curve points. We can pick the first recovered state and step back 1338 iterations:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">M</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">64</span>
<span class="n">A</span>  <span class="o">=</span> <span class="mi">6364136223846793005</span>
<span class="n">C</span>  <span class="o">=</span> <span class="mi">1442695040888963407</span>
<span class="n">Ainv</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">M</span><span class="p">)</span>

<span class="n">state</span> <span class="o">=</span> <span class="n">states</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">%</span><span class="n">M</span>
<span class="k">def</span> <span class="nf">inverse_LCG</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">state</span>
    <span class="n">state</span> <span class="o">=</span> <span class="p">(</span><span class="n">Ainv</span> <span class="o">*</span> <span class="p">(</span><span class="n">state</span> <span class="o">-</span> <span class="n">C</span><span class="p">))</span> <span class="o">%</span> <span class="n">M</span>
    <span class="k">return</span> <span class="n">state</span>

<span class="n">state0</span> <span class="o">=</span> <span class="p">[</span><span class="n">inverse_LCG</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1338</span><span class="p">)][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<p>Finally, we can hash <code class="language-plaintext highlighter-rouge">state0</code> to get the AES-CBC encryption key, and decrypt the flag:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">state0</span><span class="p">).</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">iv</span><span class="p">))</span>
<span class="n">pt</span> <span class="o">=</span> <span class="n">unpad</span><span class="p">(</span><span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">ct</span><span class="p">)),</span><span class="mi">16</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
<span class="c1"># DREAM{E_1n_LCG_st4nd5_4_Ell1pt1c_Curv3s}
</span></code></pre></div></div>

<h5 id="solvesage">solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">hashlib</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">unpad</span>

<span class="n">p</span> <span class="o">=</span> <span class="mi">289938057806527723758225206013420438469</span> 
<span class="n">a</span> <span class="o">=</span> <span class="mi">131472054804376335219486973894036812363</span> 
<span class="n">b</span> <span class="o">=</span> <span class="mi">168821582640259041697285427337782028716</span>
<span class="n">E</span> <span class="o">=</span> <span class="n">EllipticCurve</span><span class="p">(</span><span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">])</span>
<span class="n">G</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">gen</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">factors</span> <span class="o">=</span> <span class="p">[</span><span class="mi">11</span><span class="p">,</span> <span class="mi">117101</span><span class="p">,</span> <span class="mi">457517</span><span class="p">,</span> <span class="mi">682657</span><span class="p">,</span> <span class="mi">1814651</span><span class="p">,</span> <span class="mi">6542287</span><span class="p">,</span> <span class="mi">60704299</span><span class="p">]</span> <span class="c1"># factor(E.order())
</span>
<span class="n">P1</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="mi">122037775221140048457289031201689495704</span><span class="p">,</span> <span class="mi">122951420735275891082341998031602353733</span><span class="p">)</span>
<span class="n">P2</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="mi">184410941665585900129539390660771625087</span><span class="p">,</span> <span class="mi">171416669794932710291436536477699627840</span><span class="p">)</span>
<span class="n">P3</span> <span class="o">=</span> <span class="n">E</span><span class="p">(</span><span class="mi">273827286896900834170681338812413416705</span><span class="p">,</span> <span class="mi">75421249071279152991789476076300962651</span><span class="p">)</span>
<span class="n">iv</span> <span class="o">=</span> <span class="s">'3d7c4da2defd1b78a0feccbb553dd4da'</span>
<span class="n">ct</span> <span class="o">=</span> <span class="s">'081393130914bdd8c625786160f8de0dfd0dd5a4f3c2ca946b803cfe565082849827c9c0794db358ee81bc734f0fb361'</span>

<span class="k">def</span> <span class="nf">bsgs</span><span class="p">(</span><span class="n">Q</span><span class="p">,</span> <span class="n">P</span><span class="p">,</span> <span class="n">primes</span><span class="p">):</span>
    <span class="n">dlogs</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">fac</span> <span class="ow">in</span> <span class="n">primes</span><span class="p">:</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"[+] Iteration for </span><span class="si">{</span><span class="n">fac</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">P</span><span class="p">.</span><span class="n">order</span><span class="p">()</span> <span class="o">//</span> <span class="n">fac</span>
        <span class="n">dlog</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">t</span> <span class="o">*</span> <span class="n">Q</span><span class="p">,</span> <span class="n">t</span> <span class="o">*</span> <span class="n">P</span><span class="p">,</span> <span class="n">operation</span><span class="o">=</span><span class="s">"+"</span><span class="p">)</span>
        <span class="n">dlogs</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">dlog</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">crt</span><span class="p">(</span><span class="n">dlogs</span><span class="p">,</span> <span class="n">primes</span><span class="p">)</span>

<span class="n">truncated_states</span> <span class="o">=</span> <span class="p">[</span><span class="n">bsgs</span><span class="p">(</span><span class="n">P</span><span class="p">,</span> <span class="n">G</span><span class="p">,</span> <span class="n">factors</span><span class="p">)</span> <span class="k">for</span> <span class="n">P</span> <span class="ow">in</span> <span class="p">[</span><span class="n">P1</span><span class="p">,</span><span class="n">P2</span><span class="p">,</span><span class="n">P3</span><span class="p">]]</span>

<span class="c1"># https://github.com/jvdsn/crypto-attacks/blob/master/attacks/lcg/truncated_state_recovery.py
</span><span class="k">def</span> <span class="nf">truncated_lcg_attack</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">c</span><span class="p">):</span>
    <span class="n">diff_bit_length</span> <span class="o">=</span> <span class="n">k</span> <span class="o">-</span> <span class="n">s</span>

    <span class="n">delta</span> <span class="o">=</span> <span class="n">c</span> <span class="o">%</span> <span class="n">m</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">vector</span><span class="p">(</span><span class="n">ZZ</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)):</span>
        <span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;&lt;</span> <span class="n">diff_bit_length</span><span class="p">)</span> <span class="o">-</span> <span class="n">delta</span>
        <span class="n">delta</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">delta</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="o">%</span> <span class="n">m</span>

    <span class="n">B</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="n">ZZ</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
    <span class="n">B</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">m</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">y</span><span class="p">)):</span>
        <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span> <span class="o">**</span> <span class="n">i</span>
        <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>

    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">LLL</span><span class="p">()</span>

    <span class="n">b</span> <span class="o">=</span> <span class="n">B</span> <span class="o">*</span> <span class="n">y</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">b</span><span class="p">)):</span>
        <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">QQ</span><span class="p">(</span><span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">/</span> <span class="n">m</span><span class="p">)</span> <span class="o">*</span> <span class="n">m</span> <span class="o">-</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>

    <span class="n">delta</span> <span class="o">=</span> <span class="n">c</span> <span class="o">%</span> <span class="n">m</span>
    <span class="n">x</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">B</span><span class="p">.</span><span class="n">solve_right</span><span class="p">(</span><span class="n">b</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">state</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">y</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">state</span> <span class="o">+</span> <span class="n">delta</span><span class="p">)</span>
        <span class="n">delta</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">delta</span> <span class="o">+</span> <span class="n">c</span><span class="p">)</span> <span class="o">%</span> <span class="n">m</span>

    <span class="k">return</span> <span class="n">x</span>

<span class="n">states</span> <span class="o">=</span> <span class="n">truncated_lcg_attack</span><span class="p">(</span><span class="n">truncated_states</span><span class="p">,</span> <span class="mi">64</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">2</span><span class="o">**</span><span class="mi">64</span><span class="p">,</span> <span class="mi">6364136223846793005</span><span class="p">,</span> <span class="mi">1442695040888963407</span><span class="p">)</span>

<span class="n">M</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">64</span>
<span class="n">A</span>  <span class="o">=</span> <span class="mi">6364136223846793005</span>
<span class="n">C</span>  <span class="o">=</span> <span class="mi">1442695040888963407</span>
<span class="n">Ainv</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">M</span><span class="p">)</span>

<span class="n">state</span> <span class="o">=</span> <span class="n">states</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">%</span><span class="n">M</span>
<span class="k">def</span> <span class="nf">inverse_LCG</span><span class="p">():</span>
    <span class="k">global</span> <span class="n">state</span>
    <span class="n">state</span> <span class="o">=</span> <span class="p">(</span><span class="n">Ainv</span> <span class="o">*</span> <span class="p">(</span><span class="n">state</span> <span class="o">-</span> <span class="n">C</span><span class="p">))</span> <span class="o">%</span> <span class="n">M</span>
    <span class="k">return</span> <span class="n">state</span>

<span class="n">state0</span> <span class="o">=</span> <span class="p">[</span><span class="n">inverse_LCG</span><span class="p">()</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1338</span><span class="p">)][</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">key</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">state0</span><span class="p">).</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">iv</span><span class="p">))</span>
<span class="n">pt</span> <span class="o">=</span> <span class="n">unpad</span><span class="p">(</span><span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">ct</span><span class="p">)),</span><span class="mi">16</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="Elliptic Curve" /><category term="LCG" /><category term="Truncated attack" /><summary type="html"><![CDATA[Challenge Overview]]></summary></entry><entry><title type="html">mvm sum problem (DREAM 2025)</title><link href="https://zukane.github.io/mvm-sum-problem/" rel="alternate" type="text/html" title="mvm sum problem (DREAM 2025)" /><published>2025-08-09T13:00:00+02:00</published><updated>2025-08-09T13:00:00+02:00</updated><id>https://zukane.github.io/mvm-sum-problem</id><content type="html" xml:base="https://zukane.github.io/mvm-sum-problem/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getPrime</span><span class="p">,</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">long_to_bytes</span>
<span class="kn">import</span> <span class="nn">secrets</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">hashlib</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">pad</span>

<span class="n">flag</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"DREAM{???????????????????????????????????????????????????????????????}"</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">)</span>
<span class="n">A</span> <span class="o">=</span> <span class="p">[[</span><span class="n">secrets</span><span class="p">.</span><span class="n">randbits</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">n</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">__</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="n">secrets</span><span class="p">.</span><span class="n">randbits</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
<span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="nb">sum</span><span class="p">(</span><span class="n">ai</span><span class="o">*</span><span class="n">si</span> <span class="k">for</span> <span class="n">ai</span><span class="p">,</span> <span class="n">si</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">row</span><span class="p">,</span> <span class="n">s</span><span class="p">))</span> <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">A</span><span class="p">]</span>
<span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="n">xi</span> <span class="o">%</span> <span class="n">p</span> <span class="k">for</span> <span class="n">xi</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
<span class="n">t</span> <span class="o">=</span> <span class="p">[</span><span class="n">xi</span> <span class="o">&gt;&gt;</span> <span class="mi">48</span> <span class="k">for</span> <span class="n">xi</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
<span class="n">A_mod</span> <span class="o">=</span> <span class="p">[[</span><span class="n">ai</span> <span class="o">%</span> <span class="n">p</span> <span class="k">for</span> <span class="n">ai</span> <span class="ow">in</span> <span class="n">a</span><span class="p">]</span> <span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">A</span><span class="p">]</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"A = </span><span class="si">{</span><span class="n">A_mod</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"b = </span><span class="si">{</span><span class="n">b</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"t = </span><span class="si">{</span><span class="n">t</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">key</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">bit</span><span class="p">)</span> <span class="k">for</span> <span class="n">bit</span> <span class="ow">in</span> <span class="n">s</span><span class="p">]).</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()</span>
<span class="n">iv</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
<span class="n">ct</span> <span class="o">=</span> <span class="n">cipher</span><span class="p">.</span><span class="n">encrypt</span><span class="p">(</span><span class="n">pad</span><span class="p">(</span><span class="n">flag</span><span class="p">,</span> <span class="mi">16</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"iv = '</span><span class="si">{</span><span class="n">iv</span><span class="p">.</span><span class="nb">hex</span><span class="p">()</span><span class="si">}</span><span class="s">'"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"ct = '</span><span class="si">{</span><span class="n">ct</span><span class="p">.</span><span class="nb">hex</span><span class="p">()</span><span class="si">}</span><span class="s">'"</span><span class="p">)</span>
</code></pre></div></div>

<p>as well as the output in <code class="language-plaintext highlighter-rouge">output.txt</code></p>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>The encryption script generates an $n \times n$ matrix $A$ and a vector $s$, then calculates:</p>

\[\large x = \sum_{i=0}^{n}a_{i} s_{i}\]

<p>for each row $a_{i}$ in $A$. The user is then given the following:</p>

\[\large \begin{align}
\nonumber A_{mod} &amp;\equiv A \mod p \\
\nonumber b &amp;\equiv x \mod p \\
\nonumber t &amp;= x &gt;&gt; 48
\end{align}\]

<p>The secret vector $s$ is concatenated, then hashed to produce the AES-CBC key which encrypts the flag.</p>

<h5 id="recovering-p">Recovering p</h5>

<p>This already almost seems like a subset sum problem, but only the most significant bits of $x$ are given. It also almost looks like a modular subset sum problem, but the modulo $p$ is not given. However, with both $b$ and $t$ given, we can set up an <code class="language-plaintext highlighter-rouge">AGCD</code> or an “Approximate Greatest Common Divisor” instance to recover the modulo $p$:</p>

\[\large \begin{align}
\nonumber b &amp;= x \mod p \\
\nonumber b &amp;= x + k \cdot p \\
\nonumber b - x &amp;= k \cdot p
\end{align}\]

<p>we are not given $x$ exactly, but $x = t \cdot 2^{48} + r$ for some lower bits remainder $r &lt; 2^{48}$. So, the AGCD instance is:</p>

\[\large b_{i} - t_{i} \cdot 2^{48} = k_{i} \cdot p + r_{i}\]

<p>We can use the orthogonal lattice AGCD implementation from https://github.com/jvdsn/crypto-attacks/blob/master/attacks/acd/ol.py to solve for $p$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># https://github.com/jvdsn/crypto-attacks/blob/master/attacks/acd/ol.py
</span><span class="k">def</span> <span class="nf">AGCD</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">rho</span><span class="p">):</span>
    <span class="n">R</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">**</span> <span class="n">rho</span>

    <span class="n">B</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="n">ZZ</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">xi</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">xi</span>
        <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">R</span>

    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">LLL</span><span class="p">()</span>

    <span class="n">K</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">submatrix</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)).</span><span class="n">right_kernel</span><span class="p">()</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">an_element</span><span class="p">()</span>
    <span class="n">r0</span> <span class="o">=</span> <span class="n">symmetric_mod</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">r0</span><span class="p">)</span> <span class="o">//</span> <span class="n">q</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">symmetric_mod</span><span class="p">(</span><span class="n">xi</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="k">for</span> <span class="n">xi</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
    <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="o">-</span><span class="n">R</span> <span class="o">&lt;</span> <span class="n">ri</span> <span class="o">&lt;</span> <span class="n">R</span> <span class="k">for</span> <span class="n">ri</span> <span class="ow">in</span> <span class="n">r</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">r</span>
        
<span class="n">y</span> <span class="o">=</span> <span class="p">[(</span><span class="n">ti</span> <span class="o">&lt;&lt;</span> <span class="mi">48</span><span class="p">)</span> <span class="o">-</span> <span class="n">bi</span> <span class="k">for</span> <span class="n">ti</span><span class="p">,</span> <span class="n">bi</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">b</span><span class="p">)]</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">AGCD</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">48</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<h5 id="recovering-s">Recovering s</h5>

<p>With the modulus $p$ recovered, we now have a multiple modular subset sum problem:</p>

\[\large b\equiv \sum_{i=0}^{n} a_{i} s_{i} \mod p\]

<p>for each row $a$ in $A$. With $b$, $A$ and $p$, we can use MMSSP to solve for $s$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># https://hackmd.io/@L4m/B1Vpr_vK0
</span><span class="k">def</span> <span class="nf">Multiple_Modular_Subset_Sum_Problem</span><span class="p">(</span><span class="n">multi</span><span class="p">,</span><span class="n">result</span><span class="p">,</span><span class="n">modul</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">multi</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">n1</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sqrt</span><span class="p">((</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="n">multi</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">multi</span><span class="p">).</span><span class="n">T</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">N</span><span class="o">*</span><span class="n">multi</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n1</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">tmp_</span> <span class="o">=</span>  <span class="n">Matrix</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">_</span> <span class="o">+</span> <span class="p">[</span><span class="n">N</span><span class="o">*</span><span class="n">modul</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n1</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
        <span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">tmp_</span><span class="p">)</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">([</span><span class="mi">1</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="o">-</span><span class="n">N</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">result</span><span class="p">])</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">LLL</span><span class="p">()[</span><span class="mi">0</span><span class="p">][:</span><span class="n">n</span><span class="p">]</span>
    <span class="n">M</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">M</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">M</span>

<span class="n">sol</span> <span class="o">=</span> <span class="n">Multiple_Modular_Subset_Sum_Problem</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>
</code></pre></div></div>

<p>With the secret vector $s$ recovered, decryption becomes trivial. The bits are concatenated, hashed, and then the resulting key is used for AES-CBC decryption:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">key</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">bit</span><span class="p">)</span> <span class="k">for</span> <span class="n">bit</span> <span class="ow">in</span> <span class="n">sol</span><span class="p">]).</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="n">unpad</span><span class="p">(</span><span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">ct</span><span class="p">.</span><span class="nb">hex</span><span class="p">())),</span><span class="mi">16</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
<span class="c1"># DREAM{AGCD_4nd_MvMSSP_2_m4ny_4bbr3v14t10ns_but_pl34s3_d3l3t3_GPT5_n0w}
</span></code></pre></div></div>

<h5 id="solvesage">solve.sage</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">getPrime</span><span class="p">,</span> <span class="n">bytes_to_long</span><span class="p">,</span> <span class="n">long_to_bytes</span>
<span class="kn">import</span> <span class="nn">secrets</span><span class="p">,</span> <span class="n">os</span><span class="p">,</span> <span class="n">hashlib</span><span class="p">,</span> <span class="n">ast</span>
<span class="kn">from</span> <span class="nn">Crypto.Cipher</span> <span class="kn">import</span> <span class="n">AES</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.Padding</span> <span class="kn">import</span> <span class="n">unpad</span>

<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">"output.txt"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">A</span>  <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">readline</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">"="</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">strip</span><span class="p">())</span>
    <span class="n">b</span>  <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">readline</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">"="</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">strip</span><span class="p">())</span>
    <span class="n">t</span>  <span class="o">=</span> <span class="n">ast</span><span class="p">.</span><span class="n">literal_eval</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">readline</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">"="</span><span class="p">,</span> <span class="mi">1</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="n">strip</span><span class="p">())</span>
    <span class="n">iv</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">readline</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">"'"</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">ct</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">f</span><span class="p">.</span><span class="n">readline</span><span class="p">().</span><span class="n">split</span><span class="p">(</span><span class="s">"'"</span><span class="p">)[</span><span class="mi">1</span><span class="p">])</span>

<span class="k">def</span> <span class="nf">symmetric_mod</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">m</span><span class="p">):</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">((</span><span class="n">x</span> <span class="o">+</span> <span class="n">m</span> <span class="o">+</span> <span class="n">m</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span> <span class="o">%</span> <span class="n">m</span><span class="p">)</span> <span class="o">-</span> <span class="nb">int</span><span class="p">(</span><span class="n">m</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>

<span class="c1"># https://github.com/jvdsn/crypto-attacks/blob/master/attacks/acd/ol.py
</span><span class="k">def</span> <span class="nf">AGCD</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">rho</span><span class="p">):</span>
    <span class="n">R</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">**</span> <span class="n">rho</span>

    <span class="n">B</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="n">ZZ</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">xi</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">xi</span>
        <span class="n">B</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">R</span>

    <span class="n">B</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">LLL</span><span class="p">()</span>

    <span class="n">K</span> <span class="o">=</span> <span class="n">B</span><span class="p">.</span><span class="n">submatrix</span><span class="p">(</span><span class="n">row</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">col</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)).</span><span class="n">right_kernel</span><span class="p">()</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">K</span><span class="p">.</span><span class="n">an_element</span><span class="p">()</span>
    <span class="n">r0</span> <span class="o">=</span> <span class="n">symmetric_mod</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">q</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">p</span> <span class="o">=</span> <span class="nb">abs</span><span class="p">((</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="n">r0</span><span class="p">)</span> <span class="o">//</span> <span class="n">q</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">symmetric_mod</span><span class="p">(</span><span class="n">xi</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="k">for</span> <span class="n">xi</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
    <span class="k">if</span> <span class="nb">all</span><span class="p">(</span><span class="o">-</span><span class="n">R</span> <span class="o">&lt;</span> <span class="n">ri</span> <span class="o">&lt;</span> <span class="n">R</span> <span class="k">for</span> <span class="n">ri</span> <span class="ow">in</span> <span class="n">r</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">p</span><span class="p">),</span> <span class="n">r</span>

<span class="c1"># https://hackmd.io/@L4m/B1Vpr_vK0
</span><span class="k">def</span> <span class="nf">Multiple_Modular_Subset_Sum_Problem</span><span class="p">(</span><span class="n">multi</span><span class="p">,</span><span class="n">result</span><span class="p">,</span><span class="n">modul</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">multi</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">n1</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">sqrt</span><span class="p">((</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">4</span><span class="p">))</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">QQ</span><span class="p">,</span><span class="n">n</span><span class="p">,</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="n">multi</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">(</span><span class="n">multi</span><span class="p">).</span><span class="n">T</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">augment</span><span class="p">(</span><span class="n">N</span><span class="o">*</span><span class="n">multi</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n1</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">tmp_</span> <span class="o">=</span>  <span class="n">Matrix</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">_</span> <span class="o">+</span> <span class="p">[</span><span class="n">N</span><span class="o">*</span><span class="n">modul</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n1</span><span class="o">-</span><span class="n">_</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
        <span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">tmp_</span><span class="p">)</span>
    <span class="n">tmp</span> <span class="o">=</span> <span class="n">Matrix</span><span class="p">([</span><span class="mi">1</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="o">-</span><span class="n">N</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">result</span><span class="p">])</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">stack</span><span class="p">(</span><span class="n">tmp</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">:</span>
        <span class="n">M</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">M</span><span class="p">.</span><span class="n">LLL</span><span class="p">()[</span><span class="mi">0</span><span class="p">][:</span><span class="n">n</span><span class="p">]</span>
    <span class="n">M</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">M</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">M</span>

<span class="n">y</span> <span class="o">=</span> <span class="p">[(</span><span class="n">ti</span> <span class="o">&lt;&lt;</span> <span class="mi">48</span><span class="p">)</span> <span class="o">-</span> <span class="n">bi</span> <span class="k">for</span> <span class="n">ti</span><span class="p">,</span> <span class="n">bi</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">b</span><span class="p">)]</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Solving AGCD..."</span><span class="p">)</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">AGCD</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="mi">48</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Recovered p: </span><span class="si">{</span><span class="n">p</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Solving MMSSP..."</span><span class="p">)</span>
<span class="n">sol</span> <span class="o">=</span> <span class="n">Multiple_Modular_Subset_Sum_Problem</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">b</span><span class="p">,</span><span class="n">p</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Potential solution: </span><span class="si">{</span><span class="n">sol</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">key</span> <span class="o">=</span> <span class="n">hashlib</span><span class="p">.</span><span class="n">sha256</span><span class="p">(</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="nb">str</span><span class="p">(</span><span class="n">bit</span><span class="p">)</span> <span class="k">for</span> <span class="n">bit</span> <span class="ow">in</span> <span class="n">sol</span><span class="p">]).</span><span class="n">encode</span><span class="p">()).</span><span class="n">digest</span><span class="p">()</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="n">AES</span><span class="p">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">AES</span><span class="p">.</span><span class="n">MODE_CBC</span><span class="p">,</span> <span class="n">iv</span><span class="p">)</span>
<span class="n">pt</span> <span class="o">=</span> <span class="n">unpad</span><span class="p">(</span><span class="n">cipher</span><span class="p">.</span><span class="n">decrypt</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">ct</span><span class="p">.</span><span class="nb">hex</span><span class="p">())),</span><span class="mi">16</span><span class="p">).</span><span class="n">decode</span><span class="p">()</span>
<span class="k">print</span><span class="p">(</span><span class="n">pt</span><span class="p">)</span>
<span class="c1"># DREAM{AGCD_4nd_MvMSSP_2_m4ny_4bbr3v14t10ns_but_pl34s3_d3l3t3_GPT5_n0w}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="AGCD" /><category term="Subset sum problem" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Diamond Ticket (idekCTF 2025)</title><link href="https://zukane.github.io/diamond-ticket/" rel="alternate" type="text/html" title="Diamond Ticket (idekCTF 2025)" /><published>2025-08-02T12:00:00+02:00</published><updated>2025-08-02T12:00:00+02:00</updated><id>https://zukane.github.io/diamond-ticket</id><content type="html" xml:base="https://zukane.github.io/diamond-ticket/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>

<span class="c1">#Some magic from Willy Wonka
</span><span class="n">p</span> <span class="o">=</span> <span class="mi">170829625398370252501980763763988409583</span>
<span class="n">a</span> <span class="o">=</span> <span class="mi">164164878498114882034745803752027154293</span>
<span class="n">b</span> <span class="o">=</span> <span class="mi">125172356708896457197207880391835698381</span>

<span class="k">def</span> <span class="nf">chocolate_generator</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="k">return</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">+</span> <span class="nb">pow</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span> <span class="o">%</span> <span class="n">p</span>

<span class="c1">#The diamond ticket is hiding inside chocolate
</span><span class="n">diamond_ticket</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag.txt"</span><span class="p">,</span> <span class="s">"rb"</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
<span class="k">assert</span> <span class="nb">len</span><span class="p">(</span><span class="n">diamond_ticket</span><span class="p">)</span> <span class="o">==</span> <span class="mi">26</span>
<span class="k">assert</span> <span class="n">diamond_ticket</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span> <span class="o">==</span> <span class="sa">b</span><span class="s">"idek{"</span>
<span class="k">assert</span> <span class="n">diamond_ticket</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">:]</span> <span class="o">==</span> <span class="sa">b</span><span class="s">"}"</span>
<span class="n">diamond_ticket</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">diamond_ticket</span><span class="p">[</span><span class="mi">5</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>

<span class="n">flag_chocolate</span> <span class="o">=</span> <span class="n">chocolate_generator</span><span class="p">(</span><span class="n">diamond_ticket</span><span class="p">)</span>
<span class="n">chocolate_bag</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1">#Willy Wonka are making chocolates
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1337</span><span class="p">):</span> <span class="c1"># 1337 random szám
</span>    <span class="n">chocolate_bag</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">getRandomRange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span>

<span class="c1">#And he put the golden ticket at the end
</span><span class="n">chocolate_bag</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">flag_chocolate</span><span class="p">)</span> <span class="c1"># az utolsó a flag
</span>
<span class="c1">#Augustus ate lots of chocolates, but he can't eat all cuz he is full now :D
</span><span class="n">remain</span> <span class="o">=</span> <span class="n">chocolate_bag</span><span class="p">[</span><span class="o">-</span><span class="mi">5</span><span class="p">:]</span> <span class="c1"># az első 4 random szám, az utolsó a flag
</span>
<span class="c1">#Compress all remain chocolates into one
</span><span class="n">remain_bytes</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">([</span><span class="n">c</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">bit_length</span><span class="p">()</span><span class="o">//</span><span class="mi">8</span><span class="p">,</span> <span class="s">"big"</span><span class="p">)</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">remain</span><span class="p">])</span> 

<span class="c1">#The last chocolate is too important, so Willy Wonka did magic again
</span><span class="n">P</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">Q</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="mi">512</span><span class="p">)</span>
<span class="n">N</span> <span class="o">=</span> <span class="n">P</span> <span class="o">*</span> <span class="n">Q</span>
<span class="n">e</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="sa">b</span><span class="s">"idek{this_is_a_fake_flag_lolol}"</span><span class="p">)</span>
<span class="n">d</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="n">P</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">Q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">c1</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">remain_bytes</span><span class="p">),</span> <span class="n">e</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
<span class="n">c2</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">bytes_to_long</span><span class="p">(</span><span class="n">remain_bytes</span><span class="p">),</span> <span class="mi">2</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span> <span class="c1"># A small gift
</span>
<span class="c1">#How can you get it ?
</span><span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">N</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">c1</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">c2</span> <span class="o">=</span> <span class="si">}</span><span class="s">"</span><span class="p">)</span> 
</code></pre></div></div>

<p>As well as the output:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>N = 85494791395295332945307239533692379607357839212287019473638934253301452108522067416218735796494842928689545564411909493378925446256067741352255455231566967041733698260315140928382934156213563527493360928094724419798812564716724034316384416100417243844799045176599197680353109658153148874265234750977838548867
c1 = 27062074196834458670191422120857456217979308440332928563784961101978948466368298802765973020349433121726736536899260504828388992133435359919764627760887966221328744451867771955587357887373143789000307996739905387064272569624412963289163997701702446706106089751532607059085577031825157942847678226256408018301
c2 = 30493926769307279620402715377825804330944677680927170388776891152831425786788516825687413453427866619728035923364764078434617853754697076732657422609080720944160407383110441379382589644898380399280520469116924641442283645426172683945640914810778133226061767682464112690072473051344933447823488551784450844649
</code></pre></div></div>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>This challenge consists of multiple parts. Firstly, we are given two RSA ciphertexts of the same message with the same modulus. The encrypted message is <code class="language-plaintext highlighter-rouge">remain_bytes</code>, which consists of five concatenated elements of <code class="language-plaintext highlighter-rouge">chocolate_bag</code>. Four of these are random numbers, while the final element is <code class="language-plaintext highlighter-rouge">flag_chocolate</code>.</p>

<p><code class="language-plaintext highlighter-rouge">flag_chocolate</code> is the flag output of the <code class="language-plaintext highlighter-rouge">chocolate_generator(m)</code> function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">chocolate_generator</span><span class="p">(</span><span class="n">m</span><span class="p">:</span><span class="nb">int</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">int</span><span class="p">:</span>
    <span class="k">return</span> <span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span> <span class="o">+</span> <span class="nb">pow</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">))</span> <span class="o">%</span> <span class="n">p</span>
</code></pre></div></div>

<p>We must recover <code class="language-plaintext highlighter-rouge">flag_chocolate</code> from the RSA output, and then recover the message $m$ from the equation</p>

\[\large a^{m} + b^{m} \mod p\]

<p>Where $m$ is the 20-byte plaintext flag</p>

<h5 id="recovering-flag_chocolate">Recovering flag_chocolate</h5>

<p>Like previously mentioned, we are given two RSA samples of the same message, encrypted with different exponents but the same modulus. This makes the plaintext susceptible to an RSA common modulus attack. We can use the implementation from <code class="language-plaintext highlighter-rouge">jvdsn</code>’s repo: https://github.com/jvdsn/crypto-attacks/blob/master/attacks/rsa/common_modulus.py</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">attack</span><span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">e1</span><span class="p">,</span> <span class="n">c1</span><span class="p">,</span> <span class="n">e2</span><span class="p">,</span> <span class="n">c2</span><span class="p">):</span>
    <span class="n">g</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">xgcd</span><span class="p">(</span><span class="n">e1</span><span class="p">,</span> <span class="n">e2</span><span class="p">)</span>
    <span class="n">p1</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="k">if</span> <span class="n">u</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="nb">pow</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span> <span class="o">-</span><span class="n">u</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="n">p2</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span> <span class="k">if</span> <span class="n">v</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="nb">pow</span><span class="p">(</span><span class="nb">pow</span><span class="p">(</span><span class="n">c2</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span> <span class="o">-</span><span class="n">v</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">ZZ</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">p1</span> <span class="o">*</span> <span class="n">p2</span><span class="p">)</span> <span class="o">%</span> <span class="n">n</span><span class="p">).</span><span class="n">nth_root</span><span class="p">(</span><span class="n">g</span><span class="p">))</span>
</code></pre></div></div>

<p>We can simply input the parameters from the source code, and we easily recover <code class="language-plaintext highlighter-rouge">flag_chooclate</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">N</span> <span class="o">=</span> <span class="mi">85494791395295332945307239533692379607357839212287019473638934253301452108522067416218735796494842928689545564411909493378925446256067741352255455231566967041733698260315140928382934156213563527493360928094724419798812564716724034316384416100417243844799045176599197680353109658153148874265234750977838548867</span>
<span class="n">c1</span> <span class="o">=</span> <span class="mi">27062074196834458670191422120857456217979308440332928563784961101978948466368298802765973020349433121726736536899260504828388992133435359919764627760887966221328744451867771955587357887373143789000307996739905387064272569624412963289163997701702446706106089751532607059085577031825157942847678226256408018301</span>
<span class="n">c2</span> <span class="o">=</span> <span class="mi">30493926769307279620402715377825804330944677680927170388776891152831425786788516825687413453427866619728035923364764078434617853754697076732657422609080720944160407383110441379382589644898380399280520469116924641442283645426172683945640914810778133226061767682464112690072473051344933447823488551784450844649</span>
<span class="n">e1</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="sa">b</span><span class="s">"idek{this_is_a_fake_flag_lolol}"</span><span class="p">)</span>
<span class="n">e2</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">remain_bytes</span> <span class="o">=</span> <span class="n">long_to_bytes</span><span class="p">(</span><span class="n">attack</span><span class="p">(</span><span class="n">N</span><span class="p">,</span><span class="n">e1</span><span class="p">,</span><span class="n">c1</span><span class="p">,</span><span class="n">e2</span><span class="p">,</span><span class="n">c2</span><span class="p">))</span>
<span class="n">remain</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">remain_bytes</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">16</span><span class="p">],</span> <span class="s">"big"</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">remain_bytes</span><span class="p">),</span> <span class="mi">16</span><span class="p">)]</span>
<span class="n">flag_chocolate</span> <span class="o">=</span> <span class="n">remain</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="c1"># 99584795316725433978492646071734128819
</span></code></pre></div></div>

<h5 id="recovering-the-original-m">Recovering the original m</h5>

<p>With <code class="language-plaintext highlighter-rouge">flag_chocolate</code> recovered, we now must recover the original flag from the equation. From here on, we denote <code class="language-plaintext highlighter-rouge">flag_chocolate</code> as $S$.</p>

\[\large S \equiv a^{m} + b^{m} \mod p\]

<p>Firstly, we notice that $p$ is a prime. We therefore work in the finite field $\mathbb{F}_{p}$. In SageMath, we can check the order $r$ of the field:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">p</span>  <span class="o">=</span> <span class="mi">170829625398370252501980763763988409583</span>
<span class="p">....:</span> <span class="n">a</span>  <span class="o">=</span> <span class="mi">164164878498114882034745803752027154293</span>
<span class="p">....:</span> <span class="n">b</span>  <span class="o">=</span> <span class="mi">125172356708896457197207880391835698381</span>
<span class="p">....:</span> <span class="n">F</span>  <span class="o">=</span> <span class="n">GF</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">).</span><span class="n">multiplicative_order</span><span class="p">()</span>
<span class="mi">85414812699185126250990381881994204791</span>
</code></pre></div></div>

<p>It turns out, the order of the field is surprisingly smooth:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">factor</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">).</span><span class="n">multiplicative_order</span><span class="p">())</span>
<span class="mi">40841</span> <span class="o">*</span> <span class="mi">50119</span> <span class="o">*</span> <span class="mi">51193</span> <span class="o">*</span> <span class="mi">55823</span> <span class="o">*</span> <span class="mi">57809</span> <span class="o">*</span> <span class="mi">61991</span> <span class="o">*</span> <span class="mi">63097</span> <span class="o">*</span> <span class="mi">64577</span>
</code></pre></div></div>

<p>This means calculating discrete logs is quite easy. We can calculate the discrete log</p>

\[\large b = a^{k} \mod p\]

<p>for some $k$. Afterwards, we can rewrite our equation to:</p>

\[\large S \equiv a^{m} + a^{mk} \mod p\]

<p>The discrete log is easily calculable in SageMath, and since the order is smooth, it is almost instant:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sage</span><span class="p">:</span> <span class="n">r</span> <span class="o">=</span> <span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">).</span><span class="n">multiplicative_order</span><span class="p">()</span>
<span class="n">sage</span><span class="p">:</span> <span class="n">k</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">F</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">ord</span><span class="o">=</span><span class="n">r</span><span class="p">)</span>
<span class="c1"># 73331
</span></code></pre></div></div>

<p>The exponent $k = 73331$, which seems intentional considering it is $13337$ backwards. We denote $a^{m}$ as $x$, and we are now left with the polynomial:</p>

\[\large x + x^{k} - S \equiv 0 \mod p\]

<p>By finding the root of this polynomial, we can find $a^{m} \bmod p$, where we can again solve for the discrete log, retrieving $m$. However, simply attempting <code class="language-plaintext highlighter-rouge">f.roots(multiplicities=False)</code> in SageMath is not enough. I used the <code class="language-plaintext highlighter-rouge">Cantor - Zassnehaus</code> method to find the root:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">R</span><span class="p">.</span><span class="o">&lt;</span><span class="n">x</span><span class="o">&gt;</span> <span class="o">=</span> <span class="n">PolynomialRing</span><span class="p">(</span><span class="n">F</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">x</span><span class="o">^</span><span class="n">k</span> <span class="o">-</span> <span class="n">flag_chocolate</span>

<span class="k">def</span> <span class="nf">unique_root</span><span class="p">(</span><span class="n">poly</span><span class="p">):</span>
    <span class="n">q</span> <span class="o">=</span> <span class="n">F</span><span class="p">.</span><span class="n">characteristic</span><span class="p">()</span>
    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">g</span> <span class="o">=</span> <span class="n">R</span><span class="p">.</span><span class="n">random_element</span><span class="p">(</span><span class="n">degree</span><span class="o">=</span><span class="n">poly</span><span class="p">.</span><span class="n">degree</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">h</span> <span class="o">=</span> <span class="p">(</span><span class="n">power_mod</span><span class="p">(</span><span class="n">g</span><span class="p">,(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span> <span class="n">poly</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">).</span><span class="n">gcd</span><span class="p">(</span><span class="n">poly</span><span class="p">)</span>
        <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;</span> <span class="n">h</span><span class="p">.</span><span class="n">degree</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">poly</span><span class="p">.</span><span class="n">degree</span><span class="p">():</span>
            <span class="n">poly</span> <span class="o">=</span> <span class="n">h</span>  
            <span class="k">if</span> <span class="n">poly</span><span class="p">.</span><span class="n">degree</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="o">-</span><span class="n">poly</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>  

<span class="n">root</span> <span class="o">=</span> <span class="n">unique_root</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>  
<span class="c1"># 126961729658296101306560858021273501485
</span></code></pre></div></div>

<p>With the root $a^{m} \bmod p$ recovered, we can now recover $m$ using the discrete log:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">m</span> <span class="o">=</span> <span class="n">discrete_log</span><span class="p">(</span><span class="n">root</span><span class="p">,</span> <span class="n">F</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">ord</span><span class="o">=</span><span class="n">r</span><span class="p">)</span>  
<span class="c1"># 4807895356063327854843653048517090061
</span></code></pre></div></div>

<p>However, the recovered $m$ is not the complete plaintext. The original plaintext is 20 bytes, or rather 159 bits (because of leading 0 bit in ascii) while our modulus $p$ is 128 bits. To recover the complete 160 bit plaintext flag, we must lift the modulus and brute-force the missing factor $k$:</p>

\[\large \text{flag} = m + k \cdot r\]

<p>To verify if the flag is correct (or at least a candidate), we can check whether all flag bytes are printable ascii (between 32 and 126). With a 127 bit modulus $r$ and a 160 bit plaintext, the missing factor $k$ has an upper bound of $2^{33}$. This is doable in python/SageMath, but can be done a lot faster in a low-level language like c++ or rust. I wrote a brute-force code in c++ which iterates over possible values $k$ and prints the flag candidates:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>idek{ cm &amp;d@05 CS*q_[6Xxo}, k = 2164788270
idek{"pVJWCNmgg59#/c,A1lf}, k = 2301835951
idek{**}iVY9U:VhDtYv|Z@Un}, k = 2818307047
idek{+MUks($7Mgr}k^M9EMB0}, k = 2894242741
idek{,uMCt7xQoGqB+=Vkz"X0}, k = 2971516341
idek{-'0v|lsh/#JFnY?_!S\S}, k = 3017960554
idek{-;dC^#LP]I\3ke*iKIzV}, k = 3023235135
idek{-{=G(2|N955PXau;%,;"}, k = 3039904979
idek{9nRCVJsLMOij?QU/&amp;Dj4}, k = 3838593233
idek{=rL&gt;7&gt;`HH?z dwF#\Rsb}, k = 4106985107
idek{&gt;Xs\C7)bg1"_CB5p('| }, k = 4167075141
idek{&gt;`6D\-v^1DVo9nAbY{f?}, k = 4169101534
idek{@cL5&amp;a3iu~~jwMu~?68`}, k = 4303584005
idek{A-;4;6kR&amp;xjp"ebkaFYf}, k = 4356306351
idek{ALZ&gt;fE\}Lu,\6ku;5v/S}, k = 4364431722
idek{Aqcll#(*wLKg{k: 9x!a}, k = 4374101324
idek{D=7q7ZmjJU+/_SET(k&lt;Z}, k = 4560995163
idek{DjeT|t!M&amp;o#~TYeKTaL^}, k = 4572790903
idek{ETJ|+J+~B{q;f1$cJdO?}, k = 4633858014
idek{F\eth:*"=Oq5qXM0@I(Q}, k = 4702812636
idek{GGqO`:j0, OVhGk6`QI=}, k = 4764180304
idek{H+@B~2[q{UtzIEEU+&lt;7r}, k = 4823658243
idek{J$\Gu~.)Be{/#`@Y@a"7}, k = 4955536038
idek{L[&amp;RdOPDT2*D}q?Oi^Xu}, k = 5103517656
idek{N`(&lt;}~b*iHSmtz4'X68g}, k = 5238501878
idek{OH&amp;F`@GGUpsVMHkX![hM}, k = 5299072192
idek{P5bxoo)'46];&gt;`])&gt;)pE}, k = 5361011336
idek{Q.=k;. PCu,q#}OZ}|f6}, k = 5425984351
idek{TK%_6N?GvA@z.F Vvi$P}, k = 5634046613
idek{T}bLK\y7=7h"EKU&amp;!@PU}, k = 5647163128
idek{W)pA[}X(cS&gt;`w16l'cYn}, k = 5825761255
idek{Y6'g2eA?&lt;DfH$33f}:+@}, k = 5962757925
idek{YoFMQ?|I!,U'?hAYTwL`}, k = 5977671429
idek{^Swy+98nqf3F#M5 ZD- }, k = 6304603205
idek{a_DUV.bwgVg0G5=Q1Z+B}, k = 6508199347
idek{dX5Z:`_B:w E?2g`A96&gt;}, k = 6706871703
idek{d}Okl]'GAP^Re#-aPEHM}, k = 6716558528
idek{hdmhF2o7XO#XIY=&lt;7&amp;a[}, k = 6977415586
idek{iD(*_@q"aQ 6&gt;H#H' Mw}, k = 7035828582
idek{kV*_rGI-Q]z8z{+A[-v&lt;}, k = 7174207241
idek{l=Mt0@&amp;;3]+))wOQxxLW}, k = 7234554246
idek{n }W~-LJ(qb&lt;\kw4aR,#}, k = 7360708378
idek{ng0qo1rmR2_jS[;,Q1UM}, k = 7379167168
idek{o-Z4t_oZ[_.Fng} W0`&lt;}, k = 7430905097
idek{tks_f0r_ur_t1ck3t_xD}, k = 7781310273 &lt;- our flag
idek{u]aAv}2(KI~?.yrgmhxS}, k = 7844474986
idek{w_"knU](04jH_hi*&lt;.xy}, k = 7978609908
idek{zxZmPiv]iZ,1fSH|9_m,}, k = 8185709465
idek{~&gt;AkP(C2`p-DWPSe2=_t}, k = 8437894545
</code></pre></div></div>

<p>With $k = 7781310273$ we recover our flag: <code class="language-plaintext highlighter-rouge">idek{tks_f0r_ur_t1ck3t_xD}</code> !</p>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Common Modulus attack" /><category term="Diophantine" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">SHA-CTR (CERT.PL 2025)</title><link href="https://zukane.github.io/SHA-CTR/" rel="alternate" type="text/html" title="SHA-CTR (CERT.PL 2025)" /><published>2025-07-15T13:00:00+02:00</published><updated>2025-07-15T13:00:00+02:00</updated><id>https://zukane.github.io/SHA-CTR</id><content type="html" xml:base="https://zukane.github.io/SHA-CTR/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge, we are given the source code for a remote instance:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">binascii</span>
<span class="kn">import</span> <span class="nn">itertools</span>
<span class="kn">import</span> <span class="nn">os</span>

<span class="kn">from</span> <span class="nn">hashlib</span> <span class="kn">import</span> <span class="n">sha512</span>

<span class="n">key</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">xor</span><span class="p">(</span><span class="n">a</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">b</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="k">return</span> <span class="nb">bytes</span><span class="p">([(</span><span class="n">aa</span> <span class="o">^</span> <span class="n">bb</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">aa</span><span class="p">,</span> <span class="n">bb</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)])</span>


<span class="k">def</span> <span class="nf">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">nonce</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">,</span> <span class="n">data</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">block_size</span> <span class="o">=</span> <span class="mi">512</span> <span class="o">//</span> <span class="mi">8</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">block</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">itertools</span><span class="p">.</span><span class="n">batched</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">block_size</span><span class="p">)):</span>
        <span class="n">counter</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">i</span><span class="si">:</span><span class="mi">010</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
        <span class="n">keystream</span> <span class="o">=</span> <span class="n">sha512</span><span class="p">(</span><span class="n">key</span> <span class="o">+</span> <span class="n">nonce</span> <span class="o">+</span> <span class="n">counter</span><span class="p">).</span><span class="n">digest</span><span class="p">()</span>
        <span class="n">res</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">xor</span><span class="p">(</span><span class="n">keystream</span><span class="p">,</span> <span class="nb">bytes</span><span class="p">(</span><span class="n">block</span><span class="p">)))</span>
    <span class="k">return</span> <span class="sa">b</span><span class="s">''</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">res</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">get_ciphertext</span><span class="p">(</span><span class="n">nonce</span><span class="p">:</span> <span class="nb">bytes</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bytes</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s">"flag.bmp"</span><span class="p">,</span> <span class="s">'rb'</span><span class="p">).</span><span class="n">read</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">encrypt</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">nonce</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
        <span class="n">nonce</span> <span class="o">=</span> <span class="n">binascii</span><span class="p">.</span><span class="n">unhexlify</span><span class="p">(</span><span class="nb">input</span><span class="p">(</span><span class="s">"nonce:"</span><span class="p">))</span>
        <span class="k">print</span><span class="p">(</span><span class="n">binascii</span><span class="p">.</span><span class="n">hexlify</span><span class="p">(</span><span class="n">get_ciphertext</span><span class="p">(</span><span class="n">nonce</span><span class="p">)).</span><span class="n">decode</span><span class="p">())</span>


<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>

<p>as well as an example_flag.bmp image.</p>

<h5 id="length-extension">Length extension</h5>

<p>The encryption service implements a custom stream cipher using SHA512. We have the ability to encrypt the flag.bmp file with a chosen nonce. The plaintext data is split into blocks of size 64, and for each block, a keystream is generated and XORed with the block:</p>

\[\large \begin{align}
\nonumber keystream_{i} &amp;= SHA512(key \space \| \space nonce \space \| \space ctr_{i}) \\
\nonumber ct _{i} &amp;= keystream_{i} \oplus block_{i}
\end{align}\]

<p>Using SHA512 in this fashion is dangerous, as it opens up the possibility for a length extension attack. A length extension attack allows a user to calculate the hash $Hash(secret \space | \space message)$ if the length of the <code class="language-plaintext highlighter-rouge">secret</code> is known, and the <code class="language-plaintext highlighter-rouge">message</code> is known. If we can generate the hash (keystream) for each of the predictable counters, even without knowing the key, we can decrypt the encrypted flag image. In our case, this <code class="language-plaintext highlighter-rouge">message</code> is comprised of the chosen nonce and the known counter. In addition to this, SHA512 includes some internal padding since it handles 128-byte chunks at a time.</p>

<p>We begin by sending an empty nonce <code class="language-plaintext highlighter-rouge">b''</code> in the first round. The encryption service will generate a keystream by hashing:</p>

\[\large keystream_{0} = SHA512(key \space \| \space ctr_{0} \space \| \space padding)\]

<p>We have a 32 byte key and a 10 byte counter, which means we have 86 bytes of padding being hashed. This $keystream_{0}$ will be a vital piece of information later. We can denote this keystream or hash as $H_{0}$. On the second (and last) query, we set the nonce to $(ctr_{0} \space | \space padding)$. The encryption service will then generate a keystream by hashing:</p>

\[\large keystream_{0} = SHA512(key \space \| \space ctr_{0} \space \| \space padding_{0} \space \| \space ctr_{i} \space \| \space padding_{i})\]

<p>Now, the data to be hashed has surpassed 128 bytes in length. Internally, SHA512 will digest the first block $key \space | \space ctr_{0} \space | \space padding_{0}$, update the internal state, then digest the second block $ctr_{i} \space | \space padding_{i}$. The updated internal state will be $H_{0}$. If we are able to recover this $H_{0}$, we can set the known internal state of a SHA512 copy locally, and process each $i$ possible second blocks. This way, we are able to recover all keystreams and hence decrypt the encrypted flag by XOR.</p>

<h5 id="attack-implementation">Attack implementation</h5>

<p>The attack hinges on knowing $H_{0}$ or rather $keystream_{0}$. By sending in an empty nonce to the encryption service, we receive</p>

\[\large ct_{0} = pt_{0} \oplus H_{0}\]

<p>If we knew the first plaintext block of the flag, then $H_{0}$ would be recoverable. Luckily for us, the challenge gave us an example_flag.bmp file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>xxd -p -l 64 example_flag.bmp
424dee3b0000000000003600000028000000c40000001a00000001001800
00000000b83b000000000000000000000000000000000000ffffffffffff
ffffffff
</code></pre></div></div>

<p>The BMP header consists of magic bytes, dimension fields, size fields, and some <code class="language-plaintext highlighter-rouge">ffffffffff</code> pixel values at the end (white pixels). This is all predictable information, as the flag will most likely have the same dimensions, the same size (can be verified by the ciphertext size) and also include white pixels in that position. Therefore, with high likelihood, the first plaintext block of the example flag, and the actual flag, is the same.</p>

<p>This way, we can recover $H_{0}$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">known_plain</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span>
    <span class="s">"424dee3b0000000000003600000028000000c40000001a00000001001800"</span>
    <span class="s">"00000000b83b000000000000000000000000000000000000ffffffffffff"</span>
    <span class="s">"ffffffff"</span>
<span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"nonce:"</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">""</span><span class="p">)</span> <span class="c1"># empty nonce
</span><span class="n">cipher0</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span> <span class="c1"># get ciphertext
</span><span class="n">state_ints</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">xor</span><span class="p">(</span><span class="n">cipher0</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span><span class="n">known_plain</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">]))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="mi">8</span><span class="p">)]</span> <span class="c1"># xor 
</span></code></pre></div></div>

<p>$H_{0}$ is split up into <code class="language-plaintext highlighter-rouge">state_ints</code> to be later processed as the SHA512 internal state. From here, we can prepare the second step. Padding in SHA2 is structured like so:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\x80 + many \x00 + 16-byte length field 
</code></pre></div></div>

<p>We recall that we have 86 bytes of padding, since the counter is 10 bytes and the key is 32 bytes. With the <code class="language-plaintext highlighter-rouge">\x80</code> padding “header” and the 16 byte length field, we are left with 69 null-bytes. We construct the padding and nonce like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">KEY_LEN</span>      <span class="o">=</span> <span class="mi">32</span>
<span class="n">CTR_LEN</span>      <span class="o">=</span> <span class="mi">10</span>
<span class="n">first_ctr</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"0"</span> <span class="o">*</span> <span class="n">CTR_LEN</span>
<span class="n">pad</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x80</span><span class="s">"</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="mi">69</span> <span class="o">+</span> <span class="p">((</span><span class="n">KEY_LEN</span> <span class="o">+</span> <span class="n">CTR_LEN</span><span class="p">)</span><span class="o">*</span><span class="mi">8</span><span class="p">).</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
<span class="n">nonce</span> <span class="o">=</span> <span class="n">first_ctr</span> <span class="o">+</span> <span class="n">pad</span>
</code></pre></div></div>

<p>After sending the nonce, we receive the corresponding encrypted flag.bmp. This data has to be handled in blocks of 64. For each block, we generate the predictable counter $ctr_{i}$, then we generate it’s corresponding padding (now 118 bytes since the second block consists of just the counter), before the block is fed to the internal SHA512 copy with the <code class="language-plaintext highlighter-rouge">state_ints</code> from $H_{0}$:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">second_block</span><span class="p">(</span><span class="n">counter</span><span class="p">):</span>
    <span class="n">total_bits</span> <span class="o">=</span> <span class="p">(</span><span class="n">KEY_LEN</span> <span class="o">+</span> <span class="n">CTR_LEN</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">pad</span><span class="p">)</span> <span class="o">+</span> <span class="n">CTR_LEN</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>
    <span class="k">return</span> <span class="n">counter</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x80</span><span class="s">"</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="mi">101</span> <span class="o">+</span> <span class="n">total_bits</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>

<span class="k">for</span> <span class="n">block_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">cipher</span><span class="p">),</span> <span class="n">BLOCK_SIZE</span><span class="p">):</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">block_index</span><span class="o">//</span><span class="n">BLOCK_SIZE</span><span class="si">:</span><span class="mi">010</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
    <span class="n">ks_words</span> <span class="o">=</span> <span class="n">sha512_compress</span><span class="p">(</span><span class="n">second_block</span><span class="p">(</span><span class="n">counter</span><span class="p">),</span> <span class="n">state_ints</span><span class="p">)</span>
    <span class="n">keystream</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">ks_words</span><span class="p">)</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">sha512_compress()</code> functions is a boilerplate SHA512 implementation in python from here: https://github.com/KelCodesStuff/Cryptographic-Algorithms/blob/42441605679ee0aa9ad94611c21512cab93ea559/src/sha512.py</p>

<p>With the keystream for each block, we are able to easily recover the plaintext bytes through XOR. The complete plaintext byte-array is written to <code class="language-plaintext highlighter-rouge">flag.bmp</code>, which reveals the flag:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ecsc25{never_cross_the_streams}
</code></pre></div></div>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">struct</span>

<span class="c1"># sha512 implementation from https://github.com/KelCodesStuff/Cryptographic-Algorithms/blob/42441605679ee0aa9ad94611c21512cab93ea559/src/sha512.py
</span><span class="n">K</span> <span class="o">=</span> <span class="p">[</span>
    <span class="mh">0x428a2f98d728ae22</span><span class="p">,</span> <span class="mh">0x7137449123ef65cd</span><span class="p">,</span> <span class="mh">0xb5c0fbcfec4d3b2f</span><span class="p">,</span> <span class="mh">0xe9b5dba58189dbbc</span><span class="p">,</span>
    <span class="mh">0x3956c25bf348b538</span><span class="p">,</span> <span class="mh">0x59f111f1b605d019</span><span class="p">,</span> <span class="mh">0x923f82a4af194f9b</span><span class="p">,</span> <span class="mh">0xab1c5ed5da6d8118</span><span class="p">,</span>
    <span class="mh">0xd807aa98a3030242</span><span class="p">,</span> <span class="mh">0x12835b0145706fbe</span><span class="p">,</span> <span class="mh">0x243185be4ee4b28c</span><span class="p">,</span> <span class="mh">0x550c7dc3d5ffb4e2</span><span class="p">,</span>
    <span class="mh">0x72be5d74f27b896f</span><span class="p">,</span> <span class="mh">0x80deb1fe3b1696b1</span><span class="p">,</span> <span class="mh">0x9bdc06a725c71235</span><span class="p">,</span> <span class="mh">0xc19bf174cf692694</span><span class="p">,</span>
    <span class="mh">0xe49b69c19ef14ad2</span><span class="p">,</span> <span class="mh">0xefbe4786384f25e3</span><span class="p">,</span> <span class="mh">0x0fc19dc68b8cd5b5</span><span class="p">,</span> <span class="mh">0x240ca1cc77ac9c65</span><span class="p">,</span>
    <span class="mh">0x2de92c6f592b0275</span><span class="p">,</span> <span class="mh">0x4a7484aa6ea6e483</span><span class="p">,</span> <span class="mh">0x5cb0a9dcbd41fbd4</span><span class="p">,</span> <span class="mh">0x76f988da831153b5</span><span class="p">,</span>
    <span class="mh">0x983e5152ee66dfab</span><span class="p">,</span> <span class="mh">0xa831c66d2db43210</span><span class="p">,</span> <span class="mh">0xb00327c898fb213f</span><span class="p">,</span> <span class="mh">0xbf597fc7beef0ee4</span><span class="p">,</span>
    <span class="mh">0xc6e00bf33da88fc2</span><span class="p">,</span> <span class="mh">0xd5a79147930aa725</span><span class="p">,</span> <span class="mh">0x06ca6351e003826f</span><span class="p">,</span> <span class="mh">0x142929670a0e6e70</span><span class="p">,</span>
    <span class="mh">0x27b70a8546d22ffc</span><span class="p">,</span> <span class="mh">0x2e1b21385c26c926</span><span class="p">,</span> <span class="mh">0x4d2c6dfc5ac42aed</span><span class="p">,</span> <span class="mh">0x53380d139d95b3df</span><span class="p">,</span>
    <span class="mh">0x650a73548baf63de</span><span class="p">,</span> <span class="mh">0x766a0abb3c77b2a8</span><span class="p">,</span> <span class="mh">0x81c2c92e47edaee6</span><span class="p">,</span> <span class="mh">0x92722c851482353b</span><span class="p">,</span>
    <span class="mh">0xa2bfe8a14cf10364</span><span class="p">,</span> <span class="mh">0xa81a664bbc423001</span><span class="p">,</span> <span class="mh">0xc24b8b70d0f89791</span><span class="p">,</span> <span class="mh">0xc76c51a30654be30</span><span class="p">,</span>
    <span class="mh">0xd192e819d6ef5218</span><span class="p">,</span> <span class="mh">0xd69906245565a910</span><span class="p">,</span> <span class="mh">0xf40e35855771202a</span><span class="p">,</span> <span class="mh">0x106aa07032bbd1b8</span><span class="p">,</span>
    <span class="mh">0x19a4c116b8d2d0c8</span><span class="p">,</span> <span class="mh">0x1e376c085141ab53</span><span class="p">,</span> <span class="mh">0x2748774cdf8eeb99</span><span class="p">,</span> <span class="mh">0x34b0bcb5e19b48a8</span><span class="p">,</span>
    <span class="mh">0x391c0cb3c5c95a63</span><span class="p">,</span> <span class="mh">0x4ed8aa4ae3418acb</span><span class="p">,</span> <span class="mh">0x5b9cca4f7763e373</span><span class="p">,</span> <span class="mh">0x682e6ff3d6b2b8a3</span><span class="p">,</span>
    <span class="mh">0x748f82ee5defb2fc</span><span class="p">,</span> <span class="mh">0x78a5636f43172f60</span><span class="p">,</span> <span class="mh">0x84c87814a1f0ab72</span><span class="p">,</span> <span class="mh">0x8cc702081a6439ec</span><span class="p">,</span>
    <span class="mh">0x90befffa23631e28</span><span class="p">,</span> <span class="mh">0xa4506cebde82bde9</span><span class="p">,</span> <span class="mh">0xbef9a3f7b2c67915</span><span class="p">,</span> <span class="mh">0xc67178f2e372532b</span><span class="p">,</span>
    <span class="mh">0xca273eceea26619c</span><span class="p">,</span> <span class="mh">0xd186b8c721c0c207</span><span class="p">,</span> <span class="mh">0xeada7dd6cde0eb1e</span><span class="p">,</span> <span class="mh">0xf57d4f7fee6ed178</span><span class="p">,</span>
    <span class="mh">0x06f067aa72176fba</span><span class="p">,</span> <span class="mh">0x0a637dc5a2c898a6</span><span class="p">,</span> <span class="mh">0x113f9804bef90dae</span><span class="p">,</span> <span class="mh">0x1b710b35131c471b</span><span class="p">,</span>
    <span class="mh">0x28db77f523047d84</span><span class="p">,</span> <span class="mh">0x32caab7b40c72493</span><span class="p">,</span> <span class="mh">0x3c9ebe0a15c9bebc</span><span class="p">,</span> <span class="mh">0x431d67c49c100d4c</span><span class="p">,</span>
    <span class="mh">0x4cc5d4becb3e42b6</span><span class="p">,</span> <span class="mh">0x597f299cfc657e2a</span><span class="p">,</span> <span class="mh">0x5fcb6fab3ad6faec</span><span class="p">,</span> <span class="mh">0x6c44198c4a475817</span><span class="p">,</span>
<span class="p">]</span>

<span class="k">def</span> <span class="nf">right_rotate</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">((</span><span class="n">value</span> <span class="o">&gt;&gt;</span> <span class="n">n</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">value</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="mi">64</span> <span class="o">-</span> <span class="n">n</span><span class="p">)))</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>

<span class="k">def</span> <span class="nf">sha512_compress</span><span class="p">(</span><span class="n">chunk</span><span class="p">,</span> <span class="n">hash_state</span><span class="p">):</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">128</span><span class="p">:</span>
        <span class="n">chunk</span> <span class="o">+=</span> <span class="sa">b</span><span class="s">'</span><span class="se">\x00</span><span class="s">'</span> <span class="o">*</span> <span class="p">(</span><span class="mi">128</span> <span class="o">-</span> <span class="nb">len</span><span class="p">(</span><span class="n">chunk</span><span class="p">))</span>

    <span class="n">w</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mi">80</span>
    <span class="n">w</span><span class="p">[:</span><span class="mi">16</span><span class="p">]</span> <span class="o">=</span> <span class="n">struct</span><span class="p">.</span><span class="n">unpack</span><span class="p">(</span><span class="s">'&gt;16Q'</span><span class="p">,</span> <span class="n">chunk</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">80</span><span class="p">):</span>
        <span class="n">s0</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">15</span><span class="p">],</span> <span class="mi">1</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">15</span><span class="p">],</span> <span class="mi">8</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">15</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">7</span><span class="p">)</span>
        <span class="n">s1</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">],</span> <span class="mi">19</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">],</span> <span class="mi">61</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">2</span><span class="p">]</span> <span class="o">&gt;&gt;</span> <span class="mi">6</span><span class="p">)</span>
        <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">16</span><span class="p">]</span> <span class="o">+</span> <span class="n">s0</span> <span class="o">+</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="mi">7</span><span class="p">]</span> <span class="o">+</span> <span class="n">s1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>

    <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span> <span class="o">=</span> <span class="n">hash_state</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">80</span><span class="p">):</span>
        <span class="n">s1</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="mi">18</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="mi">41</span><span class="p">)</span>
        <span class="n">ch</span> <span class="o">=</span> <span class="p">(</span><span class="n">e</span> <span class="o">&amp;</span> <span class="n">f</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="o">~</span><span class="n">e</span> <span class="o">&amp;</span> <span class="n">g</span><span class="p">)</span>
        <span class="n">temp1</span> <span class="o">=</span> <span class="p">(</span><span class="n">h</span> <span class="o">+</span> <span class="n">s1</span> <span class="o">+</span> <span class="n">ch</span> <span class="o">+</span> <span class="n">K</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span><span class="p">[</span><span class="n">i</span><span class="p">])</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
        <span class="n">s0</span> <span class="o">=</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">28</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">34</span><span class="p">)</span> <span class="o">^</span> <span class="n">right_rotate</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="mi">39</span><span class="p">)</span>
        <span class="n">maj</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">a</span> <span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span> <span class="o">^</span> <span class="p">(</span><span class="n">b</span> <span class="o">&amp;</span> <span class="n">c</span><span class="p">)</span>
        <span class="n">temp2</span> <span class="o">=</span> <span class="p">(</span><span class="n">s0</span> <span class="o">+</span> <span class="n">maj</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>

        <span class="n">h</span> <span class="o">=</span> <span class="n">g</span>
        <span class="n">g</span> <span class="o">=</span> <span class="n">f</span>
        <span class="n">f</span> <span class="o">=</span> <span class="n">e</span>
        <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">d</span> <span class="o">+</span> <span class="n">temp1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>
        <span class="n">d</span> <span class="o">=</span> <span class="n">c</span>
        <span class="n">c</span> <span class="o">=</span> <span class="n">b</span>
        <span class="n">b</span> <span class="o">=</span> <span class="n">a</span>
        <span class="n">a</span> <span class="o">=</span> <span class="p">(</span><span class="n">temp1</span> <span class="o">+</span> <span class="n">temp2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span>

    <span class="n">hash_state</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xffffffffffffffff</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">hash_state</span><span class="p">,</span> <span class="p">[</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">f</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">h</span><span class="p">])]</span>
    <span class="k">return</span> <span class="n">hash_state</span>




<span class="kn">from</span> <span class="nn">pwn</span> <span class="kn">import</span> <span class="n">remote</span><span class="p">,</span> <span class="n">xor</span>

<span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span>   <span class="o">=</span> <span class="s">"shactr.ecsc25.hack.cert.pl"</span><span class="p">,</span> <span class="mi">5203</span>
<span class="n">BLOCK_SIZE</span>   <span class="o">=</span> <span class="mi">64</span>
<span class="n">KEY_LEN</span>      <span class="o">=</span> <span class="mi">32</span>
<span class="n">CTR_LEN</span>      <span class="o">=</span> <span class="mi">10</span>

<span class="c1"># xxd -p -l 64 example_flag.bmp
</span><span class="n">known_plain</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span>
    <span class="s">"424dee3b0000000000003600000028000000c40000001a00000001001800"</span>
    <span class="s">"00000000b83b000000000000000000000000000000000000ffffffffffff"</span>
    <span class="s">"ffffffff"</span>
<span class="p">)</span>
<span class="n">file_size</span> <span class="o">=</span> <span class="mh">0x3bee</span>

<span class="n">io</span> <span class="o">=</span> <span class="n">remote</span><span class="p">(</span><span class="n">HOST</span><span class="p">,</span> <span class="n">PORT</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"nonce:"</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="sa">b</span><span class="s">""</span><span class="p">)</span>
<span class="n">cipher0</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span>

<span class="n">state_ints</span> <span class="o">=</span> <span class="p">[</span><span class="nb">int</span><span class="p">.</span><span class="n">from_bytes</span><span class="p">(</span><span class="n">xor</span><span class="p">(</span><span class="n">cipher0</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span><span class="n">known_plain</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span><span class="o">+</span><span class="mi">8</span><span class="p">]))</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">BLOCK_SIZE</span><span class="p">,</span> <span class="mi">8</span><span class="p">)]</span>
<span class="n">first_ctr</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"0"</span> <span class="o">*</span> <span class="n">CTR_LEN</span>
<span class="c1"># 0x80 + many 0x00 + 16 bytes length-field
</span><span class="n">pad</span> <span class="o">=</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x80</span><span class="s">"</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="mi">69</span> <span class="o">+</span> <span class="p">((</span><span class="n">KEY_LEN</span> <span class="o">+</span> <span class="n">CTR_LEN</span><span class="p">)</span><span class="o">*</span><span class="mi">8</span><span class="p">).</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
<span class="n">nonce</span> <span class="o">=</span> <span class="n">first_ctr</span> <span class="o">+</span> <span class="n">pad</span>

<span class="n">io</span><span class="p">.</span><span class="n">recvuntil</span><span class="p">(</span><span class="sa">b</span><span class="s">"nonce:"</span><span class="p">)</span>
<span class="n">io</span><span class="p">.</span><span class="n">sendline</span><span class="p">(</span><span class="n">nonce</span><span class="p">.</span><span class="nb">hex</span><span class="p">().</span><span class="n">encode</span><span class="p">())</span>
<span class="n">cipher</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="n">io</span><span class="p">.</span><span class="n">recvline</span><span class="p">().</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">())</span>
<span class="n">io</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>

<span class="c1"># ctr(i) \| padding
</span><span class="k">def</span> <span class="nf">second_block</span><span class="p">(</span><span class="n">counter</span><span class="p">):</span>
    <span class="n">total_bits</span> <span class="o">=</span> <span class="p">(</span><span class="n">KEY_LEN</span> <span class="o">+</span> <span class="n">CTR_LEN</span> <span class="o">+</span> <span class="nb">len</span><span class="p">(</span><span class="n">pad</span><span class="p">)</span> <span class="o">+</span> <span class="n">CTR_LEN</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>
    <span class="c1"># 0x80 + many 0x00 + 16 bytes length-field
</span>    <span class="k">return</span> <span class="n">counter</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x80</span><span class="s">"</span> <span class="o">+</span> <span class="sa">b</span><span class="s">"</span><span class="se">\x00</span><span class="s">"</span><span class="o">*</span><span class="mi">101</span> <span class="o">+</span> <span class="n">total_bits</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>

<span class="n">plaintext</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cipher</span><span class="p">))</span>
<span class="k">for</span> <span class="n">block_index</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">cipher</span><span class="p">),</span> <span class="n">BLOCK_SIZE</span><span class="p">):</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">block_index</span><span class="o">//</span><span class="n">BLOCK_SIZE</span><span class="si">:</span><span class="mi">010</span><span class="si">}</span><span class="s">"</span><span class="p">.</span><span class="n">encode</span><span class="p">()</span>
    <span class="n">ks_words</span> <span class="o">=</span> <span class="n">sha512_compress</span><span class="p">(</span><span class="n">second_block</span><span class="p">(</span><span class="n">counter</span><span class="p">),</span> <span class="n">state_ints</span><span class="p">)</span>
    <span class="n">keystream</span> <span class="o">=</span> <span class="sa">b</span><span class="s">""</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">word</span><span class="p">.</span><span class="n">to_bytes</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">ks_words</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">byte_index</span><span class="p">,</span> <span class="p">(</span><span class="n">ct_byte</span><span class="p">,</span> <span class="n">keystream_byte</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">cipher</span><span class="p">[</span><span class="n">block_index</span><span class="p">:</span><span class="n">block_index</span><span class="o">+</span><span class="n">BLOCK_SIZE</span><span class="p">],</span> <span class="n">keystream</span><span class="p">)):</span>
        <span class="n">plaintext</span><span class="p">[</span><span class="n">block_index</span> <span class="o">+</span> <span class="n">byte_index</span><span class="p">]</span> <span class="o">=</span> <span class="n">ct_byte</span> <span class="o">^</span> <span class="n">keystream_byte</span>

<span class="nb">open</span><span class="p">(</span><span class="s">"flag.bmp"</span><span class="p">,</span> <span class="s">"wb"</span><span class="p">).</span><span class="n">write</span><span class="p">(</span><span class="n">plaintext</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"flag.bmp written"</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="SHA2" /><category term="Length extension" /><category term="Stream cipher" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Mancity (CryptoCTF 2025)</title><link href="https://zukane.github.io/mancity/" rel="alternate" type="text/html" title="Mancity (CryptoCTF 2025)" /><published>2025-07-13T12:00:00+02:00</published><updated>2025-07-13T12:00:00+02:00</updated><id>https://zukane.github.io/mancity</id><content type="html" xml:base="https://zukane.github.io/mancity/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">flag</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="k">def</span> <span class="nf">man</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">B</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">n</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>
        <span class="n">M</span> <span class="o">=</span> <span class="s">''</span>
        <span class="k">for</span> <span class="n">b</span> <span class="ow">in</span> <span class="n">B</span><span class="p">:</span>
                <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="s">'0'</span><span class="p">:</span>
                        <span class="n">M</span> <span class="o">+=</span> <span class="s">'01'</span>
                <span class="k">else</span><span class="p">:</span>
                        <span class="n">M</span> <span class="o">+=</span> <span class="s">'11'</span>
        <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">M</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">keygen</span><span class="p">(</span><span class="n">nbit</span><span class="p">):</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">p</span> <span class="o">=</span> <span class="n">getPrime</span><span class="p">(</span><span class="n">nbit</span><span class="p">)</span>
                <span class="n">r</span> <span class="o">=</span> <span class="n">man</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
                <span class="n">B</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">p</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span> <span class="o">+</span> <span class="s">'1'</span> <span class="o">*</span> <span class="n">nbit</span>
                <span class="n">q</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">B</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">isPrime</span><span class="p">(</span><span class="n">q</span><span class="p">)</span> <span class="ow">and</span> <span class="n">isPrime</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>
                                <span class="k">return</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span>

<span class="n">nbit</span> <span class="o">=</span> <span class="mi">256</span>
<span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">=</span> <span class="n">keygen</span><span class="p">(</span><span class="n">nbit</span><span class="p">)</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">flag</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">n</span>
<span class="n">e</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">1234567891</span><span class="p">,</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
<span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'n = </span><span class="si">{</span><span class="n">n</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'c = </span><span class="si">{</span><span class="n">c</span><span class="si">}</span><span class="s">'</span><span class="p">)</span>  
</code></pre></div></div>

<p>as well as output.txt:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>n = 147170819334030469053514652921356515888015711942553338463409772437981228515273287953989706666936875524451626901247038180594875568558137526484665015890594045767912340169965961750130156341999306808017498374501001042628249176543370525803456692022546235595791111819909503496986338431136130272043196908119165239297
c = 77151713996168344370880352082934801122524956107256445231326053049976568087412199358725058612262271922128984783428798480191211811217854076875727477848490840660333035334309193217618178091153472265093622822195960145852562781183839474868269109313543427082414220136748700364027714272845969723750108397300867408537     
</code></pre></div></div>

<p>This is an RSA-like implementation with some funky key generation</p>

<h5 id="source-code-analysis">Source code analysis</h5>

<p>The encryption script implements a Manchester encoding scheme in the function <code class="language-plaintext highlighter-rouge">man()</code>. The number passed to this function is converted to bits, and each bit is replaced with either <code class="language-plaintext highlighter-rouge">01</code> or <code class="language-plaintext highlighter-rouge">11</code>. The resulting bitstream is converted back into an integer.</p>

<p>The key generation algorithm produces a 256-bit prime integer $p$, which is used to generate both RSA prime factors. One is generated by passing $p$ to <code class="language-plaintext highlighter-rouge">man()</code>, resulting in a 512-bit integer, while the other prime is generated by appending 256 bits to $p$’s bitstream. This tells us a lot about the structure of the prime factors.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>r: ?1?1?1?1?1?1?1?1...?1?1?1?1?1?1?1?1 
q: ????????????????...1111111111111111
</code></pre></div></div>

<p>Since half of the prime factor $q$ is known, recovering the prime using coppersmith is a promising idea. However, even with 50% consecutive bits, the approach failed. Another approach may be to use branch and prune, since 50% of both primes are known and are scattered in $r$, but this also did not work out, probably due to $q$ missing too many consecutive bits.</p>

<p>Instead, we take advantage of the prime factor’s unique structure and relationship with the modulus $n$. First, for clarity, I will refer to the prime factors $q$ and $r$ as $p$ and $q$ respectively, due to the way the encryption script reuses variable names and returns the factors from the keygen algorithm</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>p: ????????????????...1111111111111111
q: ?1?1?1?1?1?1?1?1...?1?1?1?1?1?1?1?1 
</code></pre></div></div>

<p>We can represent $p$ as the following:</p>

\[\large p = 2^{256}\cdot x + 2^{256}-1\]

<p>for some unknown $x$ (upper bits). Taking $p$ modulo $2^{256}$, we get:</p>

\[\large p = -1 \mod 2^{256}\]

<p>Which means:</p>

\[\large \begin{align}
\nonumber n = p \cdot q \mod 2^{256} \\
\nonumber n = -1 \cdot q \mod 2^{256} \\
\nonumber n = -q \mod 2^{256} \\
\nonumber -n = q \mod 2^{256}
\end{align}\]

<p>So by taking $-n \mod 2^{256}$, we are able to recover the bottom $256$ bits of $q$. Remember, $q$ (r) was generated using the Manchester encoding. The $256$ bottom bits of $q$ include the $128$ least significant bits of the random prime. Since $p$ and $q$ are generated using the same prime, this leaks another $128$ bits of $p$, for a total of $384$. With 75% of a prime factor’s bits, the primes are recovered from coppersmith in a trivial manner.</p>

<h5 id="recovering-the-prime-factors">Recovering the prime factors</h5>

<p>Recovering 75% of $p$’s bits can be done like so:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rlow</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="o">^</span><span class="mi">256</span>
<span class="n">rbits</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">rlow</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>

<span class="c1"># Undoing manchester encoding
</span><span class="n">qlow</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">rbits</span><span class="p">),</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">qlow</span> <span class="o">+=</span> <span class="n">rbits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="n">qlow</span> <span class="o">+=</span> <span class="s">"1"</span><span class="o">*</span><span class="mi">256</span>
<span class="n">leak</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">qlow</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<p>With the leaked value, the prime is instantly recovered using <code class="language-plaintext highlighter-rouge">cuso</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">T</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">"x"</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">384</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">leak</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span>           <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span>              <span class="o">=</span> <span class="p">{</span><span class="n">T</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">^</span><span class="mi">128</span><span class="p">)},</span>
    <span class="n">modulus</span>             <span class="o">=</span> <span class="s">"p"</span><span class="p">,</span>     
    <span class="n">modulus_multiple</span>    <span class="o">=</span> <span class="n">n</span><span class="p">,</span>   
    <span class="n">modulus_lower_bound</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">511</span><span class="p">,</span> 
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"CuSO found no root"</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"p"</span><span class="p">]</span>
</code></pre></div></div>

<p>From here, its just regular RSA decryption</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">p</span> <span class="o">=</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"p"</span><span class="p">]</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span> <span class="o">//</span> <span class="n">p</span>
<span class="k">assert</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span> <span class="o">==</span> <span class="n">n</span>

<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="n">m</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="n">m</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># CCTF{M4nch3sReR_c0D!ng_wI7H_RSA}
</span></code></pre></div></div>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cuso</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="n">long_to_bytes</span>

<span class="n">n</span> <span class="o">=</span> <span class="mi">147170819334030469053514652921356515888015711942553338463409772437981228515273287953989706666936875524451626901247038180594875568558137526484665015890594045767912340169965961750130156341999306808017498374501001042628249176543370525803456692022546235595791111819909503496986338431136130272043196908119165239297</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">77151713996168344370880352082934801122524956107256445231326053049976568087412199358725058612262271922128984783428798480191211811217854076875727477848490840660333035334309193217618178091153472265093622822195960145852562781183839474868269109313543427082414220136748700364027714272845969723750108397300867408537</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">1234567891</span>

<span class="n">M</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">256</span>
<span class="n">rlow</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="n">n</span><span class="p">)</span><span class="o">%</span><span class="n">M</span>
<span class="n">rbits</span> <span class="o">=</span> <span class="nb">bin</span><span class="p">(</span><span class="n">rlow</span><span class="p">)[</span><span class="mi">2</span><span class="p">:]</span>

<span class="n">qlow</span> <span class="o">=</span> <span class="s">""</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">rbits</span><span class="p">),</span><span class="mi">2</span><span class="p">):</span>
    <span class="n">qlow</span> <span class="o">+=</span> <span class="n">rbits</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
<span class="n">qlow</span> <span class="o">+=</span> <span class="s">"1"</span><span class="o">*</span><span class="mi">256</span>
<span class="n">leak</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">qlow</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>

<span class="n">T</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">"x"</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">384</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">leak</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span>           <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span>              <span class="o">=</span> <span class="p">{</span><span class="n">T</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">^</span><span class="mi">128</span><span class="p">)},</span>
    <span class="n">modulus</span>             <span class="o">=</span> <span class="s">"p"</span><span class="p">,</span>     
    <span class="n">modulus_multiple</span>    <span class="o">=</span> <span class="n">n</span><span class="p">,</span>   
    <span class="n">modulus_lower_bound</span> <span class="o">=</span> <span class="mi">2</span><span class="o">^</span><span class="mi">511</span><span class="p">,</span> 
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"CuSO found no root"</span>

<span class="n">p</span> <span class="o">=</span> <span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"p"</span><span class="p">]</span>
<span class="n">q</span> <span class="o">=</span> <span class="n">n</span> <span class="o">//</span> <span class="n">p</span>
<span class="k">assert</span> <span class="n">p</span><span class="o">*</span><span class="n">q</span> <span class="o">==</span> <span class="n">n</span>

<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="n">m</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">long_to_bytes</span><span class="p">(</span><span class="n">m</span><span class="p">).</span><span class="n">decode</span><span class="p">())</span>
<span class="c1"># CCTF{M4nch3sReR_c0D!ng_wI7H_RSA}
</span></code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Coppersmith small roots" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry><entry><title type="html">Phony (CryptoCTF 2025)</title><link href="https://zukane.github.io/phony/" rel="alternate" type="text/html" title="Phony (CryptoCTF 2025)" /><published>2025-07-13T12:00:00+02:00</published><updated>2025-07-13T12:00:00+02:00</updated><id>https://zukane.github.io/phony</id><content type="html" xml:base="https://zukane.github.io/phony/"><![CDATA[<h5 id="challenge-overview">Challenge overview</h5>

<p>In this CTF challenge we are given the following encryption script, as well as a host and port to connect to.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span>
<span class="kn">import</span> <span class="nn">sys</span><span class="p">,</span> <span class="n">os</span>
<span class="kn">from</span> <span class="nn">Crypto.Util.number</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">flag</span> <span class="kn">import</span> <span class="n">flag</span>

<span class="k">def</span> <span class="nf">die</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="n">pr</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="n">quit</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">pr</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="n">s</span> <span class="o">=</span> <span class="s">" "</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">args</span><span class="p">))</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">"</span><span class="se">\n</span><span class="s">"</span><span class="p">)</span>
        <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="n">flush</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">sc</span><span class="p">():</span>
        <span class="k">return</span> <span class="n">sys</span><span class="p">.</span><span class="n">stdin</span><span class="p">.</span><span class="nb">buffer</span><span class="p">.</span><span class="n">readline</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">keygen</span><span class="p">(</span><span class="n">nbit</span><span class="p">):</span>
        <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="p">[</span><span class="n">getPrime</span><span class="p">(</span><span class="n">nbit</span> <span class="o">+</span> <span class="p">(</span><span class="n">nbit</span> <span class="o">&gt;&gt;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">*</span> <span class="n">_</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">3</span><span class="p">)]</span>
        <span class="k">return</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
        <span class="n">border</span> <span class="o">=</span> <span class="s">"┃"</span>
        <span class="n">pr</span><span class="p">(</span>        <span class="s">"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓"</span><span class="p">)</span>
        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">" Welcome to the Phoney crypto-system task, a nice cryptosystem   "</span><span class="p">,</span> <span class="n">border</span><span class="p">)</span>
        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">" that's so good, it's theoretically unbreakable because it exists"</span><span class="p">,</span> <span class="n">border</span><span class="p">)</span>
        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">" only in the realm of imagination!! Try the get the long flag :-)"</span><span class="p">,</span> <span class="n">border</span><span class="p">)</span>
        <span class="n">pr</span><span class="p">(</span>        <span class="s">"┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛"</span><span class="p">)</span>
        <span class="k">global</span> <span class="n">flag</span>
        <span class="n">m</span> <span class="o">=</span> <span class="n">bytes_to_long</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">))</span> <span class="o">+</span> <span class="n">flag</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">urandom</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">flag</span><span class="p">)))</span>
        <span class="n">nbit</span> <span class="o">=</span> <span class="mi">512</span>
        <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span> <span class="o">=</span> <span class="n">keygen</span><span class="p">(</span><span class="n">nbit</span><span class="p">)</span>
        <span class="n">n</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">e</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span> <span class="o">*</span> <span class="n">r</span><span class="p">,</span> <span class="n">inverse</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">q</span> <span class="o">*</span> <span class="n">r</span><span class="p">)</span> <span class="o">+</span> <span class="n">p</span><span class="p">,</span> <span class="mi">1234567891</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">pr</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">border</span><span class="si">}</span><span class="s"> Options: </span><span class="se">\n</span><span class="si">{</span><span class="n">border</span><span class="si">}</span><span class="se">\t</span><span class="s">[E]ncrypt the flag! </span><span class="se">\n</span><span class="si">{</span><span class="n">border</span><span class="si">}</span><span class="se">\t</span><span class="s">[P]ublic information </span><span class="se">\n</span><span class="si">{</span><span class="n">border</span><span class="si">}</span><span class="se">\t</span><span class="s">[Q]uit"</span><span class="p">)</span>
                <span class="n">ans</span> <span class="o">=</span> <span class="n">sc</span><span class="p">().</span><span class="n">decode</span><span class="p">().</span><span class="n">strip</span><span class="p">().</span><span class="n">lower</span><span class="p">()</span>
                <span class="k">if</span> <span class="n">ans</span> <span class="o">==</span> <span class="s">'e'</span><span class="p">:</span>
                        <span class="k">assert</span> <span class="n">m</span> <span class="o">&lt;</span> <span class="n">n</span>
                        <span class="n">c</span> <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
                        <span class="n">pr</span><span class="p">(</span><span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">c</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
                <span class="k">elif</span> <span class="n">ans</span> <span class="o">==</span> <span class="s">'p'</span><span class="p">:</span>
                        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">n</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
                        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">s</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
                        <span class="n">pr</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">q</span> <span class="o">%</span> <span class="n">p</span> <span class="o">=</span> <span class="si">}</span><span class="s">'</span><span class="p">)</span>
                <span class="k">elif</span> <span class="n">ans</span> <span class="o">==</span> <span class="s">'q'</span><span class="p">:</span>
                        <span class="n">die</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">"Quitting..."</span><span class="p">)</span>
                <span class="k">else</span><span class="p">:</span>
                        <span class="n">die</span><span class="p">(</span><span class="n">border</span><span class="p">,</span> <span class="s">"Bye..."</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">'__main__'</span><span class="p">:</span>
        <span class="n">main</span><span class="p">()</span>  
</code></pre></div></div>

<p>By connecting to the host, we are given some parameters:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>c = 6869860867050333958899459281380169365224860725191141490075681906921285491146868469402924407937586752602837270188417362698698432410645612767176659341773981474956667075905162196530581138090668035380527629936507938083351225221764373058697174991005915834617167971014590329567873587411280896708327508300000380436210779160971169732950060789651351851118197920235412555409856566771235934800199725530146544692622204638420681024709553733579632544440316928742635345488552585477308018879605401386083632773124260425537471704361270484
n = 7593182903146811406435471791518649687495414242882290735012260860376531253817852809889056324416625293328336902814033416817885049198231261658575996571173050362548418752191140228401121790728216545279595354039266794764391641456534625225792086731913555135968347381141768054313651417425174249608933255246607612139992917832326481150388513002349951254458456726813282961483706607801158152631829134593355178831985262912282527824542674089294563518520637393822269227734326318416000202832970945614787755290083730313250861320246580607
s = 408090971571018322541813922483180473677053198626231795703512988713148003287852666320118777537915800591251623270019431071055073761901852807133561327188793849601691060300945653929089492414728804506355613740171489217849409547504090029963007153700898456243760945317209450011285770935513349812984386394905043517448605752738202406721452527001589670740463592746693105274845
q % p = 9306850992856150821106831016751373801819672057267955676046215879463293889689158245940844448621629363248578706865630660666356930840954191009944889404229867
</code></pre></div></div>

<h5 id="recovering-the-prime-factors">Recovering the prime factors</h5>

<p>The service leaks three pieces of information besides the ciphertext $c$:</p>
<ul>
  <li>the composite modulus $n = p \cdot q \cdot r$</li>
  <li>the integer $s = p + p^{-1}_{qr}$</li>
  <li>the residue $r \equiv q \bmod p$</li>
</ul>

<p>Because $s = p + p^{-1}_{\;qr}$ we have</p>

\[\large
\begin{align}
\nonumber p^{-1}_{\;qr} &amp;= s-p \\
\nonumber (s-p)\,p &amp;\equiv 1\mod{qr}
\end{align}\]

<p>Multiplying by $p$ gives a relation that is zero modulo $n$:</p>

\[\large
\begin{align}
\nonumber p\bigl((s-p)p-1\bigr) &amp;\equiv 0 \mod{n} \\
\nonumber f(p)=p^{3}-s\,p^{2}+p &amp;\equiv 0\mod{n}
\end{align}\]

<p>The prime $p$ is only $512$ bits, while $n$ is about $1728$ bits, so $p$ is a small root of the monic cubic</p>

\[\large f(x)=x^{3}-s\,x^{2}+x\mod{n}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">3</span> <span class="o">-</span> <span class="n">s</span><span class="o">*</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">520</span><span class="p">)}</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span><span class="o">=</span><span class="p">[</span><span class="n">f</span><span class="p">],</span>         
    <span class="n">bounds</span><span class="o">=</span><span class="n">bounds</span><span class="p">,</span>
    <span class="n">modulus</span><span class="o">=</span><span class="n">n</span><span class="p">,</span>               
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no root found"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"p = </span><span class="si">{</span><span class="n">p</span><span class="si">:</span><span class="c1">#x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
<span class="c1"># p = 0xda7a510e37d4c24fbed858e74371c3b199b7163f04e87be5cc36345419443a48ae80c16a4634b2754b543326e30ac45d35e13a20274a94bd662ea96f7d7121b9
</span></code></pre></div></div>

<p>Once $p$ is known, the extra leak $q\bmod p$ lets us write</p>

\[\large
\begin{align}
\nonumber q &amp;= p \cdot k + r \\
\nonumber r &amp;= q \bmod p
\end{align}\]

<p>Here $k &lt; 2^{64}$ because $q$ is $576$ bits, only $64$ bits longer than $p$.  Substituting into $n$ shows that the linear polynomial</p>

\[\large g(k)=p\,k+r\equiv 0 \mod{q}\]

<p>This can also be easily solved using <code class="language-plaintext highlighter-rouge">cuso</code>:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">q_mod_p</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">64</span><span class="p">)}</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span>        <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span>           <span class="o">=</span> <span class="n">bounds</span><span class="p">,</span>
    <span class="n">modulus</span>          <span class="o">=</span> <span class="s">"q"</span><span class="p">,</span>    
    <span class="n">modulus_multiple</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span><span class="p">,</span>      
    <span class="n">modulus_lower_bound</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">560</span>  
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no root found"</span>

<span class="n">q</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"q"</span><span class="p">])</span> 
</code></pre></div></div>

<p>From here, its just standard RSA decryption.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">q</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"q"</span><span class="p">])</span> 
<span class="n">r</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="n">q</span><span class="p">)</span>
<span class="n">e</span>   <span class="o">=</span> <span class="mi">1234567891</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>b'ax\x90\xda\xea\xefa\x9f\xce\xb8&amp;n\x85~\xf4\xbe\xef|\x9eF\xc4x\xa039\xf1\x8a=\xdf\x10\x17\x96\x97\xe3h@\xb6\xae\xea\xf3\x84K\x03\x9a\xb4\xe6i\xd8\x04CCTF{c0UlD_b3_ReCoVEr3d_v!4_Coppersmiths_m3ThOd?}_(\x9a\x9e\x9b,\xbb\xde\x15\xf3\x0fP\x1e\xbc\xd5C\x1au\x1b3d\x18\x15X$^\x83\x17\xbd\xa3&amp;\xb9\xa7H\xe0\x19Y\xf7\x8f0`\xd6J`\xf7\xd22\xfb\xd8'
</code></pre></div></div>

<p>So the flag is <code class="language-plaintext highlighter-rouge">CCTF{c0UlD_b3_ReCoVEr3d_v!4_Coppersmiths_m3ThOd?}</code></p>

<h5 id="solve-script">Solve script</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">cuso</span>

<span class="n">c</span> <span class="o">=</span> <span class="mi">6869860867050333958899459281380169365224860725191141490075681906921285491146868469402924407937586752602837270188417362698698432410645612767176659341773981474956667075905162196530581138090668035380527629936507938083351225221764373058697174991005915834617167971014590329567873587411280896708327508300000380436210779160971169732950060789651351851118197920235412555409856566771235934800199725530146544692622204638420681024709553733579632544440316928742635345488552585477308018879605401386083632773124260425537471704361270484</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">7593182903146811406435471791518649687495414242882290735012260860376531253817852809889056324416625293328336902814033416817885049198231261658575996571173050362548418752191140228401121790728216545279595354039266794764391641456534625225792086731913555135968347381141768054313651417425174249608933255246607612139992917832326481150388513002349951254458456726813282961483706607801158152631829134593355178831985262912282527824542674089294563518520637393822269227734326318416000202832970945614787755290083730313250861320246580607</span>
<span class="n">s</span> <span class="o">=</span> <span class="mi">408090971571018322541813922483180473677053198626231795703512988713148003287852666320118777537915800591251623270019431071055073761901852807133561327188793849601691060300945653929089492414728804506355613740171489217849409547504090029963007153700898456243760945317209450011285770935513349812984386394905043517448605752738202406721452527001589670740463592746693105274845</span>
<span class="n">q_mod_p</span> <span class="o">=</span> <span class="mi">9306850992856150821106831016751373801819672057267955676046215879463293889689158245940844448621629363248578706865630660666356930840954191009944889404229867</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">var</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">3</span> <span class="o">-</span> <span class="n">s</span><span class="o">*</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="n">x</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">520</span><span class="p">)}</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span><span class="o">=</span><span class="p">[</span><span class="n">f</span><span class="p">],</span>         
    <span class="n">bounds</span><span class="o">=</span><span class="n">bounds</span><span class="p">,</span>
    <span class="n">modulus</span><span class="o">=</span><span class="n">n</span><span class="p">,</span>               
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no root found"</span>

<span class="n">p</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="n">x</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"p = </span><span class="si">{</span><span class="n">p</span><span class="si">:</span><span class="c1">#x</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>

<span class="n">f</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">x</span> <span class="o">+</span> <span class="n">q_mod_p</span>
<span class="n">bounds</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">64</span><span class="p">)}</span>

<span class="n">roots</span> <span class="o">=</span> <span class="n">cuso</span><span class="p">.</span><span class="n">find_small_roots</span><span class="p">(</span>
    <span class="n">relations</span>        <span class="o">=</span> <span class="p">[</span><span class="n">f</span><span class="p">],</span>
    <span class="n">bounds</span>           <span class="o">=</span> <span class="n">bounds</span><span class="p">,</span>
    <span class="n">modulus</span>          <span class="o">=</span> <span class="s">"q"</span><span class="p">,</span>    
    <span class="n">modulus_multiple</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="n">p</span><span class="p">,</span>      
    <span class="n">modulus_lower_bound</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">&lt;&lt;</span> <span class="mi">560</span>  
<span class="p">)</span>
<span class="k">assert</span> <span class="n">roots</span><span class="p">,</span> <span class="s">"no root found"</span>

<span class="n">q</span>  <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">roots</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="s">"q"</span><span class="p">])</span> 
<span class="n">r</span> <span class="o">=</span> <span class="n">n</span><span class="o">/</span><span class="p">(</span><span class="n">p</span><span class="o">*</span><span class="n">q</span><span class="p">)</span>
<span class="n">e</span>   <span class="o">=</span> <span class="mi">1234567891</span>
<span class="n">phi</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">q</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="n">r</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">d</span>   <span class="o">=</span> <span class="nb">pow</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">phi</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">bytes</span><span class="p">.</span><span class="n">fromhex</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="nb">pow</span><span class="p">(</span><span class="n">c</span><span class="p">,</span><span class="n">d</span><span class="p">,</span><span class="n">n</span><span class="p">)</span><span class="si">:</span><span class="n">x</span><span class="si">}</span><span class="s">"</span><span class="p">))</span>
</code></pre></div></div>]]></content><author><name>Zukane</name></author><category term="writeups" /><category term="RSA" /><category term="Coppersmith small roots" /><summary type="html"><![CDATA[Challenge overview]]></summary></entry></feed>